<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>all (72 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(225,140,12)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>start_thread(arg=&lt;optimized (48 samples, 66.67%)</title><rect x="10.0" y="533" width="786.7" height="15.0" fill="rgb(248,220,46)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >start_thread(arg=&lt;optimized</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 1.39%)</title><rect x="1173.6" y="341" width="16.4" height="15.0" fill="rgb(216,188,23)" rx="2" ry="2" />
<text  x="1176.61" y="351.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="534.4" y="213" width="32.8" height="15.0" fill="rgb(254,100,13)" rx="2" ry="2" />
<text  x="537.44" y="223.5" >Mu..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.39%)</title><rect x="731.1" y="133" width="16.4" height="15.0" fill="rgb(250,200,44)" rx="2" ry="2" />
<text  x="734.11" y="143.5" ></text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc8c000b60 (1 samples, 1.39%)</title><rect x="223.1" y="373" width="16.3" height="15.0" fill="rgb(247,81,1)" rx="2" ry="2" />
<text  x="226.06" y="383.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.39%)</title><rect x="731.1" y="101" width="16.4" height="15.0" fill="rgb(218,27,1)" rx="2" ry="2" />
<text  x="734.11" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="583.6" y="165" width="16.4" height="15.0" fill="rgb(245,125,9)" rx="2" ry="2" />
<text  x="586.61" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (1 samples, 1.39%)</title><rect x="1091.7" y="485" width="16.4" height="15.0" fill="rgb(215,127,29)" rx="2" ry="2" />
<text  x="1094.67" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="567.2" y="309" width="32.8" height="15.0" fill="rgb(217,43,49)" rx="2" ry="2" />
<text  x="570.22" y="319.5" >st..</text>
</g>
<g >
<title>_IO_new_file_close_it(fp=fp@entry=0x7fbc88000bd0) (1 samples, 1.39%)</title><rect x="190.3" y="357" width="16.4" height="15.0" fill="rgb(240,13,13)" rx="2" ry="2" />
<text  x="193.28" y="367.5" ></text>
</g>
<g >
<title>clone (1 samples, 1.39%)</title><rect x="239.4" y="277" width="16.4" height="15.0" fill="rgb(217,65,48)" rx="2" ry="2" />
<text  x="242.44" y="287.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="600.0" y="261" width="32.8" height="15.0" fill="rgb(242,146,2)" rx="2" ry="2" />
<text  x="603.00" y="271.5" >st..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::generatePageIds(MultiThreadedPageRankComputer::Pool&amp;, (32 samples, 44.44%)</title><rect x="10.0" y="469" width="524.4" height="15.0" fill="rgb(217,32,22)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::generate..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="747.5" y="133" width="16.4" height="15.0" fill="rgb(212,117,42)" rx="2" ry="2" />
<text  x="750.50" y="143.5" ></text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc80000bd0, (3 samples, 4.17%)</title><rect x="337.8" y="341" width="49.1" height="15.0" fill="rgb(206,169,12)" rx="2" ry="2" />
<text  x="340.78" y="351.5" >__GI..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="616.4" y="133" width="16.4" height="15.0" fill="rgb(244,5,19)" rx="2" ry="2" />
<text  x="619.39" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.78%)</title><rect x="1157.2" y="437" width="32.8" height="15.0" fill="rgb(209,27,26)" rx="2" ry="2" />
<text  x="1160.22" y="447.5" >st..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="600.0" y="309" width="32.8" height="15.0" fill="rgb(247,21,50)" rx="2" ry="2" />
<text  x="603.00" y="319.5" >st..</text>
</g>
<g >
<title>__spawni(pid=pid@entry=0x7fbc7c000cb0, (1 samples, 1.39%)</title><rect x="91.9" y="309" width="16.4" height="15.0" fill="rgb(227,158,17)" rx="2" ry="2" />
<text  x="94.94" y="319.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (16 samples, 22.22%)</title><rect x="534.4" y="405" width="262.3" height="15.0" fill="rgb(252,182,18)" rx="2" ry="2" />
<text  x="537.44" y="415.5" >std::__future_base::_State_baseV2::..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait(this=0x55d93f9c78d0) (1 samples, 1.39%)</title><rect x="1124.4" y="453" width="16.4" height="15.0" fill="rgb(217,74,24)" rx="2" ry="2" />
<text  x="1127.44" y="463.5" ></text>
</g>
<g >
<title>fgets(__stream=0x7fbc84000bd0, (2 samples, 2.78%)</title><rect x="386.9" y="373" width="32.8" height="15.0" fill="rgb(233,163,3)" rx="2" ry="2" />
<text  x="389.94" y="383.5" >fg..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 1.39%)</title><rect x="567.2" y="53" width="16.4" height="15.0" fill="rgb(236,222,8)" rx="2" ry="2" />
<text  x="570.22" y="63.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="550.8" y="117" width="16.4" height="15.0" fill="rgb(220,186,0)" rx="2" ry="2" />
<text  x="553.83" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 1.39%)</title><rect x="1157.2" y="213" width="16.4" height="15.0" fill="rgb(246,92,38)" rx="2" ry="2" />
<text  x="1160.22" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="632.8" y="229" width="32.8" height="15.0" fill="rgb(215,181,40)" rx="2" ry="2" />
<text  x="635.78" y="239.5" >st..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (2 samples, 2.78%)</title><rect x="632.8" y="117" width="32.8" height="15.0" fill="rgb(246,75,50)" rx="2" ry="2" />
<text  x="635.78" y="127.5" >st..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 1.39%)</title><rect x="731.1" y="117" width="16.4" height="15.0" fill="rgb(250,118,16)" rx="2" ry="2" />
<text  x="734.11" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.39%)</title><rect x="1140.8" y="421" width="16.4" height="15.0" fill="rgb(205,128,44)" rx="2" ry="2" />
<text  x="1143.83" y="431.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc74000bd0) (3 samples, 4.17%)</title><rect x="255.8" y="309" width="49.2" height="15.0" fill="rgb(206,215,42)" rx="2" ry="2" />
<text  x="258.83" y="319.5" >__GI..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="632.8" y="293" width="32.8" height="15.0" fill="rgb(213,227,13)" rx="2" ry="2" />
<text  x="635.78" y="303.5" >st..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="567.2" y="277" width="32.8" height="15.0" fill="rgb(242,216,50)" rx="2" ry="2" />
<text  x="570.22" y="287.5" >st..</text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (1 samples, 1.39%)</title><rect x="1108.1" y="389" width="16.3" height="15.0" fill="rgb(250,131,5)" rx="2" ry="2" />
<text  x="1111.06" y="399.5" ></text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc9c9fce20 (2 samples, 2.78%)</title><rect x="468.9" y="357" width="32.8" height="15.0" fill="rgb(233,85,54)" rx="2" ry="2" />
<text  x="471.89" y="367.5" >_I..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="550.8" y="149" width="16.4" height="15.0" fill="rgb(230,58,24)" rx="2" ry="2" />
<text  x="553.83" y="159.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="665.6" y="245" width="32.7" height="15.0" fill="rgb(232,181,41)" rx="2" ry="2" />
<text  x="668.56" y="255.5" >st..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c7318, (2 samples, 2.78%)</title><rect x="567.2" y="357" width="32.8" height="15.0" fill="rgb(205,201,28)" rx="2" ry="2" />
<text  x="570.22" y="367.5" >__..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="731.1" y="213" width="32.8" height="15.0" fill="rgb(215,129,47)" rx="2" ry="2" />
<text  x="734.11" y="223.5" >Mu..</text>
</g>
<g >
<title>_IO_new_file_close_it(fp=fp@entry=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="141.1" y="357" width="16.4" height="15.0" fill="rgb(237,146,42)" rx="2" ry="2" />
<text  x="144.11" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (32 samples, 44.44%)</title><rect x="10.0" y="437" width="524.4" height="15.0" fill="rgb(240,73,48)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="1091.7" y="405" width="16.4" height="15.0" fill="rgb(223,187,48)" rx="2" ry="2" />
<text  x="1094.67" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="714.7" y="101" width="16.4" height="15.0" fill="rgb(221,185,47)" rx="2" ry="2" />
<text  x="717.72" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="567.2" y="149" width="16.4" height="15.0" fill="rgb(220,139,39)" rx="2" ry="2" />
<text  x="570.22" y="159.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="763.9" y="325" width="32.8" height="15.0" fill="rgb(207,139,54)" rx="2" ry="2" />
<text  x="766.89" y="335.5" >st..</text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc88000bd0, (2 samples, 2.78%)</title><rect x="419.7" y="341" width="32.8" height="15.0" fill="rgb(240,134,48)" rx="2" ry="2" />
<text  x="422.72" y="351.5" >__..</text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 2.78%)</title><rect x="632.8" y="149" width="32.8" height="15.0" fill="rgb(241,23,8)" rx="2" ry="2" />
<text  x="635.78" y="159.5" >Pa..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="681.9" y="117" width="16.4" height="15.0" fill="rgb(217,81,7)" rx="2" ry="2" />
<text  x="684.94" y="127.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="616.4" y="101" width="16.4" height="15.0" fill="rgb(235,220,0)" rx="2" ry="2" />
<text  x="619.39" y="111.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Huge (1 samples, 1.39%)</title><rect x="108.3" y="389" width="16.4" height="15.0" fill="rgb(245,53,3)" rx="2" ry="2" />
<text  x="111.33" y="399.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc94000bd0, (2 samples, 2.78%)</title><rect x="501.7" y="325" width="32.7" height="15.0" fill="rgb(241,205,38)" rx="2" ry="2" />
<text  x="504.67" y="335.5" >__..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="567.2" y="293" width="32.8" height="15.0" fill="rgb(221,91,13)" rx="2" ry="2" />
<text  x="570.22" y="303.5" >st..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="698.3" y="213" width="32.8" height="15.0" fill="rgb(237,98,42)" rx="2" ry="2" />
<text  x="701.33" y="223.5" >Mu..</text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc74000bd0) (3 samples, 4.17%)</title><rect x="255.8" y="293" width="49.2" height="15.0" fill="rgb(219,173,43)" rx="2" ry="2" />
<text  x="258.83" y="303.5" >_IO_..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="698.3" y="325" width="32.8" height="15.0" fill="rgb(232,199,11)" rx="2" ry="2" />
<text  x="701.33" y="335.5" >st..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="763.9" y="245" width="32.8" height="15.0" fill="rgb(245,131,36)" rx="2" ry="2" />
<text  x="766.89" y="255.5" >st..</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.39%)</title><rect x="567.2" y="101" width="16.4" height="15.0" fill="rgb(211,142,33)" rx="2" ry="2" />
<text  x="570.22" y="111.5" ></text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc7c000b60 (1 samples, 1.39%)</title><rect x="91.9" y="373" width="16.4" height="15.0" fill="rgb(229,91,37)" rx="2" ry="2" />
<text  x="94.94" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::generatePageIds(MultiThreadedPageRankComputer::Pool&amp;, (32 samples, 44.44%)</title><rect x="10.0" y="453" width="524.4" height="15.0" fill="rgb(212,87,23)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std::__invoke&lt;MultiThreadedPageRankComputer::generatePageIds(MultiThread..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (1 samples, 1.39%)</title><rect x="616.4" y="181" width="16.4" height="15.0" fill="rgb(243,189,17)" rx="2" ry="2" />
<text  x="619.39" y="191.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="600.0" y="341" width="32.8" height="15.0" fill="rgb(216,123,50)" rx="2" ry="2" />
<text  x="603.00" y="351.5" >st..</text>
</g>
<g >
<title>clone (1 samples, 1.39%)</title><rect x="91.9" y="277" width="16.4" height="15.0" fill="rgb(235,202,40)" rx="2" ry="2" />
<text  x="94.94" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="616.4" y="117" width="16.4" height="15.0" fill="rgb(229,211,15)" rx="2" ry="2" />
<text  x="619.39" y="127.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Stupid (2 samples, 2.78%)</title><rect x="223.1" y="389" width="32.7" height="15.0" fill="rgb(217,217,41)" rx="2" ry="2" />
<text  x="226.06" y="399.5" >Sh..</text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="173.9" y="341" width="16.4" height="15.0" fill="rgb(216,31,31)" rx="2" ry="2" />
<text  x="176.89" y="351.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="780.3" y="149" width="16.4" height="15.0" fill="rgb(228,217,33)" rx="2" ry="2" />
<text  x="783.28" y="159.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 1.39%)</title><rect x="731.1" y="85" width="16.4" height="15.0" fill="rgb(212,142,38)" rx="2" ry="2" />
<text  x="734.11" y="95.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (2 samples, 2.78%)</title><rect x="1157.2" y="389" width="32.8" height="15.0" fill="rgb(218,178,42)" rx="2" ry="2" />
<text  x="1160.22" y="399.5" >st..</text>
</g>
<g >
<title>_IO_new_fclose(fp=0x7fbc88000bd0) (1 samples, 1.39%)</title><rect x="124.7" y="373" width="16.4" height="15.0" fill="rgb(252,11,0)" rx="2" ry="2" />
<text  x="127.72" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="698.3" y="309" width="32.8" height="15.0" fill="rgb(229,47,45)" rx="2" ry="2" />
<text  x="701.33" y="319.5" >st..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="600.0" y="229" width="32.8" height="15.0" fill="rgb(244,8,19)" rx="2" ry="2" />
<text  x="603.00" y="239.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="534.4" y="133" width="16.4" height="15.0" fill="rgb(221,228,40)" rx="2" ry="2" />
<text  x="537.44" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 2.78%)</title><rect x="763.9" y="181" width="32.8" height="15.0" fill="rgb(210,2,43)" rx="2" ry="2" />
<text  x="766.89" y="191.5" >st..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="714.7" y="117" width="16.4" height="15.0" fill="rgb(244,188,16)" rx="2" ry="2" />
<text  x="717.72" y="127.5" ></text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc8c000bd0, (1 samples, 1.39%)</title><rect x="452.5" y="341" width="16.4" height="15.0" fill="rgb(250,76,0)" rx="2" ry="2" />
<text  x="455.50" y="351.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="600.0" y="277" width="32.8" height="15.0" fill="rgb(253,41,23)" rx="2" ry="2" />
<text  x="603.00" y="287.5" >st..</text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc84000bd0) (2 samples, 2.78%)</title><rect x="386.9" y="309" width="32.8" height="15.0" fill="rgb(235,124,37)" rx="2" ry="2" />
<text  x="389.94" y="319.5" >__..</text>
</g>
<g >
<title>__spawnix(pid=pid@entry=0x7fbc80000cb0, (1 samples, 1.39%)</title><rect x="108.3" y="293" width="16.4" height="15.0" fill="rgb(228,214,9)" rx="2" ry="2" />
<text  x="111.33" y="303.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 1.39%)</title><rect x="1140.8" y="277" width="16.4" height="15.0" fill="rgb(217,75,31)" rx="2" ry="2" />
<text  x="1143.83" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="763.9" y="229" width="32.8" height="15.0" fill="rgb(230,74,46)" rx="2" ry="2" />
<text  x="766.89" y="239.5" >st..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="698.3" y="341" width="32.8" height="15.0" fill="rgb(232,195,48)" rx="2" ry="2" />
<text  x="701.33" y="351.5" >st..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="567.2" y="325" width="32.8" height="15.0" fill="rgb(253,222,7)" rx="2" ry="2" />
<text  x="570.22" y="335.5" >st..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId (17 samples, 23.61%)</title><rect x="255.8" y="389" width="278.6" height="15.0" fill="rgb(243,51,52)" rx="2" ry="2" />
<text  x="258.83" y="399.5" >Sha256IdGenerator::generateId</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="698.3" y="277" width="32.8" height="15.0" fill="rgb(211,162,47)" rx="2" ry="2" />
<text  x="701.33" y="287.5" >st..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="731.1" y="325" width="32.8" height="15.0" fill="rgb(207,187,47)" rx="2" ry="2" />
<text  x="734.11" y="335.5" >st..</text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc84000b60 (1 samples, 1.39%)</title><rect x="157.5" y="373" width="16.4" height="15.0" fill="rgb(213,150,0)" rx="2" ry="2" />
<text  x="160.50" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="583.6" y="133" width="16.4" height="15.0" fill="rgb(252,6,49)" rx="2" ry="2" />
<text  x="586.61" y="143.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="124.7" y="325" width="16.4" height="15.0" fill="rgb(236,10,25)" rx="2" ry="2" />
<text  x="127.72" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 2.78%)</title><rect x="567.2" y="181" width="32.8" height="15.0" fill="rgb(214,221,52)" rx="2" ry="2" />
<text  x="570.22" y="191.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 1.39%)</title><rect x="1140.8" y="501" width="16.4" height="15.0" fill="rgb(250,50,3)" rx="2" ry="2" />
<text  x="1143.83" y="511.5" ></text>
</g>
<g >
<title>_IO_new_proc_close(fp=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="10.0" y="341" width="16.4" height="15.0" fill="rgb(222,13,11)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (2 samples, 2.78%)</title><rect x="1157.2" y="373" width="32.8" height="15.0" fill="rgb(229,21,19)" rx="2" ry="2" />
<text  x="1160.22" y="383.5" >Mu..</text>
</g>
<g >
<title>std::call_once&lt;void (1 samples, 1.39%)</title><rect x="1108.1" y="405" width="16.3" height="15.0" fill="rgb(253,198,8)" rx="2" ry="2" />
<text  x="1111.06" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="698.3" y="293" width="32.8" height="15.0" fill="rgb(251,81,11)" rx="2" ry="2" />
<text  x="701.33" y="303.5" >st..</text>
</g>
<g >
<title>std::thread::join()() (4 samples, 5.56%)</title><rect x="1026.1" y="469" width="65.6" height="15.0" fill="rgb(245,7,13)" rx="2" ry="2" />
<text  x="1029.11" y="479.5" >std::th..</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async (1 samples, 1.39%)</title><rect x="1108.1" y="437" width="16.3" height="15.0" fill="rgb(249,43,41)" rx="2" ry="2" />
<text  x="1111.06" y="447.5" ></text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc7c000bd0, (2 samples, 2.78%)</title><rect x="305.0" y="341" width="32.8" height="15.0" fill="rgb(227,178,34)" rx="2" ry="2" />
<text  x="308.00" y="351.5" >__..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="665.6" y="277" width="32.7" height="15.0" fill="rgb(220,151,41)" rx="2" ry="2" />
<text  x="668.56" y="287.5" >st..</text>
</g>
<g >
<title>main(argc=&lt;optimized (24 samples, 33.33%)</title><rect x="796.7" y="549" width="393.3" height="15.0" fill="rgb(224,14,26)" rx="2" ry="2" />
<text  x="799.67" y="559.5" >main(argc=&lt;optimized</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="632.8" y="261" width="32.8" height="15.0" fill="rgb(223,182,48)" rx="2" ry="2" />
<text  x="635.78" y="271.5" >st..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="616.4" y="149" width="16.4" height="15.0" fill="rgb(252,49,27)" rx="2" ry="2" />
<text  x="619.39" y="159.5" ></text>
</g>
<g >
<title>fgets(__stream=0x7fbc7c000bd0, (2 samples, 2.78%)</title><rect x="305.0" y="373" width="32.8" height="15.0" fill="rgb(231,108,11)" rx="2" ry="2" />
<text  x="308.00" y="383.5" >fg..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="731.1" y="229" width="32.8" height="15.0" fill="rgb(251,104,23)" rx="2" ry="2" />
<text  x="734.11" y="239.5" >st..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="714.7" y="149" width="16.4" height="15.0" fill="rgb(223,10,35)" rx="2" ry="2" />
<text  x="717.72" y="159.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="550.8" y="133" width="16.4" height="15.0" fill="rgb(240,208,53)" rx="2" ry="2" />
<text  x="553.83" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="665.6" y="165" width="16.3" height="15.0" fill="rgb(246,167,33)" rx="2" ry="2" />
<text  x="668.56" y="175.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 22.22%)</title><rect x="534.4" y="501" width="262.3" height="15.0" fill="rgb(241,50,8)" rx="2" ry="2" />
<text  x="537.44" y="511.5" >std::thread::_State_impl&lt;std::threa..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="534.4" y="245" width="32.8" height="15.0" fill="rgb(253,46,25)" rx="2" ry="2" />
<text  x="537.44" y="255.5" >st..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 1.39%)</title><rect x="731.1" y="53" width="16.4" height="15.0" fill="rgb(208,171,8)" rx="2" ry="2" />
<text  x="734.11" y="63.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc88000bd0) (2 samples, 2.78%)</title><rect x="419.7" y="309" width="32.8" height="15.0" fill="rgb(207,198,24)" rx="2" ry="2" />
<text  x="422.72" y="319.5" >__..</text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc94000bd0) (2 samples, 2.78%)</title><rect x="501.7" y="309" width="32.7" height="15.0" fill="rgb(242,96,2)" rx="2" ry="2" />
<text  x="504.67" y="319.5" >__..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="632.8" y="213" width="32.8" height="15.0" fill="rgb(207,73,51)" rx="2" ry="2" />
<text  x="635.78" y="223.5" >Mu..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 1.39%)</title><rect x="698.3" y="117" width="16.4" height="15.0" fill="rgb(226,171,0)" rx="2" ry="2" />
<text  x="701.33" y="127.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc7c000bd0) (2 samples, 2.78%)</title><rect x="305.0" y="309" width="32.8" height="15.0" fill="rgb(239,21,53)" rx="2" ry="2" />
<text  x="308.00" y="319.5" >__..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.39%)</title><rect x="1140.8" y="437" width="16.4" height="15.0" fill="rgb(205,62,37)" rx="2" ry="2" />
<text  x="1143.83" y="447.5" ></text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc74000b60 (1 samples, 1.39%)</title><rect x="75.6" y="373" width="16.3" height="15.0" fill="rgb(218,181,17)" rx="2" ry="2" />
<text  x="78.56" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.78%)</title><rect x="632.8" y="197" width="32.8" height="15.0" fill="rgb(221,132,50)" rx="2" ry="2" />
<text  x="635.78" y="207.5" >st..</text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc84000bd0, (2 samples, 2.78%)</title><rect x="386.9" y="341" width="32.8" height="15.0" fill="rgb(208,163,37)" rx="2" ry="2" />
<text  x="389.94" y="351.5" >__..</text>
</g>
<g >
<title>std::basic_istream&lt;char,std::char_traits&lt;char&gt; (13 samples, 18.06%)</title><rect x="813.1" y="501" width="213.0" height="15.0" fill="rgb(236,23,28)" rx="2" ry="2" />
<text  x="816.06" y="511.5" >std::basic_istream&lt;char,std:..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="600.0" y="213" width="32.8" height="15.0" fill="rgb(209,166,33)" rx="2" ry="2" />
<text  x="603.00" y="223.5" >Mu..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="600.0" y="293" width="32.8" height="15.0" fill="rgb(242,144,0)" rx="2" ry="2" />
<text  x="603.00" y="303.5" >st..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="731.1" y="293" width="32.8" height="15.0" fill="rgb(247,144,26)" rx="2" ry="2" />
<text  x="734.11" y="303.5" >st..</text>
</g>
<g >
<title>__spawni(pid=pid@entry=0x7fbc74000cb0, (1 samples, 1.39%)</title><rect x="75.6" y="309" width="16.3" height="15.0" fill="rgb(245,204,5)" rx="2" ry="2" />
<text  x="78.56" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="731.1" y="165" width="16.4" height="15.0" fill="rgb(207,147,43)" rx="2" ry="2" />
<text  x="734.11" y="175.5" ></text>
</g>
<g >
<title>fgets(__stream=0x7fbc94000bd0, (2 samples, 2.78%)</title><rect x="501.7" y="373" width="32.7" height="15.0" fill="rgb(221,26,26)" rx="2" ry="2" />
<text  x="504.67" y="383.5" >fg..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="1140.8" y="485" width="16.4" height="15.0" fill="rgb(247,8,26)" rx="2" ry="2" />
<text  x="1143.83" y="495.5" ></text>
</g>
<g >
<title>fgets(__stream=0x7fbc80000bd0, (3 samples, 4.17%)</title><rect x="337.8" y="373" width="49.1" height="15.0" fill="rgb(219,183,16)" rx="2" ry="2" />
<text  x="340.78" y="383.5" >fget..</text>
</g>
<g >
<title>_IO_new_proc_close(fp=0x7fbc88000bd0) (1 samples, 1.39%)</title><rect x="124.7" y="341" width="16.4" height="15.0" fill="rgb(218,71,16)" rx="2" ry="2" />
<text  x="127.72" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.78%)</title><rect x="534.4" y="197" width="32.8" height="15.0" fill="rgb(221,94,35)" rx="2" ry="2" />
<text  x="537.44" y="207.5" >st..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Clueless (1 samples, 1.39%)</title><rect x="42.8" y="389" width="16.4" height="15.0" fill="rgb(253,119,12)" rx="2" ry="2" />
<text  x="45.78" y="399.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Dirty (1 samples, 1.39%)</title><rect x="59.2" y="389" width="16.4" height="15.0" fill="rgb(239,123,36)" rx="2" ry="2" />
<text  x="62.17" y="399.5" ></text>
</g>
<g >
<title>fgets(__stream=0x7fbc8c000bd0, (1 samples, 1.39%)</title><rect x="452.5" y="373" width="16.4" height="15.0" fill="rgb(242,194,23)" rx="2" ry="2" />
<text  x="455.50" y="383.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::generatePageIds(MultiThreadedPageRankComputer::Pool&amp;, (32 samples, 44.44%)</title><rect x="10.0" y="485" width="524.4" height="15.0" fill="rgb(242,51,38)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::generate..</text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 1.39%)</title><rect x="1140.8" y="389" width="16.4" height="15.0" fill="rgb(238,198,48)" rx="2" ry="2" />
<text  x="1143.83" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 2.78%)</title><rect x="632.8" y="181" width="32.8" height="15.0" fill="rgb(210,119,47)" rx="2" ry="2" />
<text  x="635.78" y="191.5" >st..</text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="305.0" y="261" width="32.8" height="15.0" fill="rgb(235,49,50)" rx="2" ry="2" />
<text  x="308.00" y="271.5" >__..</text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc7c000bd0, (2 samples, 2.78%)</title><rect x="305.0" y="325" width="32.8" height="15.0" fill="rgb(235,214,31)" rx="2" ry="2" />
<text  x="308.00" y="335.5" >__..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="763.9" y="213" width="32.8" height="15.0" fill="rgb(242,55,25)" rx="2" ry="2" />
<text  x="766.89" y="223.5" >Mu..</text>
</g>
<g >
<title>PageId::operator== (1 samples, 1.39%)</title><rect x="567.2" y="85" width="16.4" height="15.0" fill="rgb(251,77,51)" rx="2" ry="2" />
<text  x="570.22" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 1.39%)</title><rect x="796.7" y="469" width="16.4" height="15.0" fill="rgb(253,191,1)" rx="2" ry="2" />
<text  x="799.67" y="479.5" ></text>
</g>
<g >
<title>fgets(__stream=0x7fbc74000bd0, (3 samples, 4.17%)</title><rect x="255.8" y="373" width="49.2" height="15.0" fill="rgb(253,66,30)" rx="2" ry="2" />
<text  x="258.83" y="383.5" >fget..</text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc7c000bd0) (2 samples, 2.78%)</title><rect x="305.0" y="293" width="32.8" height="15.0" fill="rgb(252,196,19)" rx="2" ry="2" />
<text  x="308.00" y="303.5" >_I..</text>
</g>
<g >
<title>__GI___libc_read (1 samples, 1.39%)</title><rect x="452.5" y="261" width="16.4" height="15.0" fill="rgb(216,92,7)" rx="2" ry="2" />
<text  x="455.50" y="271.5" ></text>
</g>
<g >
<title>std::future&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="1108.1" y="485" width="32.7" height="15.0" fill="rgb(252,229,48)" rx="2" ry="2" />
<text  x="1111.06" y="495.5" >st..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="567.2" y="229" width="32.8" height="15.0" fill="rgb(215,187,6)" rx="2" ry="2" />
<text  x="570.22" y="239.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="1140.8" y="357" width="16.4" height="15.0" fill="rgb(250,225,22)" rx="2" ry="2" />
<text  x="1143.83" y="367.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;New (4 samples, 5.56%)</title><rect x="124.7" y="389" width="65.6" height="15.0" fill="rgb(245,35,46)" rx="2" ry="2" />
<text  x="127.72" y="399.5" >Sha256I..</text>
</g>
<g >
<title>Page::addLink (1 samples, 1.39%)</title><rect x="796.7" y="517" width="16.4" height="15.0" fill="rgb(207,116,44)" rx="2" ry="2" />
<text  x="799.67" y="527.5" ></text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc94000b60 (1 samples, 1.39%)</title><rect x="239.4" y="373" width="16.4" height="15.0" fill="rgb(221,100,37)" rx="2" ry="2" />
<text  x="242.44" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="1157.2" y="229" width="16.4" height="15.0" fill="rgb(209,192,12)" rx="2" ry="2" />
<text  x="1160.22" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc(bytes=32768) (1 samples, 1.39%)</title><rect x="796.7" y="405" width="16.4" height="15.0" fill="rgb(218,185,14)" rx="2" ry="2" />
<text  x="799.67" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator()(this=0x7ffde233fbf0, (1 samples, 1.39%)</title><rect x="763.9" y="133" width="16.4" height="15.0" fill="rgb(209,145,17)" rx="2" ry="2" />
<text  x="766.89" y="143.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="763.9" y="341" width="32.8" height="15.0" fill="rgb(208,75,4)" rx="2" ry="2" />
<text  x="766.89" y="351.5" >st..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="665.6" y="325" width="32.7" height="15.0" fill="rgb(249,198,18)" rx="2" ry="2" />
<text  x="668.56" y="335.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="1140.8" y="325" width="16.4" height="15.0" fill="rgb(226,156,26)" rx="2" ry="2" />
<text  x="1143.83" y="335.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="731.1" y="261" width="32.8" height="15.0" fill="rgb(214,82,5)" rx="2" ry="2" />
<text  x="734.11" y="271.5" >st..</text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc9a9f8e20 (2 samples, 2.78%)</title><rect x="305.0" y="357" width="32.8" height="15.0" fill="rgb(228,89,37)" rx="2" ry="2" />
<text  x="308.00" y="367.5" >_I..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="665.6" y="213" width="32.7" height="15.0" fill="rgb(242,126,1)" rx="2" ry="2" />
<text  x="668.56" y="223.5" >Mu..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="763.9" y="309" width="32.8" height="15.0" fill="rgb(236,172,16)" rx="2" ry="2" />
<text  x="766.89" y="319.5" >st..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="1091.7" y="421" width="16.4" height="15.0" fill="rgb(206,124,0)" rx="2" ry="2" />
<text  x="1094.67" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="763.9" y="149" width="16.4" height="15.0" fill="rgb(208,100,43)" rx="2" ry="2" />
<text  x="766.89" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId,std::allocator&lt;PageId&gt; (1 samples, 1.39%)</title><rect x="796.7" y="501" width="16.4" height="15.0" fill="rgb(208,122,46)" rx="2" ry="2" />
<text  x="799.67" y="511.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="26.4" y="325" width="16.4" height="15.0" fill="rgb(220,105,35)" rx="2" ry="2" />
<text  x="29.39" y="335.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc80000bd0) (3 samples, 4.17%)</title><rect x="337.8" y="293" width="49.1" height="15.0" fill="rgb(227,28,22)" rx="2" ry="2" />
<text  x="340.78" y="303.5" >_IO_..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="534.4" y="261" width="32.8" height="15.0" fill="rgb(252,59,34)" rx="2" ry="2" />
<text  x="537.44" y="271.5" >st..</text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="190.3" y="325" width="16.4" height="15.0" fill="rgb(233,188,41)" rx="2" ry="2" />
<text  x="193.28" y="335.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="763.9" y="293" width="32.8" height="15.0" fill="rgb(234,186,1)" rx="2" ry="2" />
<text  x="766.89" y="303.5" >st..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="731.1" y="277" width="32.8" height="15.0" fill="rgb(227,122,18)" rx="2" ry="2" />
<text  x="734.11" y="287.5" >st..</text>
</g>
<g >
<title>spawn_process(child_pipe_fd=1, (1 samples, 1.39%)</title><rect x="91.9" y="341" width="16.4" height="15.0" fill="rgb(212,179,5)" rx="2" ry="2" />
<text  x="94.94" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="534.4" y="325" width="32.8" height="15.0" fill="rgb(239,104,21)" rx="2" ry="2" />
<text  x="537.44" y="335.5" >st..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="567.2" y="245" width="32.8" height="15.0" fill="rgb(239,14,2)" rx="2" ry="2" />
<text  x="570.22" y="255.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="714.7" y="165" width="16.4" height="15.0" fill="rgb(223,145,50)" rx="2" ry="2" />
<text  x="717.72" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_read (1 samples, 1.39%)</title><rect x="452.5" y="277" width="16.4" height="15.0" fill="rgb(230,66,34)" rx="2" ry="2" />
<text  x="455.50" y="287.5" ></text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc90000b60 (1 samples, 1.39%)</title><rect x="173.9" y="373" width="16.4" height="15.0" fill="rgb(247,90,16)" rx="2" ry="2" />
<text  x="176.89" y="383.5" ></text>
</g>
<g >
<title>_IO_new_fclose(fp=0x7fbc7c000bd0) (1 samples, 1.39%)</title><rect x="26.4" y="373" width="16.4" height="15.0" fill="rgb(240,76,22)" rx="2" ry="2" />
<text  x="29.39" y="383.5" ></text>
</g>
<g >
<title>__spawnix(pid=pid@entry=0x7fbc94000cb0, (1 samples, 1.39%)</title><rect x="239.4" y="293" width="16.4" height="15.0" fill="rgb(211,137,24)" rx="2" ry="2" />
<text  x="242.44" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 1.39%)</title><rect x="567.2" y="69" width="16.4" height="15.0" fill="rgb(206,59,3)" rx="2" ry="2" />
<text  x="570.22" y="79.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 2.78%)</title><rect x="632.8" y="133" width="32.8" height="15.0" fill="rgb(205,184,9)" rx="2" ry="2" />
<text  x="635.78" y="143.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="534.4" y="149" width="16.4" height="15.0" fill="rgb(209,171,50)" rx="2" ry="2" />
<text  x="537.44" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 1.39%)</title><rect x="796.7" y="389" width="16.4" height="15.0" fill="rgb(248,124,37)" rx="2" ry="2" />
<text  x="799.67" y="399.5" ></text>
</g>
<g >
<title>std::thread::join()() (1 samples, 1.39%)</title><rect x="1108.1" y="357" width="16.3" height="15.0" fill="rgb(248,199,45)" rx="2" ry="2" />
<text  x="1111.06" y="367.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 1.39%)</title><rect x="1173.6" y="261" width="16.4" height="15.0" fill="rgb(218,166,19)" rx="2" ry="2" />
<text  x="1176.61" y="271.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="59.2" y="325" width="16.4" height="15.0" fill="rgb(241,68,7)" rx="2" ry="2" />
<text  x="62.17" y="335.5" ></text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc90000b60 (1 samples, 1.39%)</title><rect x="206.7" y="373" width="16.4" height="15.0" fill="rgb(232,153,42)" rx="2" ry="2" />
<text  x="209.67" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="305.0" y="277" width="32.8" height="15.0" fill="rgb(216,200,7)" rx="2" ry="2" />
<text  x="308.00" y="287.5" >__..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::initEdges (1 samples, 1.39%)</title><rect x="1091.7" y="501" width="16.4" height="15.0" fill="rgb(211,180,33)" rx="2" ry="2" />
<text  x="1094.67" y="511.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="763.9" y="261" width="32.8" height="15.0" fill="rgb(233,50,31)" rx="2" ry="2" />
<text  x="766.89" y="271.5" >st..</text>
</g>
<g >
<title>spawn_process(child_pipe_fd=1, (1 samples, 1.39%)</title><rect x="108.3" y="341" width="16.4" height="15.0" fill="rgb(233,90,43)" rx="2" ry="2" />
<text  x="111.33" y="351.5" ></text>
</g>
<g >
<title>_IO_new_proc_open(fp=fp@entry=0x7fbc90000bd0, (1 samples, 1.39%)</title><rect x="173.9" y="357" width="16.4" height="15.0" fill="rgb(210,53,47)" rx="2" ry="2" />
<text  x="176.89" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async (1 samples, 1.39%)</title><rect x="1124.4" y="437" width="16.4" height="15.0" fill="rgb(221,72,22)" rx="2" ry="2" />
<text  x="1127.44" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (2 samples, 2.78%)</title><rect x="632.8" y="101" width="32.8" height="15.0" fill="rgb(217,161,44)" rx="2" ry="2" />
<text  x="635.78" y="111.5" >st..</text>
</g>
<g >
<title>std::call_once&lt;void (16 samples, 22.22%)</title><rect x="534.4" y="389" width="262.3" height="15.0" fill="rgb(243,23,54)" rx="2" ry="2" />
<text  x="537.44" y="399.5" >std::call_once&lt;void</text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 2.78%)</title><rect x="1157.2" y="357" width="32.8" height="15.0" fill="rgb(205,207,50)" rx="2" ry="2" />
<text  x="1160.22" y="367.5" >st..</text>
</g>
<g >
<title>clone (1 samples, 1.39%)</title><rect x="75.6" y="277" width="16.3" height="15.0" fill="rgb(233,189,11)" rx="2" ry="2" />
<text  x="78.56" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="665.6" y="149" width="16.3" height="15.0" fill="rgb(247,40,36)" rx="2" ry="2" />
<text  x="668.56" y="159.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="747.5" y="117" width="16.4" height="15.0" fill="rgb(252,49,40)" rx="2" ry="2" />
<text  x="750.50" y="127.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc88000bd0) (2 samples, 2.78%)</title><rect x="419.7" y="293" width="32.8" height="15.0" fill="rgb(212,10,6)" rx="2" ry="2" />
<text  x="422.72" y="303.5" >_I..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 1.39%)</title><rect x="731.1" y="69" width="16.4" height="15.0" fill="rgb(234,68,11)" rx="2" ry="2" />
<text  x="734.11" y="79.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="747.5" y="149" width="16.4" height="15.0" fill="rgb(229,198,37)" rx="2" ry="2" />
<text  x="750.50" y="159.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="780.3" y="133" width="16.4" height="15.0" fill="rgb(221,169,0)" rx="2" ry="2" />
<text  x="783.28" y="143.5" ></text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (16 samples, 22.22%)</title><rect x="534.4" y="373" width="262.3" height="15.0" fill="rgb(247,212,28)" rx="2" ry="2" />
<text  x="537.44" y="383.5" >__gthread_once(__func=&lt;optimized</text>
</g>
<g >
<title>_IO_ungetc(c=48, (1 samples, 1.39%)</title><rect x="878.6" y="485" width="16.4" height="15.0" fill="rgb(234,73,3)" rx="2" ry="2" />
<text  x="881.61" y="495.5" ></text>
</g>
<g >
<title>_IO_new_proc_close(fp=0x7fbc84000bd0) (1 samples, 1.39%)</title><rect x="59.2" y="341" width="16.4" height="15.0" fill="rgb(212,96,26)" rx="2" ry="2" />
<text  x="62.17" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="698.3" y="229" width="32.8" height="15.0" fill="rgb(229,64,2)" rx="2" ry="2" />
<text  x="701.33" y="239.5" >st..</text>
</g>
<g >
<title>std::getline&lt;char,std::char_traits&lt;char&gt;, (13 samples, 18.06%)</title><rect x="813.1" y="517" width="213.0" height="15.0" fill="rgb(254,114,47)" rx="2" ry="2" />
<text  x="816.06" y="527.5" >std::getline&lt;char,std::char_..</text>
</g>
<g >
<title>clone (1 samples, 1.39%)</title><rect x="108.3" y="277" width="16.4" height="15.0" fill="rgb(226,136,42)" rx="2" ry="2" />
<text  x="111.33" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 1.39%)</title><rect x="616.4" y="197" width="16.4" height="15.0" fill="rgb(227,104,23)" rx="2" ry="2" />
<text  x="619.39" y="207.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c7278, (2 samples, 2.78%)</title><rect x="534.4" y="357" width="32.8" height="15.0" fill="rgb(209,105,13)" rx="2" ry="2" />
<text  x="537.44" y="367.5" >__..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.78%)</title><rect x="763.9" y="197" width="32.8" height="15.0" fill="rgb(231,215,53)" rx="2" ry="2" />
<text  x="766.89" y="207.5" >st..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="731.1" y="341" width="32.8" height="15.0" fill="rgb(232,108,41)" rx="2" ry="2" />
<text  x="734.11" y="351.5" >st..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="583.6" y="101" width="16.4" height="15.0" fill="rgb(251,94,1)" rx="2" ry="2" />
<text  x="586.61" y="111.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc90000bd0) (2 samples, 2.78%)</title><rect x="468.9" y="309" width="32.8" height="15.0" fill="rgb(208,30,32)" rx="2" ry="2" />
<text  x="471.89" y="319.5" >__..</text>
</g>
<g >
<title>_IO_new_proc_close(fp=0x7fbc7c000bd0) (1 samples, 1.39%)</title><rect x="26.4" y="341" width="16.4" height="15.0" fill="rgb(233,210,33)" rx="2" ry="2" />
<text  x="29.39" y="351.5" ></text>
</g>
<g >
<title>_IO_ungetc(c=53, (1 samples, 1.39%)</title><rect x="895.0" y="485" width="16.4" height="15.0" fill="rgb(225,46,13)" rx="2" ry="2" />
<text  x="898.00" y="495.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc80000bd0, (3 samples, 4.17%)</title><rect x="337.8" y="325" width="49.1" height="15.0" fill="rgb(249,137,2)" rx="2" ry="2" />
<text  x="340.78" y="335.5" >__GI..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::allocate(this=&lt;optimized (1 samples, 1.39%)</title><rect x="796.7" y="437" width="16.4" height="15.0" fill="rgb(236,18,54)" rx="2" ry="2" />
<text  x="799.67" y="447.5" ></text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc9b9fae20 (2 samples, 2.78%)</title><rect x="419.7" y="357" width="32.8" height="15.0" fill="rgb(213,201,53)" rx="2" ry="2" />
<text  x="422.72" y="367.5" >_I..</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join (1 samples, 1.39%)</title><rect x="1124.4" y="421" width="16.4" height="15.0" fill="rgb(221,6,25)" rx="2" ry="2" />
<text  x="1127.44" y="431.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc80000bd0) (3 samples, 4.17%)</title><rect x="337.8" y="309" width="49.1" height="15.0" fill="rgb(253,55,46)" rx="2" ry="2" />
<text  x="340.78" y="319.5" >__GI..</text>
</g>
<g >
<title>std::__basic_future&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="1108.1" y="469" width="32.7" height="15.0" fill="rgb(216,5,32)" rx="2" ry="2" />
<text  x="1111.06" y="479.5" >st..</text>
</g>
<g >
<title>__spawni(pid=pid@entry=0x7fbc80000cb0, (1 samples, 1.39%)</title><rect x="108.3" y="309" width="16.4" height="15.0" fill="rgb(229,160,7)" rx="2" ry="2" />
<text  x="111.33" y="319.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c7548, (2 samples, 2.78%)</title><rect x="665.6" y="357" width="32.7" height="15.0" fill="rgb(232,219,53)" rx="2" ry="2" />
<text  x="668.56" y="367.5" >__..</text>
</g>
<g >
<title>__spawnix(pid=pid@entry=0x7fbc7c000cb0, (1 samples, 1.39%)</title><rect x="91.9" y="293" width="16.4" height="15.0" fill="rgb(208,151,52)" rx="2" ry="2" />
<text  x="94.94" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="1157.2" y="245" width="16.4" height="15.0" fill="rgb(211,61,52)" rx="2" ry="2" />
<text  x="1160.22" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="1091.7" y="389" width="16.4" height="15.0" fill="rgb(229,194,49)" rx="2" ry="2" />
<text  x="1094.67" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.39%)</title><rect x="1140.8" y="405" width="16.4" height="15.0" fill="rgb(215,201,38)" rx="2" ry="2" />
<text  x="1143.83" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="567.2" y="341" width="32.8" height="15.0" fill="rgb(251,203,40)" rx="2" ry="2" />
<text  x="570.22" y="351.5" >st..</text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc84000bd0, (2 samples, 2.78%)</title><rect x="386.9" y="325" width="32.8" height="15.0" fill="rgb(208,42,52)" rx="2" ry="2" />
<text  x="389.94" y="335.5" >__..</text>
</g>
<g >
<title>std::operator==&lt;char&gt;(__rhs=&quot;b3b2e6cc5f4b5388ccd0052136657ce43585c48e4b3999b2387383257a30b16a&quot;, (1 samples, 1.39%)</title><rect x="665.6" y="69" width="16.3" height="15.0" fill="rgb(243,18,12)" rx="2" ry="2" />
<text  x="668.56" y="79.5" ></text>
</g>
<g >
<title>_IO_getc(fp=0x7fbc9d56f980 (3 samples, 4.17%)</title><rect x="976.9" y="469" width="49.2" height="15.0" fill="rgb(211,132,47)" rx="2" ry="2" />
<text  x="979.94" y="479.5" >_IO_..</text>
</g>
<g >
<title>__GI___libc_read (3 samples, 4.17%)</title><rect x="337.8" y="261" width="49.1" height="15.0" fill="rgb(235,185,26)" rx="2" ry="2" />
<text  x="340.78" y="271.5" >__GI..</text>
</g>
<g >
<title>__spawnix(pid=pid@entry=0x7fbc74000cb0, (1 samples, 1.39%)</title><rect x="75.6" y="293" width="16.3" height="15.0" fill="rgb(246,114,6)" rx="2" ry="2" />
<text  x="78.56" y="303.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (1 samples, 1.39%)</title><rect x="1124.4" y="405" width="16.4" height="15.0" fill="rgb(228,225,43)" rx="2" ry="2" />
<text  x="1127.44" y="415.5" ></text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc90000bd0, (2 samples, 2.78%)</title><rect x="468.9" y="341" width="32.8" height="15.0" fill="rgb(253,198,36)" rx="2" ry="2" />
<text  x="471.89" y="351.5" >__..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.39%)</title><rect x="567.2" y="133" width="16.4" height="15.0" fill="rgb(215,160,33)" rx="2" ry="2" />
<text  x="570.22" y="143.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c78f8, (1 samples, 1.39%)</title><rect x="1124.4" y="373" width="16.4" height="15.0" fill="rgb(238,221,22)" rx="2" ry="2" />
<text  x="1127.44" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="632.8" y="325" width="32.8" height="15.0" fill="rgb(214,152,0)" rx="2" ry="2" />
<text  x="635.78" y="335.5" >st..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Odd (2 samples, 2.78%)</title><rect x="190.3" y="389" width="32.8" height="15.0" fill="rgb(244,180,22)" rx="2" ry="2" />
<text  x="193.28" y="399.5" >Sh..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.39%)</title><rect x="1140.8" y="453" width="16.4" height="15.0" fill="rgb(222,170,40)" rx="2" ry="2" />
<text  x="1143.83" y="463.5" ></text>
</g>
<g >
<title>_IO_new_proc_open(fp=fp@entry=0x7fbc84000bd0, (1 samples, 1.39%)</title><rect x="157.5" y="357" width="16.4" height="15.0" fill="rgb(226,208,51)" rx="2" ry="2" />
<text  x="160.50" y="367.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc8c000bd0, (1 samples, 1.39%)</title><rect x="452.5" y="325" width="16.4" height="15.0" fill="rgb(226,63,10)" rx="2" ry="2" />
<text  x="455.50" y="335.5" ></text>
</g>
<g >
<title>_IO_ungetc(c=&lt;optimized (1 samples, 1.39%)</title><rect x="944.2" y="485" width="16.4" height="15.0" fill="rgb(223,143,16)" rx="2" ry="2" />
<text  x="947.17" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="780.3" y="101" width="16.4" height="15.0" fill="rgb(213,229,16)" rx="2" ry="2" />
<text  x="783.28" y="111.5" ></text>
</g>
<g >
<title>_IO_new_file_close_it(fp=fp@entry=0x7fbc88000bd0) (1 samples, 1.39%)</title><rect x="124.7" y="357" width="16.4" height="15.0" fill="rgb(209,202,18)" rx="2" ry="2" />
<text  x="127.72" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="731.1" y="149" width="16.4" height="15.0" fill="rgb(237,160,4)" rx="2" ry="2" />
<text  x="734.11" y="159.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="698.3" y="261" width="32.8" height="15.0" fill="rgb(252,205,25)" rx="2" ry="2" />
<text  x="701.33" y="271.5" >st..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 1.39%)</title><rect x="1173.6" y="325" width="16.4" height="15.0" fill="rgb(210,67,4)" rx="2" ry="2" />
<text  x="1176.61" y="335.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="534.4" y="277" width="32.8" height="15.0" fill="rgb(210,164,21)" rx="2" ry="2" />
<text  x="537.44" y="287.5" >st..</text>
</g>
<g >
<title>_IO_new_proc_open(fp=fp@entry=0x7fbc94000bd0, (1 samples, 1.39%)</title><rect x="42.8" y="357" width="16.4" height="15.0" fill="rgb(238,149,34)" rx="2" ry="2" />
<text  x="45.78" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="534.4" y="165" width="16.4" height="15.0" fill="rgb(206,153,23)" rx="2" ry="2" />
<text  x="537.44" y="175.5" ></text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc9b1f9e20 (2 samples, 2.78%)</title><rect x="386.9" y="357" width="32.8" height="15.0" fill="rgb(225,129,3)" rx="2" ry="2" />
<text  x="389.94" y="367.5" >_I..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 1.39%)</title><rect x="1157.2" y="341" width="16.4" height="15.0" fill="rgb(238,225,17)" rx="2" ry="2" />
<text  x="1160.22" y="351.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::generatePageIds(MultiThreadedPageRankComputer::Pool&amp;, (32 samples, 44.44%)</title><rect x="10.0" y="501" width="524.4" height="15.0" fill="rgb(218,210,16)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedP..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="534.4" y="341" width="32.8" height="15.0" fill="rgb(212,94,1)" rx="2" ry="2" />
<text  x="537.44" y="351.5" >st..</text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="10.0" y="325" width="16.4" height="15.0" fill="rgb(238,200,48)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="780.3" y="165" width="16.4" height="15.0" fill="rgb(227,114,25)" rx="2" ry="2" />
<text  x="783.28" y="175.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 22.22%)</title><rect x="534.4" y="485" width="262.3" height="15.0" fill="rgb(241,137,35)" rx="2" ry="2" />
<text  x="537.44" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;st..</text>
</g>
<g >
<title>__pthread_clockjoin_ex (4 samples, 5.56%)</title><rect x="1026.1" y="453" width="65.6" height="15.0" fill="rgb(248,155,6)" rx="2" ry="2" />
<text  x="1029.11" y="463.5" >__pthre..</text>
</g>
<g >
<title>__GI___libc_read (3 samples, 4.17%)</title><rect x="255.8" y="277" width="49.2" height="15.0" fill="rgb(223,144,43)" rx="2" ry="2" />
<text  x="258.83" y="287.5" >__GI..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::Pool::join(this=0x7ffde233fbd0) (4 samples, 5.56%)</title><rect x="1026.1" y="485" width="65.6" height="15.0" fill="rgb(237,116,5)" rx="2" ry="2" />
<text  x="1029.11" y="495.5" >MultiTh..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.78%)</title><rect x="731.1" y="197" width="32.8" height="15.0" fill="rgb(238,62,43)" rx="2" ry="2" />
<text  x="734.11" y="207.5" >st..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="665.6" y="261" width="32.7" height="15.0" fill="rgb(237,35,18)" rx="2" ry="2" />
<text  x="668.56" y="271.5" >st..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 2.78%)</title><rect x="534.4" y="181" width="32.8" height="15.0" fill="rgb(211,228,29)" rx="2" ry="2" />
<text  x="537.44" y="191.5" >st..</text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="468.9" y="261" width="32.8" height="15.0" fill="rgb(206,19,52)" rx="2" ry="2" />
<text  x="471.89" y="271.5" >__..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="534.4" y="117" width="16.4" height="15.0" fill="rgb(251,220,32)" rx="2" ry="2" />
<text  x="537.44" y="127.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc90000bd0, (2 samples, 2.78%)</title><rect x="468.9" y="325" width="32.8" height="15.0" fill="rgb(232,151,1)" rx="2" ry="2" />
<text  x="471.89" y="335.5" >__..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="632.8" y="341" width="32.8" height="15.0" fill="rgb(247,6,31)" rx="2" ry="2" />
<text  x="635.78" y="351.5" >st..</text>
</g>
<g >
<title>_IO_new_fclose(fp=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="141.1" y="373" width="16.4" height="15.0" fill="rgb(236,2,27)" rx="2" ry="2" />
<text  x="144.11" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="419.7" y="261" width="32.8" height="15.0" fill="rgb(227,51,19)" rx="2" ry="2" />
<text  x="422.72" y="271.5" >__..</text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc88000bd0, (2 samples, 2.78%)</title><rect x="419.7" y="325" width="32.8" height="15.0" fill="rgb(225,118,1)" rx="2" ry="2" />
<text  x="422.72" y="335.5" >__..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c7718, (2 samples, 2.78%)</title><rect x="698.3" y="357" width="32.8" height="15.0" fill="rgb(232,78,23)" rx="2" ry="2" />
<text  x="701.33" y="367.5" >__..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="747.5" y="101" width="16.4" height="15.0" fill="rgb(214,27,38)" rx="2" ry="2" />
<text  x="750.50" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 2.78%)</title><rect x="665.6" y="181" width="32.7" height="15.0" fill="rgb(225,197,44)" rx="2" ry="2" />
<text  x="668.56" y="191.5" >st..</text>
</g>
<g >
<title>_IO_new_fclose(fp=0x7fbc88000bd0) (1 samples, 1.39%)</title><rect x="190.3" y="373" width="16.4" height="15.0" fill="rgb(246,63,5)" rx="2" ry="2" />
<text  x="193.28" y="383.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (1 samples, 1.39%)</title><rect x="1124.4" y="341" width="16.4" height="15.0" fill="rgb(210,166,0)" rx="2" ry="2" />
<text  x="1127.44" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 1.39%)</title><rect x="796.7" y="453" width="16.4" height="15.0" fill="rgb(224,42,48)" rx="2" ry="2" />
<text  x="799.67" y="463.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="567.2" y="213" width="32.8" height="15.0" fill="rgb(211,17,36)" rx="2" ry="2" />
<text  x="570.22" y="223.5" >Mu..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="665.6" y="293" width="32.7" height="15.0" fill="rgb(244,162,42)" rx="2" ry="2" />
<text  x="668.56" y="303.5" >st..</text>
</g>
<g >
<title>_IO_new_proc_open (1 samples, 1.39%)</title><rect x="75.6" y="357" width="16.3" height="15.0" fill="rgb(218,226,41)" rx="2" ry="2" />
<text  x="78.56" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="665.6" y="229" width="32.7" height="15.0" fill="rgb(206,130,14)" rx="2" ry="2" />
<text  x="668.56" y="239.5" >st..</text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (1 samples, 1.39%)</title><rect x="1124.4" y="389" width="16.4" height="15.0" fill="rgb(249,153,43)" rx="2" ry="2" />
<text  x="1127.44" y="399.5" ></text>
</g>
<g >
<title>_IO_new_proc_open(fp=fp@entry=0x7fbc90000bd0, (1 samples, 1.39%)</title><rect x="206.7" y="357" width="16.4" height="15.0" fill="rgb(253,198,14)" rx="2" ry="2" />
<text  x="209.67" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="616.4" y="165" width="16.4" height="15.0" fill="rgb(230,221,24)" rx="2" ry="2" />
<text  x="619.39" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.78%)</title><rect x="698.3" y="197" width="32.8" height="15.0" fill="rgb(254,172,35)" rx="2" ry="2" />
<text  x="701.33" y="207.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="1157.2" y="261" width="16.4" height="15.0" fill="rgb(234,172,7)" rx="2" ry="2" />
<text  x="1160.22" y="271.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c78e8, (2 samples, 2.78%)</title><rect x="731.1" y="357" width="32.8" height="15.0" fill="rgb(217,55,39)" rx="2" ry="2" />
<text  x="734.11" y="367.5" >__..</text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (14 samples, 19.44%)</title><rect x="796.7" y="533" width="229.4" height="15.0" fill="rgb(253,122,39)" rx="2" ry="2" />
<text  x="799.67" y="543.5" >StdinGenerator::generateNetwor..</text>
</g>
<g >
<title>__pthread_clockjoin_ex (1 samples, 1.39%)</title><rect x="1108.1" y="341" width="16.3" height="15.0" fill="rgb(253,76,23)" rx="2" ry="2" />
<text  x="1111.06" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="1091.7" y="453" width="16.4" height="15.0" fill="rgb(246,138,26)" rx="2" ry="2" />
<text  x="1094.67" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char,std::char_traits&lt;char&gt; (4 samples, 5.56%)</title><rect x="960.6" y="485" width="65.5" height="15.0" fill="rgb(250,59,46)" rx="2" ry="2" />
<text  x="963.56" y="495.5" >__gnu_c..</text>
</g>
<g >
<title>std::__invoke&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 22.22%)</title><rect x="534.4" y="453" width="262.3" height="15.0" fill="rgb(234,208,8)" rx="2" ry="2" />
<text  x="537.44" y="463.5" >std::__invoke&lt;std::__future_base::_..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="681.9" y="133" width="16.4" height="15.0" fill="rgb(254,83,34)" rx="2" ry="2" />
<text  x="684.94" y="143.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="698.3" y="245" width="32.8" height="15.0" fill="rgb(249,123,8)" rx="2" ry="2" />
<text  x="701.33" y="255.5" >st..</text>
</g>
<g >
<title>__GI___libc_read (3 samples, 4.17%)</title><rect x="337.8" y="277" width="49.1" height="15.0" fill="rgb(223,49,50)" rx="2" ry="2" />
<text  x="340.78" y="287.5" >__GI..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="550.8" y="101" width="16.4" height="15.0" fill="rgb(253,34,37)" rx="2" ry="2" />
<text  x="553.83" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (2 samples, 2.78%)</title><rect x="1157.2" y="501" width="32.8" height="15.0" fill="rgb(235,31,50)" rx="2" ry="2" />
<text  x="1160.22" y="511.5" >st..</text>
</g>
<g >
<title>Page::generateId (32 samples, 44.44%)</title><rect x="10.0" y="405" width="524.4" height="15.0" fill="rgb(208,188,41)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >Page::generateId</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="534.4" y="229" width="32.8" height="15.0" fill="rgb(205,9,0)" rx="2" ry="2" />
<text  x="537.44" y="239.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="698.3" y="165" width="16.4" height="15.0" fill="rgb(223,97,24)" rx="2" ry="2" />
<text  x="701.33" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 1.39%)</title><rect x="1140.8" y="309" width="16.4" height="15.0" fill="rgb(247,55,27)" rx="2" ry="2" />
<text  x="1143.83" y="319.5" ></text>
</g>
<g >
<title>_IO_new_proc_open (1 samples, 1.39%)</title><rect x="91.9" y="357" width="16.4" height="15.0" fill="rgb(241,177,17)" rx="2" ry="2" />
<text  x="94.94" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.78%)</title><rect x="665.6" y="197" width="32.7" height="15.0" fill="rgb(249,117,22)" rx="2" ry="2" />
<text  x="668.56" y="207.5" >st..</text>
</g>
<g >
<title>_IO_new_proc_open(fp=fp@entry=0x7fbc8c000bd0, (1 samples, 1.39%)</title><rect x="223.1" y="357" width="16.3" height="15.0" fill="rgb(216,92,26)" rx="2" ry="2" />
<text  x="226.06" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="419.7" y="277" width="32.8" height="15.0" fill="rgb(214,78,23)" rx="2" ry="2" />
<text  x="422.72" y="287.5" >__..</text>
</g>
<g >
<title>??() (48 samples, 66.67%)</title><rect x="10.0" y="517" width="786.7" height="15.0" fill="rgb(212,66,2)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >??()</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks (2 samples, 2.78%)</title><rect x="1108.1" y="501" width="32.7" height="15.0" fill="rgb(233,138,2)" rx="2" ry="2" />
<text  x="1111.06" y="511.5" >Mu..</text>
</g>
<g >
<title>fgets(__stream=0x7fbc88000bd0, (2 samples, 2.78%)</title><rect x="419.7" y="373" width="32.8" height="15.0" fill="rgb(221,79,41)" rx="2" ry="2" />
<text  x="422.72" y="383.5" >fg..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="681.9" y="165" width="16.4" height="15.0" fill="rgb(230,173,51)" rx="2" ry="2" />
<text  x="684.94" y="175.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="157.5" y="341" width="16.4" height="15.0" fill="rgb(205,3,10)" rx="2" ry="2" />
<text  x="160.50" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.78%)</title><rect x="1157.2" y="485" width="32.8" height="15.0" fill="rgb(209,145,19)" rx="2" ry="2" />
<text  x="1160.22" y="495.5" >st..</text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="468.9" y="277" width="32.8" height="15.0" fill="rgb(213,3,33)" rx="2" ry="2" />
<text  x="471.89" y="287.5" >__..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="632.8" y="309" width="32.8" height="15.0" fill="rgb(235,20,51)" rx="2" ry="2" />
<text  x="635.78" y="319.5" >st..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 1.39%)</title><rect x="567.2" y="117" width="16.4" height="15.0" fill="rgb(230,34,24)" rx="2" ry="2" />
<text  x="570.22" y="127.5" ></text>
</g>
<g >
<title>spawn_process(child_pipe_fd=1, (1 samples, 1.39%)</title><rect x="75.6" y="341" width="16.3" height="15.0" fill="rgb(225,10,32)" rx="2" ry="2" />
<text  x="78.56" y="351.5" ></text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc999f6e20 (3 samples, 4.17%)</title><rect x="255.8" y="357" width="49.2" height="15.0" fill="rgb(223,56,13)" rx="2" ry="2" />
<text  x="258.83" y="367.5" >_IO_..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="632.8" y="245" width="32.8" height="15.0" fill="rgb(242,85,26)" rx="2" ry="2" />
<text  x="635.78" y="255.5" >st..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="763.9" y="277" width="32.8" height="15.0" fill="rgb(205,226,33)" rx="2" ry="2" />
<text  x="766.89" y="287.5" >st..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Great (2 samples, 2.78%)</title><rect x="75.6" y="389" width="32.7" height="15.0" fill="rgb(236,139,28)" rx="2" ry="2" />
<text  x="78.56" y="399.5" >Sh..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Adorable (1 samples, 1.39%)</title><rect x="10.0" y="389" width="16.4" height="15.0" fill="rgb(209,142,52)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::generatePageIds(MultiThreadedPageRankComputer::Pool&amp;,Network (32 samples, 44.44%)</title><rect x="10.0" y="421" width="524.4" height="15.0" fill="rgb(238,83,50)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >MultiThreadedPageRankComputer::generatePageIds(MultiThreadedPageRankComp..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="1140.8" y="341" width="16.4" height="15.0" fill="rgb(235,38,1)" rx="2" ry="2" />
<text  x="1143.83" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_read (3 samples, 4.17%)</title><rect x="255.8" y="261" width="49.2" height="15.0" fill="rgb(246,17,32)" rx="2" ry="2" />
<text  x="258.83" y="271.5" >__GI..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.78%)</title><rect x="1157.2" y="453" width="32.8" height="15.0" fill="rgb(228,73,51)" rx="2" ry="2" />
<text  x="1160.22" y="463.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="1140.8" y="469" width="16.4" height="15.0" fill="rgb(214,172,35)" rx="2" ry="2" />
<text  x="1143.83" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.39%)</title><rect x="665.6" y="101" width="16.3" height="15.0" fill="rgb(210,178,4)" rx="2" ry="2" />
<text  x="668.56" y="111.5" ></text>
</g>
<g >
<title>spawn_process(child_pipe_fd=1, (1 samples, 1.39%)</title><rect x="239.4" y="341" width="16.4" height="15.0" fill="rgb(247,30,23)" rx="2" ry="2" />
<text  x="242.44" y="351.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 22.22%)</title><rect x="534.4" y="421" width="262.3" height="15.0" fill="rgb(212,127,47)" rx="2" ry="2" />
<text  x="537.44" y="431.5" >std::__future_base::_Async_state_im..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 1.39%)</title><rect x="665.6" y="117" width="16.3" height="15.0" fill="rgb(251,213,37)" rx="2" ry="2" />
<text  x="668.56" y="127.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="632.8" y="277" width="32.8" height="15.0" fill="rgb(221,223,29)" rx="2" ry="2" />
<text  x="635.78" y="287.5" >st..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 2.78%)</title><rect x="731.1" y="181" width="32.8" height="15.0" fill="rgb(221,142,18)" rx="2" ry="2" />
<text  x="734.11" y="191.5" >st..</text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc80000b60 (1 samples, 1.39%)</title><rect x="108.3" y="373" width="16.4" height="15.0" fill="rgb(218,172,42)" rx="2" ry="2" />
<text  x="111.33" y="383.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="681.9" y="149" width="16.4" height="15.0" fill="rgb(217,130,31)" rx="2" ry="2" />
<text  x="684.94" y="159.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.39%)</title><rect x="1140.8" y="373" width="16.4" height="15.0" fill="rgb(226,196,40)" rx="2" ry="2" />
<text  x="1143.83" y="383.5" ></text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc9a1f7e20 (3 samples, 4.17%)</title><rect x="337.8" y="357" width="49.1" height="15.0" fill="rgb(252,17,4)" rx="2" ry="2" />
<text  x="340.78" y="367.5" >_IO_..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c7ab8, (2 samples, 2.78%)</title><rect x="763.9" y="357" width="32.8" height="15.0" fill="rgb(226,182,53)" rx="2" ry="2" />
<text  x="766.89" y="367.5" >__..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="567.2" y="261" width="32.8" height="15.0" fill="rgb(244,7,6)" rx="2" ry="2" />
<text  x="570.22" y="271.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x55d93f9bbd18, (1 samples, 1.39%)</title><rect x="1140.8" y="293" width="16.4" height="15.0" fill="rgb(245,186,13)" rx="2" ry="2" />
<text  x="1143.83" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="731.1" y="309" width="32.8" height="15.0" fill="rgb(221,76,40)" rx="2" ry="2" />
<text  x="734.11" y="319.5" >st..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="600.0" y="245" width="32.8" height="15.0" fill="rgb(243,46,28)" rx="2" ry="2" />
<text  x="603.00" y="255.5" >st..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="780.3" y="117" width="16.4" height="15.0" fill="rgb(205,168,40)" rx="2" ry="2" />
<text  x="783.28" y="127.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c74a8, (2 samples, 2.78%)</title><rect x="632.8" y="357" width="32.8" height="15.0" fill="rgb(248,23,11)" rx="2" ry="2" />
<text  x="635.78" y="367.5" >__..</text>
</g>
<g >
<title>_IO_new_fclose(fp=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="10.0" y="373" width="16.4" height="15.0" fill="rgb(208,85,8)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>_IO_new_fclose(fp=0x7fbc84000bd0) (1 samples, 1.39%)</title><rect x="59.2" y="373" width="16.4" height="15.0" fill="rgb(243,223,39)" rx="2" ry="2" />
<text  x="62.17" y="383.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc84000bd0) (2 samples, 2.78%)</title><rect x="386.9" y="293" width="32.8" height="15.0" fill="rgb(208,186,0)" rx="2" ry="2" />
<text  x="389.94" y="303.5" >_I..</text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="452.5" y="293" width="16.4" height="15.0" fill="rgb(230,60,21)" rx="2" ry="2" />
<text  x="455.50" y="303.5" ></text>
</g>
<g >
<title>clone() (48 samples, 66.67%)</title><rect x="10.0" y="549" width="786.7" height="15.0" fill="rgb(206,18,5)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >clone()</text>
</g>
<g >
<title>__GI___posix_spawn(pid=pid@entry=0x7fbc94000cb0, (1 samples, 1.39%)</title><rect x="239.4" y="325" width="16.4" height="15.0" fill="rgb(225,4,28)" rx="2" ry="2" />
<text  x="242.44" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.78%)</title><rect x="1157.2" y="469" width="32.8" height="15.0" fill="rgb(248,38,16)" rx="2" ry="2" />
<text  x="1160.22" y="479.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 1.39%)</title><rect x="1173.6" y="309" width="16.4" height="15.0" fill="rgb(250,131,40)" rx="2" ry="2" />
<text  x="1176.61" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate(this=0x55d93cf8a3e8, (1 samples, 1.39%)</title><rect x="1173.6" y="293" width="16.4" height="15.0" fill="rgb(252,105,14)" rx="2" ry="2" />
<text  x="1176.61" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="386.9" y="261" width="32.8" height="15.0" fill="rgb(207,87,21)" rx="2" ry="2" />
<text  x="389.94" y="271.5" >__..</text>
</g>
<g >
<title>__GI__IO_getline_info(fp=fp@entry=0x7fbc74000bd0, (3 samples, 4.17%)</title><rect x="255.8" y="325" width="49.2" height="15.0" fill="rgb(230,210,50)" rx="2" ry="2" />
<text  x="258.83" y="335.5" >__GI..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.39%)</title><rect x="583.6" y="117" width="16.4" height="15.0" fill="rgb(238,180,29)" rx="2" ry="2" />
<text  x="586.61" y="127.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (10 samples, 13.89%)</title><rect x="1026.1" y="517" width="163.9" height="15.0" fill="rgb(232,185,32)" rx="2" ry="2" />
<text  x="1029.11" y="527.5" >MultiThreadedPageRank..</text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="501.7" y="277" width="32.7" height="15.0" fill="rgb(234,193,45)" rx="2" ry="2" />
<text  x="504.67" y="287.5" >__..</text>
</g>
<g >
<title>std::thread::join()() (1 samples, 1.39%)</title><rect x="1124.4" y="357" width="16.4" height="15.0" fill="rgb(249,224,4)" rx="2" ry="2" />
<text  x="1127.44" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 1.39%)</title><rect x="1157.2" y="293" width="16.4" height="15.0" fill="rgb(223,188,40)" rx="2" ry="2" />
<text  x="1160.22" y="303.5" ></text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc74000bd0, (3 samples, 4.17%)</title><rect x="255.8" y="341" width="49.2" height="15.0" fill="rgb(210,132,41)" rx="2" ry="2" />
<text  x="258.83" y="351.5" >__GI..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 2.78%)</title><rect x="632.8" y="165" width="32.8" height="15.0" fill="rgb(241,170,1)" rx="2" ry="2" />
<text  x="635.78" y="175.5" >st..</text>
</g>
<g >
<title>__GI__IO_getline(fp=fp@entry=0x7fbc94000bd0, (2 samples, 2.78%)</title><rect x="501.7" y="341" width="32.7" height="15.0" fill="rgb(206,160,16)" rx="2" ry="2" />
<text  x="504.67" y="351.5" >__..</text>
</g>
<g >
<title>fgets(__stream=0x7fbc90000bd0, (2 samples, 2.78%)</title><rect x="468.9" y="373" width="32.8" height="15.0" fill="rgb(222,13,40)" rx="2" ry="2" />
<text  x="471.89" y="383.5" >fg..</text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="42.8" y="341" width="16.4" height="15.0" fill="rgb(222,106,47)" rx="2" ry="2" />
<text  x="45.78" y="351.5" ></text>
</g>
<g >
<title>_IO_new_file_close_it(fp=fp@entry=0x7fbc84000bd0) (1 samples, 1.39%)</title><rect x="59.2" y="357" width="16.4" height="15.0" fill="rgb(251,40,48)" rx="2" ry="2" />
<text  x="62.17" y="367.5" ></text>
</g>
<g >
<title>_IO_new_popen(command=0x7fbc94000b60 (1 samples, 1.39%)</title><rect x="42.8" y="373" width="16.4" height="15.0" fill="rgb(239,59,7)" rx="2" ry="2" />
<text  x="45.78" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="763.9" y="165" width="16.4" height="15.0" fill="rgb(253,121,31)" rx="2" ry="2" />
<text  x="766.89" y="175.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 1.39%)</title><rect x="665.6" y="85" width="16.3" height="15.0" fill="rgb(226,101,40)" rx="2" ry="2" />
<text  x="668.56" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 1.39%)</title><rect x="534.4" y="101" width="16.4" height="15.0" fill="rgb(220,57,47)" rx="2" ry="2" />
<text  x="537.44" y="111.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 2.78%)</title><rect x="534.4" y="293" width="32.8" height="15.0" fill="rgb(253,101,49)" rx="2" ry="2" />
<text  x="537.44" y="303.5" >st..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Big (1 samples, 1.39%)</title><rect x="26.4" y="389" width="16.4" height="15.0" fill="rgb(236,22,42)" rx="2" ry="2" />
<text  x="29.39" y="399.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="1091.7" y="437" width="16.4" height="15.0" fill="rgb(217,65,30)" rx="2" ry="2" />
<text  x="1094.67" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="665.6" y="309" width="32.7" height="15.0" fill="rgb(234,126,35)" rx="2" ry="2" />
<text  x="668.56" y="319.5" >st..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait(this=0x55d93f9c7260) (1 samples, 1.39%)</title><rect x="1108.1" y="453" width="16.3" height="15.0" fill="rgb(238,208,27)" rx="2" ry="2" />
<text  x="1111.06" y="463.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.39%)</title><rect x="1157.2" y="277" width="16.4" height="15.0" fill="rgb(234,171,49)" rx="2" ry="2" />
<text  x="1160.22" y="287.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="141.1" y="325" width="16.4" height="15.0" fill="rgb(243,60,32)" rx="2" ry="2" />
<text  x="144.11" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.39%)</title><rect x="698.3" y="133" width="16.4" height="15.0" fill="rgb(242,103,30)" rx="2" ry="2" />
<text  x="701.33" y="143.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 1.39%)</title><rect x="1157.2" y="309" width="16.4" height="15.0" fill="rgb(254,168,11)" rx="2" ry="2" />
<text  x="1160.22" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 1.39%)</title><rect x="731.1" y="37" width="16.4" height="15.0" fill="rgb(242,101,8)" rx="2" ry="2" />
<text  x="734.11" y="47.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join (1 samples, 1.39%)</title><rect x="1108.1" y="421" width="16.3" height="15.0" fill="rgb(232,214,27)" rx="2" ry="2" />
<text  x="1111.06" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.39%)</title><rect x="681.9" y="101" width="16.4" height="15.0" fill="rgb(252,156,24)" rx="2" ry="2" />
<text  x="684.94" y="111.5" ></text>
</g>
<g >
<title>memcmp@plt() (1 samples, 1.39%)</title><rect x="567.2" y="37" width="16.4" height="15.0" fill="rgb(217,223,1)" rx="2" ry="2" />
<text  x="570.22" y="47.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="698.3" y="149" width="16.4" height="15.0" fill="rgb(232,93,17)" rx="2" ry="2" />
<text  x="701.33" y="159.5" ></text>
</g>
<g >
<title>_IO_ungetc(c=56, (2 samples, 2.78%)</title><rect x="911.4" y="485" width="32.8" height="15.0" fill="rgb(244,94,44)" rx="2" ry="2" />
<text  x="914.39" y="495.5" >_I..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="747.5" y="165" width="16.4" height="15.0" fill="rgb(227,224,38)" rx="2" ry="2" />
<text  x="750.50" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_free(mem=0x7fbc8c0b5850) (1 samples, 1.39%)</title><rect x="1157.2" y="181" width="16.4" height="15.0" fill="rgb(227,199,32)" rx="2" ry="2" />
<text  x="1160.22" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (16 samples, 22.22%)</title><rect x="534.4" y="437" width="262.3" height="15.0" fill="rgb(221,82,42)" rx="2" ry="2" />
<text  x="537.44" y="447.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.39%)</title><rect x="714.7" y="133" width="16.4" height="15.0" fill="rgb(207,227,31)" rx="2" ry="2" />
<text  x="717.72" y="143.5" ></text>
</g>
<g >
<title>__GI___posix_spawn(pid=pid@entry=0x7fbc74000cb0, (1 samples, 1.39%)</title><rect x="75.6" y="325" width="16.3" height="15.0" fill="rgb(239,31,2)" rx="2" ry="2" />
<text  x="78.56" y="335.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 2.78%)</title><rect x="731.1" y="245" width="32.8" height="15.0" fill="rgb(215,226,13)" rx="2" ry="2" />
<text  x="734.11" y="255.5" >st..</text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="386.9" y="277" width="32.8" height="15.0" fill="rgb(223,177,52)" rx="2" ry="2" />
<text  x="389.94" y="287.5" >__..</text>
</g>
<g >
<title>_IO_new_proc_open (1 samples, 1.39%)</title><rect x="239.4" y="357" width="16.4" height="15.0" fill="rgb(234,150,39)" rx="2" ry="2" />
<text  x="242.44" y="367.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc90000bd0) (2 samples, 2.78%)</title><rect x="468.9" y="293" width="32.8" height="15.0" fill="rgb(244,45,19)" rx="2" ry="2" />
<text  x="471.89" y="303.5" >_I..</text>
</g>
<g >
<title>__GI___posix_spawn(pid=pid@entry=0x7fbc7c000cb0, (1 samples, 1.39%)</title><rect x="91.9" y="325" width="16.4" height="15.0" fill="rgb(244,109,34)" rx="2" ry="2" />
<text  x="94.94" y="335.5" ></text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc9c1fbe20 (1 samples, 1.39%)</title><rect x="452.5" y="357" width="16.4" height="15.0" fill="rgb(222,154,42)" rx="2" ry="2" />
<text  x="455.50" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="534.4" y="309" width="32.8" height="15.0" fill="rgb(206,146,16)" rx="2" ry="2" />
<text  x="537.44" y="319.5" >st..</text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="206.7" y="341" width="16.4" height="15.0" fill="rgb(250,131,30)" rx="2" ry="2" />
<text  x="209.67" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7fbc8459cf00, (1 samples, 1.39%)</title><rect x="1157.2" y="197" width="16.4" height="15.0" fill="rgb(206,112,15)" rx="2" ry="2" />
<text  x="1160.22" y="207.5" ></text>
</g>
<g >
<title>__GI___posix_spawn(pid=pid@entry=0x7fbc80000cb0, (1 samples, 1.39%)</title><rect x="108.3" y="325" width="16.4" height="15.0" fill="rgb(222,60,12)" rx="2" ry="2" />
<text  x="111.33" y="335.5" ></text>
</g>
<g >
<title>_IO_new_proc_close(fp=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="141.1" y="341" width="16.4" height="15.0" fill="rgb(233,122,48)" rx="2" ry="2" />
<text  x="144.11" y="351.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7fbc94000bd0) (2 samples, 2.78%)</title><rect x="501.7" y="293" width="32.7" height="15.0" fill="rgb(218,83,38)" rx="2" ry="2" />
<text  x="504.67" y="303.5" >_I..</text>
</g>
<g >
<title>_IO_new_file_close_it(fp=fp@entry=0x7fbc7c000bd0) (1 samples, 1.39%)</title><rect x="26.4" y="357" width="16.4" height="15.0" fill="rgb(240,11,20)" rx="2" ry="2" />
<text  x="29.39" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.78%)</title><rect x="1157.2" y="421" width="32.8" height="15.0" fill="rgb(251,198,17)" rx="2" ry="2" />
<text  x="1160.22" y="431.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.78%)</title><rect x="1157.2" y="405" width="32.8" height="15.0" fill="rgb(214,120,20)" rx="2" ry="2" />
<text  x="1160.22" y="415.5" >__..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 22.22%)</title><rect x="534.4" y="469" width="262.3" height="15.0" fill="rgb(232,174,48)" rx="2" ry="2" />
<text  x="537.44" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;st..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.39%)</title><rect x="665.6" y="133" width="16.3" height="15.0" fill="rgb(219,118,51)" rx="2" ry="2" />
<text  x="668.56" y="143.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.39%)</title><rect x="223.1" y="341" width="16.3" height="15.0" fill="rgb(217,133,13)" rx="2" ry="2" />
<text  x="226.06" y="351.5" ></text>
</g>
<g >
<title>_int_free(av=0x7fbc88000020, (1 samples, 1.39%)</title><rect x="1173.6" y="277" width="16.4" height="15.0" fill="rgb(238,8,22)" rx="2" ry="2" />
<text  x="1176.61" y="287.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c7288, (1 samples, 1.39%)</title><rect x="1108.1" y="373" width="16.3" height="15.0" fill="rgb(240,136,38)" rx="2" ry="2" />
<text  x="1111.06" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 2.78%)</title><rect x="600.0" y="325" width="32.8" height="15.0" fill="rgb(232,0,8)" rx="2" ry="2" />
<text  x="603.00" y="335.5" >st..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.39%)</title><rect x="796.7" y="485" width="16.4" height="15.0" fill="rgb(251,73,37)" rx="2" ry="2" />
<text  x="799.67" y="495.5" ></text>
</g>
<g >
<title>operatornew(unsigned (1 samples, 1.39%)</title><rect x="796.7" y="421" width="16.4" height="15.0" fill="rgb(247,79,0)" rx="2" ry="2" />
<text  x="799.67" y="431.5" ></text>
</g>
<g >
<title>_IO_new_proc_close(fp=0x7fbc88000bd0) (1 samples, 1.39%)</title><rect x="190.3" y="341" width="16.4" height="15.0" fill="rgb(205,26,37)" rx="2" ry="2" />
<text  x="193.28" y="351.5" ></text>
</g>
<g >
<title>_IO_new_file_close_it(fp=fp@entry=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="10.0" y="357" width="16.4" height="15.0" fill="rgb(227,76,50)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 1.39%)</title><rect x="1157.2" y="325" width="16.4" height="15.0" fill="rgb(231,47,24)" rx="2" ry="2" />
<text  x="1160.22" y="335.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::generatePageIds (4 samples, 5.56%)</title><rect x="1026.1" y="501" width="65.6" height="15.0" fill="rgb(230,183,25)" rx="2" ry="2" />
<text  x="1029.11" y="511.5" >MultiTh..</text>
</g>
<g >
<title>_IO_fgets(buf=0x7fbc9d1fde20 (2 samples, 2.78%)</title><rect x="501.7" y="357" width="32.7" height="15.0" fill="rgb(252,169,7)" rx="2" ry="2" />
<text  x="504.67" y="367.5" >_I..</text>
</g>
<g >
<title>__spawni(pid=pid@entry=0x7fbc94000cb0, (1 samples, 1.39%)</title><rect x="239.4" y="309" width="16.4" height="15.0" fill="rgb(248,31,28)" rx="2" ry="2" />
<text  x="242.44" y="319.5" ></text>
</g>
<g >
<title>_IO_new_proc_open (1 samples, 1.39%)</title><rect x="108.3" y="357" width="16.4" height="15.0" fill="rgb(236,227,11)" rx="2" ry="2" />
<text  x="111.33" y="367.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.39%)</title><rect x="583.6" y="149" width="16.4" height="15.0" fill="rgb(253,17,52)" rx="2" ry="2" />
<text  x="586.61" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.39%)</title><rect x="567.2" y="165" width="16.4" height="15.0" fill="rgb(240,111,24)" rx="2" ry="2" />
<text  x="570.22" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.78%)</title><rect x="567.2" y="197" width="32.8" height="15.0" fill="rgb(206,6,15)" rx="2" ry="2" />
<text  x="570.22" y="207.5" >st..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 2.78%)</title><rect x="698.3" y="181" width="32.8" height="15.0" fill="rgb(214,68,32)" rx="2" ry="2" />
<text  x="701.33" y="191.5" >st..</text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7fbc8c000bd0) (1 samples, 1.39%)</title><rect x="452.5" y="309" width="16.4" height="15.0" fill="rgb(244,149,32)" rx="2" ry="2" />
<text  x="455.50" y="319.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 2.78%)</title><rect x="665.6" y="341" width="32.7" height="15.0" fill="rgb(251,142,51)" rx="2" ry="2" />
<text  x="668.56" y="351.5" >st..</text>
</g>
<g >
<title>pageRankComputationWithNetwork(computer=..., (10 samples, 13.89%)</title><rect x="1026.1" y="533" width="163.9" height="15.0" fill="rgb(232,229,31)" rx="2" ry="2" />
<text  x="1029.11" y="543.5" >pageRankComputationWi..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x55d93f9c73b8, (2 samples, 2.78%)</title><rect x="600.0" y="357" width="32.8" height="15.0" fill="rgb(239,86,19)" rx="2" ry="2" />
<text  x="603.00" y="367.5" >__..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.39%)</title><rect x="550.8" y="165" width="16.4" height="15.0" fill="rgb(244,95,14)" rx="2" ry="2" />
<text  x="553.83" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_read (2 samples, 2.78%)</title><rect x="501.7" y="261" width="32.7" height="15.0" fill="rgb(217,86,25)" rx="2" ry="2" />
<text  x="504.67" y="271.5" >__..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (1 samples, 1.39%)</title><rect x="1091.7" y="469" width="16.4" height="15.0" fill="rgb(252,133,0)" rx="2" ry="2" />
<text  x="1094.67" y="479.5" ></text>
</g>
</g>
</svg>
