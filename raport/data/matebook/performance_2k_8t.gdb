
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:371

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:371
#1  0x000056394b81eab9 in std::char_traits<char>::copy (__n=68, __s2=0x56394bfba150 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", __s1=<optimized out>) at /usr/include/c++/9/bits/char_traits.h:365
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=68, __s=0x56394bfba150 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", __d=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:351
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=68, __s=0x56394bfba150 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", __d=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:346
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (__k2=0x56394bfba194 "", __k1=0x56394bfba150 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", __p=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:393
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x56394bfba194 "", __beg=0x56394bfba150 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", this=0x56394cb323d0) at /usr/include/c++/9/bits/basic_string.tcc:225
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x56394bfba194 "", __beg=0x56394bfba150 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", this=0x56394cb323d0) at /usr/include/c++/9/bits/basic_string.h:247
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x56394bfba194 "", __beg=0x56394bfba150 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", this=0x56394cb323d0) at /usr/include/c++/9/bits/basic_string.h:266
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251262", this=0x56394cb323d0) at /usr/include/c++/9/bits/basic_string.h:451
#9  PageId::PageId (this=0x56394cb323d0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#10 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x7ffdec1b4888, __p=0x56394cb323d0) at /usr/include/c++/9/ext/new_allocator.h:147
#11 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x56394cb323d0) at /usr/include/c++/9/bits/alloc_traits.h:484
#12 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x7ffdec1b4888) at /usr/include/c++/9/bits/stl_vector.h:1189
#13 Page::addLink (link=..., this=0x7ffdec1b4840) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:38
#14 SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#15 0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#16 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
std::__relocate_a_1<PageId*, PageId*, std::allocator<PageId> > (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=0x56394dcdc1f0) at /usr/include/c++/9/bits/basic_string.h:936
936	      length() const _GLIBCXX_NOEXCEPT

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  std::__relocate_a_1<PageId*, PageId*, std::allocator<PageId> > (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=0x56394dcdc1f0) at /usr/include/c++/9/bits/basic_string.h:936
#1  std::__relocate_a<PageId*, PageId*, std::allocator<PageId> > (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_uninitialized.h:964
#2  std::vector<PageId, std::allocator<PageId> >::_S_do_relocate (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:453
#3  std::vector<PageId, std::allocator<PageId> >::_S_relocate (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:466
#4  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=0x7ffdec1b4888, __position={id = <error: Cannot access memory at address 0x3538633431326332>}) at /usr/include/c++/9/bits/vector.tcc:461
#5  0x000056394b81ea6d in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x7ffdec1b4888) at /usr/include/c++/9/bits/stl_iterator.h:806
#6  Page::addLink (link=..., this=0x7ffdec1b4840) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:38
#7  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#8  0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#9  0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=4, __s=0x7ffdec1b4910 "1535", __d=0x7ffdec1b48d8 "1534") at /usr/include/c++/9/bits/basic_string.h:392
392	      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=4, __s=0x7ffdec1b4910 "1535", __d=0x7ffdec1b48d8 "1534") at /usr/include/c++/9/bits/basic_string.h:392
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (__k2=0x7ffdec1b4914 "", __k1=0x7ffdec1b4910 "1535", __p=0x7ffdec1b48d8 "1534") at /usr/include/c++/9/bits/basic_string.h:393
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7ffdec1b4914 "", __beg=0x7ffdec1b4910 "1535", this=0x7ffdec1b48c8) at /usr/include/c++/9/bits/basic_string.tcc:225
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7ffdec1b4914 "", __beg=0x7ffdec1b4910 "1535", this=0x7ffdec1b48c8) at /usr/include/c++/9/bits/basic_string.h:247
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7ffdec1b4914 "", __beg=0x7ffdec1b4910 "1535", this=0x7ffdec1b48c8) at /usr/include/c++/9/bits/basic_string.h:266
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="1535", this=0x7ffdec1b48c8) at /usr/include/c++/9/bits/basic_string.h:451
#6  Page::Page (contentArg="1535", this=0x7ffdec1b48a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:19
#7  NetworkGenerator::generatePageFromNum (this=0x7ffdec1b4dd0, num=1535) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:18
#8  NetworkGenerator::generatePageFromNumWithGeneratedId (this=0x7ffdec1b4dd0, num=1535) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:23
#9  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#10 0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#11 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cbafc8 in _int_malloc (av=av@entry=0x7f44b0e0bb80 <main_arena>, bytes=bytes@entry=68) at malloc.c:3679

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cbafc8 in _int_malloc (av=av@entry=0x7f44b0e0bb80 <main_arena>, bytes=bytes@entry=68) at malloc.c:3679
#1  0x00007f44b0cbd2d4 in __GI___libc_malloc (bytes=68) at malloc.c:3058
#2  0x00007f44b0ed7c29 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x000056394b81e81b in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x563950078b03 "", __beg=0x563950078ac0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725418", this=0x5639501d3de0) at /usr/include/c++/9/bits/basic_string.tcc:206
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x563950078b03 "", __beg=0x563950078ac0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725418", this=0x5639501d3de0) at /usr/include/c++/9/bits/basic_string.h:247
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x563950078b03 "", __beg=0x563950078ac0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725418", this=0x5639501d3de0) at /usr/include/c++/9/bits/basic_string.h:266
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x5639501d3de0) at /usr/include/c++/9/bits/basic_string.h:451
#7  PageId::PageId (this=0x5639501d3de0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  std::_Construct<PageId, PageId const&> (__p=0x5639501d3de0) at /usr/include/c++/9/bits/stl_construct.h:75
#9  std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<PageId const*, std::vector<PageId, std::allocator<PageId> > >, PageId*> (__result=0x5639501d2060, __last=..., __first=...) at /usr/include/c++/9/bits/stl_uninitialized.h:83
#10 std::uninitialized_copy<__gnu_cxx::__normal_iterator<PageId const*, std::vector<PageId, std::allocator<PageId> > >, PageId*> (__result=0x5639501d2060, __last=..., __first=...) at /usr/include/c++/9/bits/stl_uninitialized.h:140
#11 std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<PageId const*, std::vector<PageId, std::allocator<PageId> > >, PageId*, PageId> (__result=0x5639501d2060, __last=..., __first=...) at /usr/include/c++/9/bits/stl_uninitialized.h:307
#12 std::vector<PageId, std::allocator<PageId> >::vector (__x=std::vector of length 1096, capacity 2048 = {...}, this=0x56394f8274a8) at /usr/include/c++/9/bits/stl_vector.h:555
#13 Page::Page (this=0x56394f827460) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:13
#14 __gnu_cxx::new_allocator<Page>::construct<Page, Page const&> (this=0x7ffdec1b4b10, __p=0x56394f827460) at /usr/include/c++/9/ext/new_allocator.h:147
#15 std::allocator_traits<std::allocator<Page> >::construct<Page, Page const&> (__a=..., __p=0x56394f827460) at /usr/include/c++/9/bits/alloc_traits.h:484
#16 std::vector<Page, std::allocator<Page> >::push_back (__x=..., this=0x7ffdec1b4b10) at /usr/include/c++/9/bits/stl_vector.h:1189
#17 Network::addPage (page=..., this=0x7ffdec1b4b10) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/network.hpp:19
#18 SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:55
#19 0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#20 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0c99c4c in __vfprintf_internal (s=s@entry=0x7ffdec1b4500, format=format@entry=0x56394b826079 "%u", ap=ap@entry=0x7ffdec1b46a0, mode_flags=mode_flags@entry=2) at vfprintf-internal.c:1423

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0c99c4c in __vfprintf_internal (s=s@entry=0x7ffdec1b4500, format=format@entry=0x56394b826079 "%u", ap=ap@entry=0x7ffdec1b46a0, mode_flags=mode_flags@entry=2) at vfprintf-internal.c:1423
#1  0x00007f44b0caf11a in __vsnprintf_internal (string=0x7ffdec1b4680 "", maxlen=<optimized out>, format=0x56394b826079 "%u", args=0x7ffdec1b46a0, mode_flags=2) at vsnprintf.c:114
#2  0x000056394b81a3da in vsnprintf (__ap=0x7ffdec1b46a0, __fmt=0x56394b826079 "%u", __n=16, __s=0x7ffdec1b4680 "") at /usr/include/x86_64-linux-gnu/bits/stdio2.h:80
#3  __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> (__convf=<optimized out>, __n=16, __fmt=0x56394b826079 "%u", __fmt=0x56394b826079 "%u", __n=16, __convf=<optimized out>) at /usr/include/c++/9/ext/string_conversions.h:111
#4  0x000056394b81e31b in std::__cxx11::to_string (__val=394) at /usr/include/c++/9/bits/basic_string.h:6552
#5  NetworkGenerator::generatePageFromNum (this=0x7ffdec1b4dd0, num=394) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:18
#6  NetworkGenerator::generatePageFromNumWithGeneratedId (this=0x7ffdec1b4dd0, num=394) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:23
#7  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#8  0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#9  0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:368

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:368
#1  0x000056394b81eab9 in std::char_traits<char>::copy (__n=68, __s2=0x563952503c00 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", __s1=<optimized out>) at /usr/include/c++/9/bits/char_traits.h:365
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=68, __s=0x563952503c00 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", __d=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:351
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=68, __s=0x563952503c00 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", __d=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:346
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (__k2=0x563952503c44 "", __k1=0x563952503c00 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", __p=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:393
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x563952503c44 "", __beg=0x563952503c00 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", this=0x56395267a4c0) at /usr/include/c++/9/bits/basic_string.tcc:225
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x563952503c44 "", __beg=0x563952503c00 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", this=0x56395267a4c0) at /usr/include/c++/9/bits/basic_string.h:247
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x563952503c44 "", __beg=0x563952503c00 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", this=0x56395267a4c0) at /usr/include/c++/9/bits/basic_string.h:266
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251249", this=0x56395267a4c0) at /usr/include/c++/9/bits/basic_string.h:451
#9  PageId::PageId (this=0x56395267a4c0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#10 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x7ffdec1b4888, __p=0x56395267a4c0) at /usr/include/c++/9/ext/new_allocator.h:147
#11 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x56395267a4c0) at /usr/include/c++/9/bits/alloc_traits.h:484
#12 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x7ffdec1b4888) at /usr/include/c++/9/bits/stl_vector.h:1189
#13 Page::addLink (link=..., this=0x7ffdec1b4840) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:38
#14 SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#15 0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#16 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0ec89c0 in free@plt () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0ec89c0 in free@plt () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00007f44b0f6fefb in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f44b0f71683 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x000056394b81c24d in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__str="1163", this=0x7ffdec1b4720) at /usr/include/c++/9/bits/basic_string.h:1221
#4  std::operator+<char, std::char_traits<char>, std::allocator<char> > (__rhs="1163", __lhs=...) at /usr/include/c++/9/bits/basic_string.h:6024
#5  SimpleIdGenerator::generateId (this=<optimized out>, content="1163") at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/simpleIdGenerator.hpp:15
#6  0x000056394b81e3fc in Page::generateId (idGenerator=..., this=0x7ffdec1b48a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:26
#7  NetworkGenerator::generatePageFromNumWithGeneratedId (this=0x7ffdec1b4dd0, num=1163) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:24
#8  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#9  0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#10 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x000056394b81a4a9 in std::char_traits<char>::copy (__n=4, __s2=0x7ffdec1b4680 "1790", __s1=0x7ffdec1b4910 "1790") at /usr/include/c++/9/bits/char_traits.h:365
365		return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x000056394b81a4a9 in std::char_traits<char>::copy (__n=4, __s2=0x7ffdec1b4680 "1790", __s1=0x7ffdec1b4910 "1790") at /usr/include/c++/9/bits/char_traits.h:365
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=4, __s=0x7ffdec1b4680 "1790", __d=0x7ffdec1b4910 "1790") at /usr/include/c++/9/bits/basic_string.h:351
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=4, __s=0x7ffdec1b4680 "1790", __d=0x7ffdec1b4910 "1790") at /usr/include/c++/9/bits/basic_string.h:346
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (__k2=0x7ffdec1b4684 "", __k1=0x7ffdec1b4680 "1790", __p=0x7ffdec1b4910 "1790") at /usr/include/c++/9/bits/basic_string.h:393
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7ffdec1b4684 "", __beg=0x7ffdec1b4680 "1790", this=0x7ffdec1b4900) at /usr/include/c++/9/bits/basic_string.tcc:225
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7ffdec1b4684 "", __beg=0x7ffdec1b4680 "1790", this=0x7ffdec1b4900) at /usr/include/c++/9/bits/basic_string.h:247
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7ffdec1b4684 "", __beg=0x7ffdec1b4680 "1790", this=0x7ffdec1b4900) at /usr/include/c++/9/bits/basic_string.h:266
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void> (__a=..., __end=0x7ffdec1b4684 "", __beg=0x7ffdec1b4680 "1790", this=0x7ffdec1b4900) at /usr/include/c++/9/bits/basic_string.h:628
#8  __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> (__convf=<optimized out>, __n=16, __fmt=0x56394b826079 "%u", __fmt=0x56394b826079 "%u", __n=16, __convf=<optimized out>) at /usr/include/c++/9/ext/string_conversions.h:115
#9  0x000056394b81e31b in std::__cxx11::to_string (__val=1790) at /usr/include/c++/9/bits/basic_string.h:6552
#10 NetworkGenerator::generatePageFromNum (this=0x7ffdec1b4dd0, num=1790) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:18
#11 NetworkGenerator::generatePageFromNumWithGeneratedId (this=0x7ffdec1b4dd0, num=1790) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:23
#12 SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#13 0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#14 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cb99cc in _int_free (av=0x7f44b0e0bb80 <main_arena>, p=0x5639556748c0, have_lock=0) at malloc.c:4155

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cb99cc in _int_free (av=0x7f44b0e0bb80 <main_arena>, p=0x5639556748c0, have_lock=0) at malloc.c:4155
#1  0x000056394b81e607 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7ffdec1b48a0, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7ffdec1b48a0) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7ffdec1b48a0) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7ffdec1b48a0, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7ffdec1b48a0, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  Page::~Page (this=0x7ffdec1b48a0, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:13
#8  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#9  0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#10 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__gnu_cxx::new_allocator<char>::deallocate (this=0x7ffdec1b4900, __p=0x563956e70c90 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251532") at /usr/include/c++/9/ext/new_allocator.h:119
119	      deallocate(pointer __p, size_type)

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __gnu_cxx::new_allocator<char>::deallocate (this=0x7ffdec1b4900, __p=0x563956e70c90 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251532") at /usr/include/c++/9/ext/new_allocator.h:119
#1  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=69, __p=0x563956e70c90 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251532") at /usr/include/c++/9/bits/alloc_traits.h:470
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=68, this=0x7ffdec1b4900) at /usr/include/c++/9/bits/basic_string.h:237
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7ffdec1b4900) at /usr/include/c++/9/bits/basic_string.h:232
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7ffdec1b4900, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#5  PageId::~PageId (this=0x7ffdec1b4900, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#7  0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#8  0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x000056394b81e2cb in SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:45
45	            for (uint32_t j = 0; j < size; ++j) {

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x000056394b81e2cb in SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:45
#1  0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#2  0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__GI___libc_malloc (bytes=65) at malloc.c:3023

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __GI___libc_malloc (bytes=65) at malloc.c:3023
#1  0x00007f44b0ed7c29 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x000056394b81c314 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x56394bf67f80 "", __beg=0x56394bf67f40 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725", this=0x7ffdec1b4720) at /usr/include/c++/9/bits/char_traits.h:363
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x56394bf67f80 "", __beg=0x56394bf67f40 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725", this=0x7ffdec1b4720) at /usr/include/c++/9/bits/basic_string.h:247
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x56394bf67f80 "", __beg=0x56394bf67f40 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725", this=0x7ffdec1b4720) at /usr/include/c++/9/bits/basic_string.h:266
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x7ffdec1b4720) at /usr/include/c++/9/bits/basic_string.h:451
#6  std::operator+<char, std::char_traits<char>, std::allocator<char> > (__rhs="808", __lhs=...) at /usr/include/c++/9/bits/basic_string.h:6023
#7  SimpleIdGenerator::generateId (this=<optimized out>, content="808") at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/simpleIdGenerator.hpp:15
#8  0x000056394b81e3fc in Page::generateId (idGenerator=..., this=0x7ffdec1b48a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:26
#9  NetworkGenerator::generatePageFromNumWithGeneratedId (this=0x7ffdec1b4dd0, num=808) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:24
#10 SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdec1b4dd0, size=2000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#11 0x000056394b81a8af in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#12 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x000056394b820595 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=10009065232554297889, __k=..., __n=424, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable_policy.h:1393
1393	      _M_bucket_index(const __node_type* __p, std::size_t __n) const

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x000056394b820595 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=10009065232554297889, __k=..., __n=424, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable_policy.h:1393
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=10009065232554297889, __key=..., __bkt=424, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdec1b4850, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  0x000056394b820d6d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=0x7ffdec1b4850) at /usr/include/c++/9/bits/unordered_map.h:984
#4  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:213
#5  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#6  0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#7  0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0ed7afe in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0ed7afe in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82054a in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s=...) at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4850, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4850, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdec1b4850, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  0x000056394b820d6d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=0x7ffdec1b4850) at /usr/include/c++/9/bits/unordered_map.h:984
#7  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:213
#8  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#9  0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#10 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[New LWP 40395]
[New LWP 40396]
[New LWP 40397]
[New LWP 40398]
[New LWP 40399]
[New LWP 40400]
[New LWP 40401]
[New LWP 40402]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=139932948055808, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7f44ad293700 (LWP 40402)):
#0  0x000056394b82057d in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=8965047708481747874, __k=..., __n=1214, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:1532
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=8965047708481747874, __key=..., __bkt=1214, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdec1b4850, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  0x000056394b8208f4 in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:984
#4  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c873020) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#5  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c873018) at /usr/include/c++/9/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c873018) at /usr/include/c++/9/thread:251
#9  std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c873010) at /usr/include/c++/9/thread:195
#10 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#11 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#12 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f44afa98700 (LWP 40401)):
#0  0x00007f44b0d3bb0b in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f44b0cba832 in grow_heap (diff=4096, h=0x7f4494000000) at arena.c:543
#2  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f4494000020) at malloc.c:2397
#3  0x00007f44b0cbb913 in _int_malloc (av=av@entry=0x7f4494000020, bytes=bytes@entry=68) at malloc.c:4141
#4  0x00007f44b0cbd419 in __GI___libc_malloc (bytes=68) at malloc.c:3066
#5  0x00007f44b0ed7c29 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x000056394b8209f7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4494000bf3 "", __beg=0x7f4494000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725209", this=0x7f44940c8340) at /usr/include/c++/9/bits/stl_iterator.h:806
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f4494000bf3 "", __beg=0x7f4494000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725209", this=0x7f44940c8340) at /usr/include/c++/9/bits/basic_string.h:247
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4494000bf3 "", __beg=0x7f4494000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725209", this=0x7f44940c8340) at /usr/include/c++/9/bits/basic_string.h:266
#9  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725209", this=0x7f44940c8340) at /usr/include/c++/9/bits/basic_string.h:451
#10 PageId::PageId (this=0x7f44940c8340) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#11 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5639598e6d58, __p=0x7f44940c8340) at /usr/include/c++/9/ext/new_allocator.h:147
#12 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f44940c8340) at /usr/include/c++/9/bits/alloc_traits.h:484
#13 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5639598e6d58) at /usr/include/c++/9/bits/stl_vector.h:1189
#14 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5639598e6d58) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#15 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c8da520) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#16 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#17 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c8da518) at /usr/include/c++/9/thread:244
#19 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c8da518) at /usr/include/c++/9/thread:251
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c8da510) at /usr/include/c++/9/thread:195
#21 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#23 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f44b0299700 (LWP 40400)):
#0  0x00007f44b0cb9b09 in _int_free (av=0x7f44a0000020, p=<optimized out>, have_lock=<optimized out>) at malloc.c:4286
#1  0x000056394b8209a9 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f44b0298e70, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f44b0298e70) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f44b0298e70) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f44b0298e70, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f44b0298e70, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c93eac0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#8  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c93eab8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c93eab8) at /usr/include/c++/9/thread:251
#12 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c93eab0) at /usr/include/c++/9/thread:195
#13 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#14 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#15 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f44b0a9a700 (LWP 40399)):
#0  0x000056394b820595 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=4740703804848415703, __k=..., __n=1090, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable_policy.h:1393
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=4740703804848415703, __key=..., __bkt=1090, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdec1b4850, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  0x000056394b8208f4 in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:984
#4  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394ca07f80) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#5  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394ca07f78) at /usr/include/c++/9/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394ca07f78) at /usr/include/c++/9/thread:251
#9  std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394ca07f70) at /usr/include/c++/9/thread:195
#10 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#11 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#12 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f44af297700 (LWP 40398)):
#0  0x00007f44b0cb99c4 in _int_free (av=0x7f4490000020, p=0x7f4490000ba0, have_lock=0) at malloc.c:4155
#1  0x000056394b8209a9 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f44af296e70, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f44af296e70) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f44af296e70) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f44af296e70, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f44af296e70, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394caeb9f0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#8  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394caeb9e8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394caeb9e8) at /usr/include/c++/9/thread:251
#12 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394caeb9e0) at /usr/include/c++/9/thread:195
#13 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#14 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#15 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f44aea96700 (LWP 40397)):
#0  0x00007f44b0cbd541 in __GI___libc_malloc (bytes=68) at malloc.c:3077
#1  0x00007f44b0ed7c29 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x000056394b8209f7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f449c000bf3 "", __beg=0x7f449c000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725206", this=0x7f448c170450) at /usr/include/c++/9/bits/stl_iterator.h:806
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f449c000bf3 "", __beg=0x7f449c000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725206", this=0x7f448c170450) at /usr/include/c++/9/bits/basic_string.h:247
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f449c000bf3 "", __beg=0x7f449c000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725206", this=0x7f448c170450) at /usr/include/c++/9/bits/basic_string.h:266
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725206", this=0x7f448c170450) at /usr/include/c++/9/bits/basic_string.h:451
#6  PageId::PageId (this=0x7f448c170450) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5639598e9d48, __p=0x7f448c170450) at /usr/include/c++/9/ext/new_allocator.h:147
#8  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f448c170450) at /usr/include/c++/9/bits/alloc_traits.h:484
#9  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5639598e9d48) at /usr/include/c++/9/bits/stl_vector.h:1189
#10 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5639598e9d48) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#11 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394cacbd00) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#12 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394cacbcf8) at /usr/include/c++/9/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394cacbcf8) at /usr/include/c++/9/thread:251
#16 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394cacbcf0) at /usr/include/c++/9/thread:195
#17 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#18 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#19 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f44ae295700 (LWP 40396)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56395989a380) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56395989a380) at pthread_mutex_unlock.c:357
#2  0x000056394b820998 in __gthread_mutex_unlock (__mutex=0x56395989a380) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56395989a380) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x56395989a368) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c73b9b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c73b9a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c73b9a8) at /usr/include/c++/9/thread:251
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c73b9a0) at /usr/include/c++/9/thread:195
#12 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#14 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f44ada94700 (LWP 40395)):
#0  0x000056394b82056a in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=4611586999612677804, __k=..., __n=2259, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:1532
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=4611586999612677804, __key=..., __bkt=2259, this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdec1b4850, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  0x000056394b8208f4 in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:984
#4  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c0ce000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#5  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c0cdff8) at /usr/include/c++/9/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c0cdff8) at /usr/include/c++/9/thread:251
#9  std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c0cdff0) at /usr/include/c++/9/thread:195
#10 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#11 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#12 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __pthread_clockjoin_ex (threadid=139932948055808, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007f44b0f03fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x000056394b820f30 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdec1b47f0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[New LWP 40395]
[New LWP 40396]
[New LWP 40397]
[New LWP 40398]
[New LWP 40399]
[New LWP 40400]
[New LWP 40401]
[New LWP 40402]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=139932948055808, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7f44ad293700 (LWP 40402)):
#0  _int_malloc (av=av@entry=0x7f448c000020, bytes=bytes@entry=69) at malloc.c:4116
#1  0x00007f44b0cbd419 in __GI___libc_malloc (bytes=69) at malloc.c:3066
#2  0x00007f44b0ed7c29 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x000056394b8209f7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f448c000ba4 "", __beg=0x7f448c000b60 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251847", this=0x7f44a8e4dcd0) at /usr/include/c++/9/bits/stl_iterator.h:806
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f448c000ba4 "", __beg=0x7f448c000b60 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251847", this=0x7f44a8e4dcd0) at /usr/include/c++/9/bits/basic_string.h:247
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f448c000ba4 "", __beg=0x7f448c000b60 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251847", this=0x7f44a8e4dcd0) at /usr/include/c++/9/bits/basic_string.h:266
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251847", this=0x7f44a8e4dcd0) at /usr/include/c++/9/bits/basic_string.h:451
#7  PageId::PageId (this=0x7f44a8e4dcd0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x563959862948, __p=0x7f44a8e4dcd0) at /usr/include/c++/9/ext/new_allocator.h:147
#9  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f44a8e4dcd0) at /usr/include/c++/9/bits/alloc_traits.h:484
#10 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x563959862948) at /usr/include/c++/9/bits/stl_vector.h:1189
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x563959862948) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c873020) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c873018) at /usr/include/c++/9/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c873018) at /usr/include/c++/9/thread:251
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c873010) at /usr/include/c++/9/thread:195
#18 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#20 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f44afa98700 (LWP 40401)):
#0  _int_malloc (av=av@entry=0x7f4494000020, bytes=bytes@entry=69) at malloc.c:3584
#1  0x00007f44b0cbd419 in __GI___libc_malloc (bytes=69) at malloc.c:3066
#2  0x00007f44b0ed7c29 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x000056394b8209f7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4494000bf4 "", __beg=0x7f4494000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251846", this=0x7f44a131d270) at /usr/include/c++/9/bits/stl_iterator.h:806
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f4494000bf4 "", __beg=0x7f4494000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251846", this=0x7f44a131d270) at /usr/include/c++/9/bits/basic_string.h:247
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4494000bf4 "", __beg=0x7f4494000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251846", this=0x7f44a131d270) at /usr/include/c++/9/bits/basic_string.h:266
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251846", this=0x7f44a131d270) at /usr/include/c++/9/bits/basic_string.h:451
#7  PageId::PageId (this=0x7f44a131d270) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x563959855be8, __p=0x7f44a131d270) at /usr/include/c++/9/ext/new_allocator.h:147
#9  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f44a131d270) at /usr/include/c++/9/bits/alloc_traits.h:484
#10 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x563959855be8) at /usr/include/c++/9/bits/stl_vector.h:1189
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x563959855be8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c8da520) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c8da518) at /usr/include/c++/9/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c8da518) at /usr/include/c++/9/thread:251
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c8da510) at /usr/include/c++/9/thread:195
#18 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#20 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f44b0299700 (LWP 40400)):
#0  __lll_lock_wait (futex=futex@entry=0x5639598987e0, private=0) at lowlevellock.c:52
#1  0x00007f44b101a0a3 in __GI___pthread_mutex_lock (mutex=0x5639598987e0) at ../nptl/pthread_mutex_lock.c:80
#2  0x000056394b820921 in __gthread_mutex_lock (__mutex=0x5639598987e0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x5639598987e0) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5639598987c8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c93eac0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c93eab8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c93eab8) at /usr/include/c++/9/thread:251
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c93eab0) at /usr/include/c++/9/thread:195
#12 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#14 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f44b0a9a700 (LWP 40399)):
#0  __lll_lock_wait (futex=futex@entry=0x5639598c6150, private=0) at lowlevellock.c:52
#1  0x00007f44b101a0a3 in __GI___pthread_mutex_lock (mutex=0x5639598c6150) at ../nptl/pthread_mutex_lock.c:80
#2  0x000056394b820921 in __gthread_mutex_lock (__mutex=0x5639598c6150) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x5639598c6150) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5639598c6138) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394ca07f80) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394ca07f78) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394ca07f78) at /usr/include/c++/9/thread:251
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394ca07f70) at /usr/include/c++/9/thread:195
#12 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#14 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f44af297700 (LWP 40398)):
#0  0x00007f44b1019ff3 in __GI___pthread_mutex_lock (mutex=0x5639598287a0) at ../nptl/pthread_mutex_lock.c:80
#1  0x000056394b820921 in __gthread_mutex_lock (__mutex=0x5639598287a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#2  std::mutex::lock (this=0x5639598287a0) at /usr/include/c++/9/bits/std_mutex.h:100
#3  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#4  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x563959828788) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#5  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394caeb9f0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#6  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#7  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394caeb9e8) at /usr/include/c++/9/thread:244
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394caeb9e8) at /usr/include/c++/9/thread:251
#10 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394caeb9e0) at /usr/include/c++/9/thread:195
#11 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#12 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#13 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f44aea96700 (LWP 40397)):
#0  0x00007f44b0ed7c10 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b81d0af in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4498007e94 "", __beg=0x7f4498007e50 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251844", this=0x7f44aea95e70) at /usr/include/c++/9/bits/char_traits.h:363
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f4498007e94 "", __beg=0x7f4498007e50 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251844", this=0x7f44aea95e70) at /usr/include/c++/9/bits/basic_string.h:247
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4498007e94 "", __beg=0x7f4498007e50 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251844", this=0x7f44aea95e70) at /usr/include/c++/9/bits/basic_string.h:266
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x7f44aea95e70) at /usr/include/c++/9/bits/basic_string.h:451
#5  PageId::PageId (this=0x7f44aea95e70) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  Page::getId (this=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:33
#7  0x000056394b820906 in MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394cacbd00) at /usr/include/c++/9/bits/unordered_map.h:984
#8  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394cacbcf8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394cacbcf8) at /usr/include/c++/9/thread:251
#12 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394cacbcf0) at /usr/include/c++/9/thread:195
#13 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#14 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#15 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f44ae295700 (LWP 40396)):
#0  0x000056394b820a03 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (this=0x7f44a91cbff0, __capacity=68) at /usr/include/c++/9/bits/basic_string.h:210
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4498000bf4 "", __beg=0x7f4498000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251838", this=0x7f44a91cbff0) at /usr/include/c++/9/bits/basic_string.tcc:220
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f4498000bf4 "", __beg=0x7f4498000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251838", this=0x7f44a91cbff0) at /usr/include/c++/9/bits/basic_string.h:247
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f4498000bf4 "", __beg=0x7f4498000bb0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251838", this=0x7f44a91cbff0) at /usr/include/c++/9/bits/basic_string.h:266
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251838", this=0x7f44a91cbff0) at /usr/include/c++/9/bits/basic_string.h:451
#5  PageId::PageId (this=0x7f44a91cbff0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5639598c6138, __p=0x7f44a91cbff0) at /usr/include/c++/9/ext/new_allocator.h:147
#7  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f44a91cbff0) at /usr/include/c++/9/bits/alloc_traits.h:484
#8  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5639598c6138) at /usr/include/c++/9/bits/stl_vector.h:1189
#9  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5639598c6138) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#10 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c73b9b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#11 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#12 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c73b9a8) at /usr/include/c++/9/thread:244
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c73b9a8) at /usr/include/c++/9/thread:251
#15 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c73b9a0) at /usr/include/c++/9/thread:195
#16 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#17 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#18 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f44ada94700 (LWP 40395)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251841", this=0x7f44a93dadb0) at /usr/include/c++/9/ext/new_allocator.h:89
#1  PageId::PageId (this=0x7f44a93dadb0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#2  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5639598837e8, __p=0x7f44a93dadb0) at /usr/include/c++/9/ext/new_allocator.h:147
#3  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f44a93dadb0) at /usr/include/c++/9/bits/alloc_traits.h:484
#4  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5639598837e8) at /usr/include/c++/9/bits/stl_vector.h:1189
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5639598837e8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x56394c0ce000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56394c0cdff8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56394c0cdff8) at /usr/include/c++/9/thread:251
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x56394c0cdff0) at /usr/include/c++/9/thread:195
#12 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#14 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __pthread_clockjoin_ex (threadid=139932948055808, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007f44b0f03fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x000056394b820f30 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdec1b47f0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[New LWP 40431]
[New LWP 40432]
[New LWP 40433]
[New LWP 40434]
[New LWP 40435]
[New LWP 40436]
[New LWP 40437]
[New LWP 40438]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=139932939663104, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7f44ada94700 (LWP 40438)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725399") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5639599583d0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5639599583c8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5639599583c8) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ada93e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959958390, __f=<optimized out>, __did_set=0x7f44ada93e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x5639599583a8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x5639599583a8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ada93e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959958390) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394bf94978) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394bf94978) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394bf94970) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f44ae295700 (LWP 40437)):
#0  __memcmp_avx2_movbe () at ../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:71
#1  0x000056394b82559a in std::char_traits<char>::compare (__n=<optimized out>, __s2=<optimized out>, __s1=<optimized out>) at /usr/include/c++/9/bits/char_traits.h:325
#2  std::operator==<char> (__rhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251204", __lhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251204") at /usr/include/c++/9/bits/basic_string.h:6152
#3  PageId::operator== (other=..., this=0x7f448961d880) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:15
#4  std::equal_to<PageId>::operator() (this=0x7ffdec1b4810, __y=..., __x=...) at /usr/include/c++/9/bits/stl_function.h:356
#5  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=0x563959935600, __c=4849755008721347193, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1450
#6  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=0x7ffdec1b4810, __n=0x563959935600, __c=4849755008721347193, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1834
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=4849755008721347193, __k=..., __n=1259, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable.h:1545
#8  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=4849755008721347193, __key=..., __bkt=1259, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable.h:655
#9  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:697
#10 std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#11 MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x563959958200) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#12 std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5639599581f8) at /usr/include/c++/9/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5639599581f8) at /usr/include/c++/9/thread:251
#16 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ae294e70) at /usr/include/c++/9/future:1339
#17 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#18 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#19 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5639599581c0, __f=<optimized out>, __did_set=0x7f44ae294e27) at /usr/include/c++/9/future:561
#20 0x00007f44b102047f in __pthread_once_slow (once_control=0x5639599581d8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#21 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x5639599581d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#22 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ae294e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#23 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5639599581c0) at /usr/include/c++/9/future:401
#24 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#25 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#26 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#27 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c057978) at /usr/include/c++/9/thread:244
#28 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c057978) at /usr/include/c++/9/thread:251
#29 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c057970) at /usr/include/c++/9/thread:195
#30 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#31 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#32 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f44aea96700 (LWP 40436)):
#0  0x000056394b825559 in MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x563959958030) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:122
#1  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#2  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#3  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959958028) at /usr/include/c++/9/thread:244
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959958028) at /usr/include/c++/9/thread:251
#5  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44aea95e70) at /usr/include/c++/9/future:1339
#6  0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#7  0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#8  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957ff0, __f=<optimized out>, __did_set=0x7f44aea95e27) at /usr/include/c++/9/future:561
#9  0x00007f44b102047f in __pthread_once_slow (once_control=0x563959958008, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#10 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959958008) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#11 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44aea95e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#12 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957ff0) at /usr/include/c++/9/future:401
#13 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#14 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#15 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c0b0268) at /usr/include/c++/9/thread:244
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c0b0268) at /usr/include/c++/9/thread:251
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c0b0260) at /usr/include/c++/9/thread:195
#19 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#21 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f44af297700 (LWP 40435)):
#0  0x000056394b825449 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=<optimized out>, __k=..., __n=<optimized out>, this=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:1388
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=<optimized out>, __key=..., __bkt=<optimized out>, this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#4  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x563959957e60) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#5  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957e58) at /usr/include/c++/9/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957e58) at /usr/include/c++/9/thread:251
#9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44af296e70) at /usr/include/c++/9/future:1339
#10 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#11 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957e20, __f=<optimized out>, __did_set=0x7f44af296e27) at /usr/include/c++/9/future:561
#13 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957e38, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#14 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957e38) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#15 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44af296e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#16 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957e20) at /usr/include/c++/9/future:401
#17 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#18 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#19 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394bfbe268) at /usr/include/c++/9/thread:244
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394bfbe268) at /usr/include/c++/9/thread:251
#22 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394bfbe260) at /usr/include/c++/9/thread:195
#23 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#24 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#25 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f44b0a9a700 (LWP 40434)):
#0  __memcmp_avx2_movbe () at ../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:363
#1  0x000056394b82559a in std::char_traits<char>::compare (__n=<optimized out>, __s2=<optimized out>, __s1=<optimized out>) at /usr/include/c++/9/bits/char_traits.h:325
#2  std::operator==<char> (__rhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725103", __lhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725103") at /usr/include/c++/9/bits/basic_string.h:6152
#3  PageId::operator== (other=..., this=0x7f449536c610) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:15
#4  std::equal_to<PageId>::operator() (this=0x7ffdec1b4810, __y=..., __x=...) at /usr/include/c++/9/bits/stl_function.h:356
#5  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=0x563959901710, __c=1018007051484618547, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1450
#6  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=0x7ffdec1b4810, __n=0x563959901710, __c=1018007051484618547, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1834
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=1018007051484618547, __k=..., __n=1826, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable.h:1545
#8  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=1018007051484618547, __key=..., __bkt=1826, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable.h:655
#9  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:697
#10 std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#11 MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x563959957dc0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#12 std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957db8) at /usr/include/c++/9/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957db8) at /usr/include/c++/9/thread:251
#16 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44b0a99e70) at /usr/include/c++/9/future:1339
#17 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#18 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#19 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957d80, __f=<optimized out>, __did_set=0x7f44b0a99e27) at /usr/include/c++/9/future:561
#20 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957d98, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#21 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957d98) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#22 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44b0a99e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#23 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957d80) at /usr/include/c++/9/future:401
#24 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#25 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#26 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#27 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c180038) at /usr/include/c++/9/thread:244
#28 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c180038) at /usr/include/c++/9/thread:251
#29 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c180030) at /usr/include/c++/9/thread:195
#30 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#31 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#32 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f44b0299700 (LWP 40433)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251878") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x563959957cd0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957cc8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957cc8) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44b0298e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957c90, __f=<optimized out>, __did_set=0x7f44b0298e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957ca8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957ca8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44b0298e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957c90) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c054208) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c054208) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c054200) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f44afa98700 (LWP 40432)):
#0  0x00007f44b0ed7ae2 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725632") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x563959957c30) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957c28) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957c28) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44afa97e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957bf0, __f=<optimized out>, __did_set=0x7f44afa97e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957c08, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957c08) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44afa97e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957bf0) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c074408) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c074408) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c074400) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f44ad293700 (LWP 40431)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251038") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x563959957b90) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957b88) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957b88) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ad292e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957b50, __f=<optimized out>, __did_set=0x7f44ad292e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957b68, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957b68) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ad292e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957b50) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394bf917c8) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394bf917c8) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394bf917c0) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __pthread_clockjoin_ex (threadid=139932939663104, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007f44b0f03fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957b78, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056394b81b59f in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdec1b46d0: (void (std::thread::*)(std::thread * const)) 0x7f44b0f03fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x000056394b821726 in std::__future_base::_State_baseV2::wait (this=0x563959957b50) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x56394bf67fc0) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x56394bf67fc0) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=2, alpha=0.84999999999999998, dangleSum=0.0010752677548920629, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements = {...}, pageHashMap=std::unordered_map with 2000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[New LWP 40453]
[New LWP 40454]
[New LWP 40455]
[New LWP 40456]
[New LWP 40457]
[New LWP 40458]
[New LWP 40459]
[New LWP 40460]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=139932939663104, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7f44ada94700 (LWP 40460)):
#0  0x00007f44b0ed7af0 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725391") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5639599583d0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5639599583c8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5639599583c8) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ada93e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959958390, __f=<optimized out>, __did_set=0x7f44ada93e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x5639599583a8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x5639599583a8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ada93e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959958390) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c212a88) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c212a88) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c212a80) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f44ae295700 (LWP 40459)):
#0  0x000056394b825449 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=<optimized out>, __k=..., __n=<optimized out>, this=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:1388
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=<optimized out>, __key=..., __bkt=<optimized out>, this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#4  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x563959958200) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#5  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5639599581f8) at /usr/include/c++/9/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5639599581f8) at /usr/include/c++/9/thread:251
#9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ae294e70) at /usr/include/c++/9/future:1339
#10 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#11 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5639599581c0, __f=<optimized out>, __did_set=0x7f44ae294e27) at /usr/include/c++/9/future:561
#13 0x00007f44b102047f in __pthread_once_slow (once_control=0x5639599581d8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#14 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x5639599581d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#15 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ae294e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#16 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5639599581c0) at /usr/include/c++/9/future:401
#17 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#18 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#19 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c180038) at /usr/include/c++/9/thread:244
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c180038) at /usr/include/c++/9/thread:251
#22 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c180030) at /usr/include/c++/9/thread:195
#23 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#24 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#25 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f44aea96700 (LWP 40458)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725189") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x563959958030) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959958028) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959958028) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44aea95e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957ff0, __f=<optimized out>, __did_set=0x7f44aea95e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959958008, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959958008) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44aea95e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957ff0) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c054208) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c054208) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c054200) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f44af297700 (LWP 40457)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251050") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x563959957e60) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957e58) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957e58) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44af296e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957e20, __f=<optimized out>, __did_set=0x7f44af296e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957e38, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957e38) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44af296e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957e20) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394bf94978) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394bf94978) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394bf94970) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f44b0a9a700 (LWP 40456)):
#0  0x000056394b825471 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=1216187341272716386, __k=..., __n=415, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:1829
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=1216187341272716386, __key=..., __bkt=415, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#4  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x563959957dc0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#5  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957db8) at /usr/include/c++/9/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957db8) at /usr/include/c++/9/thread:251
#9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44b0a99e70) at /usr/include/c++/9/future:1339
#10 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#11 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957d80, __f=<optimized out>, __did_set=0x7f44b0a99e27) at /usr/include/c++/9/future:561
#13 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957d98, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#14 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957d98) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#15 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44b0a99e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#16 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957d80) at /usr/include/c++/9/future:401
#17 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#18 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#19 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c057978) at /usr/include/c++/9/thread:244
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c057978) at /usr/include/c++/9/thread:251
#22 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c057970) at /usr/include/c++/9/thread:195
#23 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#24 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#25 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f44b0299700 (LWP 40455)):
#0  0x00007f44b0ed7b09 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251206") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x563959957cd0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957cc8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957cc8) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44b0298e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957c90, __f=<optimized out>, __did_set=0x7f44b0298e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957ca8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957ca8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44b0298e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957c90) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c0b0268) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c0b0268) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c0b0260) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f44afa98700 (LWP 40454)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725802") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x563959957c30) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957c28) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957c28) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44afa97e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957bf0, __f=<optimized out>, __did_set=0x7f44afa97e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957c08, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957c08) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44afa97e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957bf0) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394bfbe268) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394bfbe268) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394bfbe260) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f44ad293700 (LWP 40453)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251655") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x563959957b90) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957b88) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957b88) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ad292e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957b50, __f=<optimized out>, __did_set=0x7f44ad292e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957b68, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957b68) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ad292e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957b50) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c074408) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c074408) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c074400) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __pthread_clockjoin_ex (threadid=139932939663104, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007f44b0f03fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957b78, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056394b81b59f in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdec1b46d0: (void (std::thread::*)(std::thread * const)) 0x7f44b0f03fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x000056394b821726 in std::__future_base::_State_baseV2::wait (this=0x563959957b50) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x56394bf67fc0) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x56394bf67fc0) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=4, alpha=0.84999999999999998, dangleSum=0.0010754681001535731, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements = {...}, pageHashMap=std::unordered_map with 2000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[New LWP 40466]
[New LWP 40467]
[New LWP 40468]
[New LWP 40471]
[New LWP 40473]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=139932948055808, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 6 (Thread 0x7f44ad293700 (LWP 40473)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251751") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5639599583d0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5639599583c8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5639599583c8) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ad292e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959958390, __f=<optimized out>, __did_set=0x7f44ad292e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x5639599583a8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x5639599583a8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ad292e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959958390) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c074408) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c074408) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c074400) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f44b0299700 (LWP 40471)):
#0  0x000056394b82545d in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=16581168247033513353, __k=..., __n=567, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable.h:1532
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=16581168247033513353, __key=..., __bkt=567, this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable.h:655
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:697
#3  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#4  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x563959957c30) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#5  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957c28) at /usr/include/c++/9/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957c28) at /usr/include/c++/9/thread:251
#9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44b0298e70) at /usr/include/c++/9/future:1339
#10 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#11 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957bf0, __f=<optimized out>, __did_set=0x7f44b0298e27) at /usr/include/c++/9/future:561
#13 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957c08, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#14 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957c08) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#15 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44b0298e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#16 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957bf0) at /usr/include/c++/9/future:401
#17 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#18 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#19 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c1bb7d8) at /usr/include/c++/9/thread:244
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c1bb7d8) at /usr/include/c++/9/thread:251
#22 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c1bb7d0) at /usr/include/c++/9/thread:195
#23 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#24 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#25 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f44aea96700 (LWP 40468)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251867") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x563959957e60) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959957e58) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959957e58) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44aea95e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957e20, __f=<optimized out>, __did_set=0x7f44aea95e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959957e38, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959957e38) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44aea95e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957e20) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c267ed8) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c267ed8) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c267ed0) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f44ae295700 (LWP 40467)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251767") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x563959958030) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x563959958028) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x563959958028) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ae294e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x563959957ff0, __f=<optimized out>, __did_set=0x7f44ae294e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x563959958008, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x563959958008) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ae294e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x563959957ff0) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c2bcb68) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c2bcb68) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c2bcb60) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f44ada94700 (LWP 40466)):
#0  0x00007f44b0ed7af3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056394b82543b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725961") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffdec1b4810, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdec1b4810, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/hashtable_policy.h:695
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdec1b4810) at /usr/include/c++/9/bits/unordered_map.h:985
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x563959958200) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5639599581f8) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5639599581f8) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f44ada93e70) at /usr/include/c++/9/future:1339
#13 0x000056394b825745 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056394b81b64d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5639599581c0, __f=<optimized out>, __did_set=0x7f44ada93e27) at /usr/include/c++/9/future:561
#16 0x00007f44b102047f in __pthread_once_slow (once_control=0x5639599581d8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056394b81ca95 in __gthread_once (__func=<optimized out>, __once=0x5639599581d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f44ada93e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56394b81b620 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5639599581c0) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56394c1aff58) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56394c1aff58) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56394c1aff50) at /usr/include/c++/9/thread:195
#26 0x00007f44b0f03d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f44b1017609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007f44b0d42293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  __pthread_clockjoin_ex (threadid=139932948055808, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007f44b0f03fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f44b102047f in __pthread_once_slow (once_control=0x5639599581e8, init_routine=0x7f44b0f02b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056394b81b59f in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdec1b46d0: (void (std::thread::*)(std::thread * const)) 0x7f44b0f03fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x000056394b821726 in std::__future_base::_State_baseV2::wait (this=0x5639599581c0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x56394bf67fc0) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x56394bf67fc0) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=5, alpha=0.84999999999999998, dangleSum=0.0010754676695330771, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements = {...}, pageHashMap=std::unordered_map with 2000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cb9a7a in _int_free (av=0x7f449c000020, p=0x7f449c7d5930, have_lock=0) at malloc.c:4231

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cb9a7a in _int_free (av=0x7f449c000020, p=0x7f449c7d5930, have_lock=0) at malloc.c:4231
#1  0x000056394b81d31a in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f4499542560, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f4499542560) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f4499542560) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f4499542560, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f4499542560, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f4499542560) at /usr/include/c++/9/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f4499542560) at /usr/include/c++/9/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f4499548660, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x56395988dc48, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x56395988dc48, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x56395988dc28, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x56395988dc28) at /usr/include/c++/9/ext/new_allocator.h:153
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x56395988dc28) at /usr/include/c++/9/bits/alloc_traits.h:497
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x56395988dc20) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x56395985a5b0) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#20 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cb9a7a in _int_free (av=0x7f4490000020, p=0x7f44906f10e0, have_lock=0) at malloc.c:4231

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cb9a7a in _int_free (av=0x7f4490000020, p=0x7f44906f10e0, have_lock=0) at malloc.c:4231
#1  0x000056394b81d31a in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f448d42fec0, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f448d42fec0) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f448d42fec0) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f448d42fec0, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f448d42fec0, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f448d42fec0) at /usr/include/c++/9/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f448d42fec0) at /usr/include/c++/9/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f448d430940, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5639598fad78, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5639598fad78, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5639598fad58, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5639598fad58) at /usr/include/c++/9/ext/new_allocator.h:153
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5639598fad58) at /usr/include/c++/9/bits/alloc_traits.h:497
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5639598fad50) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5639598ddfd0) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#20 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cbd874 in __GI___libc_free (mem=0x7f44920224c0) at malloc.c:3102

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cbd874 in __GI___libc_free (mem=0x7f44920224c0) at malloc.c:3102
#1  0x000056394b81d31a in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f44890571e0, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f44890571e0) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f44890571e0) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f44890571e0, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f44890571e0, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f44890571e0) at /usr/include/c++/9/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f44890571e0) at /usr/include/c++/9/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f4489058280, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x56395979c428, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x56395979c428, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x56395979c408, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x56395979c408) at /usr/include/c++/9/ext/new_allocator.h:153
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x56395979c408) at /usr/include/c++/9/bits/alloc_traits.h:497
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x56395979c400) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x563959829530) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#20 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cb9a7a in _int_free (av=0x7f449c000020, p=0x7f449d8d7bd0, have_lock=0) at malloc.c:4231

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cb9a7a in _int_free (av=0x7f449c000020, p=0x7f449d8d7bd0, have_lock=0) at malloc.c:4231
#1  0x000056394b81d31a in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f44891292d0, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f44891292d0) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f44891292d0) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f44891292d0, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f44891292d0, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f44891292d0) at /usr/include/c++/9/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f44891292d0) at /usr/include/c++/9/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f448912c510, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5639597edca8, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5639597edca8, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5639597edc88, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5639597edc88) at /usr/include/c++/9/ext/new_allocator.h:153
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5639597edc88) at /usr/include/c++/9/bits/alloc_traits.h:497
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5639597edc80) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5639598f5e80) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#20 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cbd874 in __GI___libc_free (mem=0x7f4488612c80) at malloc.c:3102

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cbd874 in __GI___libc_free (mem=0x7f4488612c80) at malloc.c:3102
#1  0x000056394b81d31a in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f44a10e54c0, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f44a10e54c0) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f44a10e54c0) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f44a10e54c0, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f44a10e54c0, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f44a10e54c0) at /usr/include/c++/9/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f44a10e54c0) at /usr/include/c++/9/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f44a10f1ae0, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x56395985a848, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x56395985a848, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x56395985a828, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x56395985a828) at /usr/include/c++/9/ext/new_allocator.h:153
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x56395985a828) at /usr/include/c++/9/bits/alloc_traits.h:497
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x56395985a820) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5639597ef4e0) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#20 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
unlink_chunk (p=p@entry=0x7f448c182b90, av=0x7f448c000020) at malloc.c:1462

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  unlink_chunk (p=p@entry=0x7f448c182b90, av=0x7f448c000020) at malloc.c:1462
#1  0x00007f44b0cb8bfc in malloc_consolidate (av=av@entry=0x7f448c000020) at malloc.c:4494
#2  0x00007f44b0cba160 in _int_free (av=0x7f448c000020, p=0x7f448cff30e0, have_lock=<optimized out>) at malloc.c:4400
#3  0x000056394b81d335 in __gnu_cxx::new_allocator<PageId>::deallocate (this=0x563959891d58, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#4  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#5  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=0x563959891d58, __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:351
#6  std::_Vector_base<PageId, std::allocator<PageId> >::~_Vector_base (this=0x563959891d58, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:332
#7  std::vector<PageId, std::allocator<PageId> >::~vector (this=0x563959891d58, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:680
#8  MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x563959891d58, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#9  std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x563959891d38, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#10 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x563959891d38) at /usr/include/c++/9/ext/new_allocator.h:153
#11 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x563959891d38) at /usr/include/c++/9/bits/alloc_traits.h:497
#12 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x563959891d30) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#13 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5639598f9830) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#14 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#15 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#16 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#17 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#18 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#19 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cb9a7a in _int_free (av=0x7f4488000020, p=0x7f4488e252e0, have_lock=0) at malloc.c:4231

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cb9a7a in _int_free (av=0x7f4488000020, p=0x7f4488e252e0, have_lock=0) at malloc.c:4231
#1  0x000056394b81d31a in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f4498f786d0, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f4498f786d0) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f4498f786d0) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f4498f786d0, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x7f4498f786d0, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f4498f786d0) at /usr/include/c++/9/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f4498f786d0) at /usr/include/c++/9/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f4498f7a150, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x56395988f8b8, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x56395988f8b8, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x56395988f898, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x56395988f898) at /usr/include/c++/9/ext/new_allocator.h:153
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x56395988f898) at /usr/include/c++/9/bits/alloc_traits.h:497
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x56395988f890) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5639598c8400) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#20 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cb8be7 in malloc_consolidate (av=av@entry=0x7f44a0000020) at malloc.c:4492

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cb8be7 in malloc_consolidate (av=av@entry=0x7f44a0000020) at malloc.c:4492
#1  0x00007f44b0cba160 in _int_free (av=0x7f44a0000020, p=0x7f44a118ec80, have_lock=<optimized out>) at malloc.c:4400
#2  0x000056394b81d335 in __gnu_cxx::new_allocator<PageId>::deallocate (this=0x5639598c62d8, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#3  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#4  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=0x5639598c62d8, __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:351
#5  std::_Vector_base<PageId, std::allocator<PageId> >::~_Vector_base (this=0x5639598c62d8, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:332
#6  std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5639598c62d8, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:680
#7  MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5639598c62d8, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#8  std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5639598c62b8, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_pair.h:208
#9  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5639598c62b8) at /usr/include/c++/9/ext/new_allocator.h:153
#10 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5639598c62b8) at /usr/include/c++/9/bits/alloc_traits.h:497
#11 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5639598c62b0) at /usr/include/c++/9/bits/hashtable_policy.h:2102
#12 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5639598c6380) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#13 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdec1b4850) at /usr/include/c++/9/bits/hashtable.h:2028
#14 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#15 0x000056394b821f7d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdec1b4850, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#16 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#17 0x000056394b81a8e1 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#18 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f44b0cb9b09 in _int_free (av=0x7f44b0e0bb80 <main_arena>, p=<optimized out>, have_lock=<optimized out>) at malloc.c:4286

Thread 1 (Thread 0x7f44b0acc740 (LWP 40300)):
#0  0x00007f44b0cb9b09 in _int_free (av=0x7f44b0e0bb80 <main_arena>, p=<optimized out>, have_lock=<optimized out>) at malloc.c:4286
#1  0x000056394b81ad47 in __gnu_cxx::new_allocator<char>::deallocate (this=0x563956605820, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x563956605820) at /usr/include/c++/9/bits/basic_string.h:237
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x563956605820) at /usr/include/c++/9/bits/basic_string.h:232
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x563956605820, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:658
#6  PageId::~PageId (this=0x563956605820, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x563956605820) at /usr/include/c++/9/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x563956605820) at /usr/include/c++/9/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x563956609140, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x7f44b0abebd8, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#12 Page::~Page (this=0x7f44b0abeb90, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:13
#13 std::_Destroy<Page> (__pointer=0x7f44b0abeb90) at /usr/include/c++/9/bits/stl_construct.h:98
#14 std::_Destroy_aux<false>::__destroy<Page*> (__last=<optimized out>, __first=0x7f44b0abeb90) at /usr/include/c++/9/bits/stl_construct.h:108
#15 std::_Destroy<Page*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:137
#16 std::_Destroy<Page*, Page> (__last=0x7f44b0ac9e10, __first=<optimized out>) at /usr/include/c++/9/bits/stl_construct.h:206
#17 std::vector<Page, std::allocator<Page> >::~vector (this=0x7ffdec1b4b10, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:677
#18 Network::~Network (this=0x7ffdec1b4b10, __in_chrg=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/network.hpp:9
#19 pageRankComputationWithNumNodes (num=<optimized out>, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#20 0x000056394b819db4 in main (argc=3, argv=0x7ffdec1b50b8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 40300) detached]
