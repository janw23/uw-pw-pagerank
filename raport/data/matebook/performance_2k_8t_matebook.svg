<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.54%)</title><rect x="718.0" y="453" width="18.2" height="15.0" fill="rgb(231,27,50)" rx="2" ry="2" />
<text  x="721.00" y="463.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join (1 samples, 1.54%)</title><rect x="790.6" y="421" width="18.2" height="15.0" fill="rgb(251,108,28)" rx="2" ry="2" />
<text  x="793.62" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.54%)</title><rect x="972.2" y="405" width="18.1" height="15.0" fill="rgb(209,57,54)" rx="2" ry="2" />
<text  x="975.15" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.54%)</title><rect x="427.5" y="133" width="18.2" height="15.0" fill="rgb(253,2,19)" rx="2" ry="2" />
<text  x="430.54" y="143.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="300.5" y="245" width="36.3" height="15.0" fill="rgb(252,163,4)" rx="2" ry="2" />
<text  x="303.46" y="255.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="1081.1" y="325" width="36.3" height="15.0" fill="rgb(225,30,20)" rx="2" ry="2" />
<text  x="1084.08" y="335.5" >std..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (3 samples, 4.62%)</title><rect x="463.8" y="197" width="54.5" height="15.0" fill="rgb(226,19,41)" rx="2" ry="2" />
<text  x="466.85" y="207.5" >std::..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="336.8" y="261" width="54.4" height="15.0" fill="rgb(232,68,22)" rx="2" ry="2" />
<text  x="339.77" y="271.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.54%)</title><rect x="736.2" y="453" width="18.1" height="15.0" fill="rgb(239,149,26)" rx="2" ry="2" />
<text  x="739.15" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="1081.1" y="357" width="36.3" height="15.0" fill="rgb(225,99,10)" rx="2" ry="2" />
<text  x="1084.08" y="367.5" >std..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (2 samples, 3.08%)</title><rect x="300.5" y="117" width="36.3" height="15.0" fill="rgb(243,203,21)" rx="2" ry="2" />
<text  x="303.46" y="127.5" >std..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (21 samples, 32.31%)</title><rect x="300.5" y="469" width="381.2" height="15.0" fill="rgb(229,138,1)" rx="2" ry="2" />
<text  x="303.46" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;std::__future_base..</text>
</g>
<g >
<title>std::pair&lt;PageId (8 samples, 12.31%)</title><rect x="808.8" y="389" width="145.2" height="15.0" fill="rgb(254,151,35)" rx="2" ry="2" />
<text  x="811.77" y="399.5" >std::pair&lt;PageId</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="391.2" y="133" width="36.3" height="15.0" fill="rgb(227,67,43)" rx="2" ry="2" />
<text  x="394.23" y="143.5" >std..</text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.54%)</title><rect x="972.2" y="341" width="18.1" height="15.0" fill="rgb(232,111,10)" rx="2" ry="2" />
<text  x="975.15" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="627.2" y="325" width="54.5" height="15.0" fill="rgb(246,211,20)" rx="2" ry="2" />
<text  x="630.23" y="335.5" >std::..</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=68) (2 samples, 3.08%)</title><rect x="118.9" y="245" width="36.3" height="15.0" fill="rgb(241,116,47)" rx="2" ry="2" />
<text  x="121.92" y="255.5" >__G..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 1.54%)</title><rect x="572.8" y="69" width="18.1" height="15.0" fill="rgb(210,166,54)" rx="2" ry="2" />
<text  x="575.77" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x563956605820, (1 samples, 1.54%)</title><rect x="1171.8" y="245" width="18.2" height="15.0" fill="rgb(218,187,42)" rx="2" ry="2" />
<text  x="1174.85" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f44891292d0, (1 samples, 1.54%)</title><rect x="826.9" y="197" width="18.2" height="15.0" fill="rgb(246,212,53)" rx="2" ry="2" />
<text  x="829.92" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 9.23%)</title><rect x="82.6" y="325" width="108.9" height="15.0" fill="rgb(253,118,8)" rx="2" ry="2" />
<text  x="85.62" y="335.5" >std::__cxx11:..</text>
</g>
<g >
<title>sysmalloc (1 samples, 1.54%)</title><rect x="137.1" y="213" width="18.1" height="15.0" fill="rgb(205,149,27)" rx="2" ry="2" />
<text  x="140.08" y="223.5" ></text>
</g>
<g >
<title>__vfprintf_internal(s=s@entry=0x7ffdec1b4500, (1 samples, 1.54%)</title><rect x="1026.6" y="405" width="18.2" height="15.0" fill="rgb(254,160,24)" rx="2" ry="2" />
<text  x="1029.62" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.54%)</title><rect x="609.1" y="101" width="18.1" height="15.0" fill="rgb(251,196,23)" rx="2" ry="2" />
<text  x="612.08" y="111.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="736.2" y="421" width="18.1" height="15.0" fill="rgb(254,29,41)" rx="2" ry="2" />
<text  x="739.15" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 1.54%)</title><rect x="1171.8" y="261" width="18.2" height="15.0" fill="rgb(232,45,47)" rx="2" ry="2" />
<text  x="1174.85" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 3.08%)</title><rect x="572.8" y="165" width="36.3" height="15.0" fill="rgb(235,42,8)" rx="2" ry="2" />
<text  x="575.77" y="175.5" >std..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (3 samples, 4.62%)</title><rect x="518.3" y="341" width="54.5" height="15.0" fill="rgb(230,138,42)" rx="2" ry="2" />
<text  x="521.31" y="351.5" >std::..</text>
</g>
<g >
<title>pageRankComputationWithNumNodes (1 samples, 1.54%)</title><rect x="1171.8" y="533" width="18.2" height="15.0" fill="rgb(208,21,17)" rx="2" ry="2" />
<text  x="1174.85" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 1.54%)</title><rect x="972.2" y="485" width="18.1" height="15.0" fill="rgb(245,83,49)" rx="2" ry="2" />
<text  x="975.15" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 1.54%)</title><rect x="427.5" y="69" width="18.2" height="15.0" fill="rgb(228,174,18)" rx="2" ry="2" />
<text  x="430.54" y="79.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (8 samples, 12.31%)</title><rect x="808.8" y="421" width="145.2" height="15.0" fill="rgb(235,57,0)" rx="2" ry="2" />
<text  x="811.77" y="431.5" >std::allocator_tra..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 3.08%)</title><rect x="518.3" y="181" width="36.3" height="15.0" fill="rgb(213,182,12)" rx="2" ry="2" />
<text  x="521.31" y="191.5" >std..</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (1 samples, 1.54%)</title><rect x="64.5" y="389" width="18.1" height="15.0" fill="rgb(236,44,29)" rx="2" ry="2" />
<text  x="67.46" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="990.3" y="453" width="18.2" height="15.0" fill="rgb(244,70,5)" rx="2" ry="2" />
<text  x="993.31" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 3.08%)</title><rect x="427.5" y="229" width="36.3" height="15.0" fill="rgb(249,122,23)" rx="2" ry="2" />
<text  x="430.54" y="239.5" >std..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (2 samples, 3.08%)</title><rect x="917.7" y="309" width="36.3" height="15.0" fill="rgb(211,65,43)" rx="2" ry="2" />
<text  x="920.69" y="319.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 3.08%)</title><rect x="518.3" y="165" width="36.3" height="15.0" fill="rgb(244,171,22)" rx="2" ry="2" />
<text  x="521.31" y="175.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate(this=0x563959891d58, (1 samples, 1.54%)</title><rect x="917.7" y="293" width="18.1" height="15.0" fill="rgb(236,9,39)" rx="2" ry="2" />
<text  x="920.69" y="303.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x563959957b68, (2 samples, 3.08%)</title><rect x="300.5" y="357" width="36.3" height="15.0" fill="rgb(231,203,34)" rx="2" ry="2" />
<text  x="303.46" y="367.5" >__p..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.54%)</title><rect x="736.2" y="437" width="18.1" height="15.0" fill="rgb(222,98,16)" rx="2" ry="2" />
<text  x="739.15" y="447.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::EdgeInfo::push_back (10 samples, 15.38%)</title><rect x="10.0" y="405" width="181.5" height="15.0" fill="rgb(240,9,2)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >MultiThreadedPageRankCo..</text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.54%)</title><rect x="282.3" y="389" width="18.2" height="15.0" fill="rgb(207,144,40)" rx="2" ry="2" />
<text  x="285.31" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (3 samples, 4.62%)</title><rect x="336.8" y="197" width="54.4" height="15.0" fill="rgb(222,50,46)" rx="2" ry="2" />
<text  x="339.77" y="207.5" >std::..</text>
</g>
<g >
<title>Page::Page (1 samples, 1.54%)</title><rect x="990.3" y="469" width="18.2" height="15.0" fill="rgb(231,41,16)" rx="2" ry="2" />
<text  x="993.31" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (6 samples, 9.23%)</title><rect x="808.8" y="341" width="108.9" height="15.0" fill="rgb(206,158,25)" rx="2" ry="2" />
<text  x="811.77" y="351.5" >std::_Destroy..</text>
</g>
<g >
<title>free@plt() (1 samples, 1.54%)</title><rect x="1062.9" y="389" width="18.2" height="15.0" fill="rgb(220,129,54)" rx="2" ry="2" />
<text  x="1065.92" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f44890571e0, (1 samples, 1.54%)</title><rect x="808.8" y="197" width="18.1" height="15.0" fill="rgb(253,7,32)" rx="2" ry="2" />
<text  x="811.77" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId,std::allocator&lt;PageId&gt; (1 samples, 1.54%)</title><rect x="1117.4" y="485" width="18.1" height="15.0" fill="rgb(254,139,20)" rx="2" ry="2" />
<text  x="1120.38" y="495.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="627.2" y="213" width="54.5" height="15.0" fill="rgb(224,141,0)" rx="2" ry="2" />
<text  x="630.23" y="223.5" >Multi..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1135.5" y="437" width="18.2" height="15.0" fill="rgb(210,213,24)" rx="2" ry="2" />
<text  x="1138.54" y="447.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (21 samples, 32.31%)</title><rect x="300.5" y="405" width="381.2" height="15.0" fill="rgb(233,164,50)" rx="2" ry="2" />
<text  x="303.46" y="415.5" >std::__future_base::_State_baseV2::_M_set_result(st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 1.54%)</title><rect x="590.9" y="149" width="18.2" height="15.0" fill="rgb(231,8,2)" rx="2" ry="2" />
<text  x="593.92" y="159.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="336.8" y="213" width="54.4" height="15.0" fill="rgb(252,33,29)" rx="2" ry="2" />
<text  x="339.77" y="223.5" >Multi..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (8 samples, 12.31%)</title><rect x="808.8" y="453" width="145.2" height="15.0" fill="rgb(242,104,15)" rx="2" ry="2" />
<text  x="811.77" y="463.5" >std::__detail::_Ha..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 3.08%)</title><rect x="300.5" y="181" width="36.3" height="15.0" fill="rgb(251,178,38)" rx="2" ry="2" />
<text  x="303.46" y="191.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.54%)</title><rect x="282.3" y="325" width="18.2" height="15.0" fill="rgb(243,76,16)" rx="2" ry="2" />
<text  x="285.31" y="335.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="754.3" y="469" width="54.5" height="15.0" fill="rgb(206,143,9)" rx="2" ry="2" />
<text  x="757.31" y="479.5" >std::..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5639598c6150) (1 samples, 1.54%)</title><rect x="46.3" y="357" width="18.2" height="15.0" fill="rgb(223,220,20)" rx="2" ry="2" />
<text  x="49.31" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="354.9" y="133" width="36.3" height="15.0" fill="rgb(238,128,17)" rx="2" ry="2" />
<text  x="357.92" y="143.5" >std..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="572.8" y="325" width="54.4" height="15.0" fill="rgb(252,119,11)" rx="2" ry="2" />
<text  x="575.77" y="335.5" >std::..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.54%)</title><rect x="1117.4" y="453" width="18.1" height="15.0" fill="rgb(235,80,23)" rx="2" ry="2" />
<text  x="1120.38" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 3.08%)</title><rect x="300.5" y="197" width="36.3" height="15.0" fill="rgb(241,61,7)" rx="2" ry="2" />
<text  x="303.46" y="207.5" >std..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.54%)</title><rect x="1171.8" y="405" width="18.2" height="15.0" fill="rgb(226,139,12)" rx="2" ry="2" />
<text  x="1174.85" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (3 samples, 4.62%)</title><rect x="227.8" y="357" width="54.5" height="15.0" fill="rgb(227,25,24)" rx="2" ry="2" />
<text  x="230.85" y="367.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.54%)</title><rect x="1062.9" y="437" width="18.2" height="15.0" fill="rgb(246,120,8)" rx="2" ry="2" />
<text  x="1065.92" y="447.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="518.3" y="277" width="54.5" height="15.0" fill="rgb(205,53,6)" rx="2" ry="2" />
<text  x="521.31" y="287.5" >std::..</text>
</g>
<g >
<title>_int_free(av=0x7f44a0000020, (1 samples, 1.54%)</title><rect x="209.7" y="309" width="18.1" height="15.0" fill="rgb(215,102,36)" rx="2" ry="2" />
<text  x="212.69" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.54%)</title><rect x="572.8" y="101" width="18.1" height="15.0" fill="rgb(226,52,52)" rx="2" ry="2" />
<text  x="575.77" y="111.5" ></text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (1 samples, 1.54%)</title><rect x="790.6" y="389" width="18.2" height="15.0" fill="rgb(228,26,48)" rx="2" ry="2" />
<text  x="793.62" y="399.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 24.62%)</title><rect x="10.0" y="501" width="290.5" height="15.0" fill="rgb(252,169,42)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >std::thread::_State_impl&lt;std::thread::_..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (2 samples, 3.08%)</title><rect x="482.0" y="117" width="36.3" height="15.0" fill="rgb(246,219,35)" rx="2" ry="2" />
<text  x="485.00" y="127.5" >std..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (1 samples, 1.54%)</title><rect x="1171.8" y="453" width="18.2" height="15.0" fill="rgb(209,161,11)" rx="2" ry="2" />
<text  x="1174.85" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1044.8" y="405" width="18.1" height="15.0" fill="rgb(217,106,41)" rx="2" ry="2" />
<text  x="1047.77" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="518.3" y="229" width="54.5" height="15.0" fill="rgb(212,76,39)" rx="2" ry="2" />
<text  x="521.31" y="239.5" >std::..</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async (1 samples, 1.54%)</title><rect x="790.6" y="437" width="18.2" height="15.0" fill="rgb(239,42,38)" rx="2" ry="2" />
<text  x="793.62" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 1.54%)</title><rect x="1153.7" y="437" width="18.1" height="15.0" fill="rgb(240,55,41)" rx="2" ry="2" />
<text  x="1156.69" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1171.8" y="277" width="18.2" height="15.0" fill="rgb(220,128,15)" rx="2" ry="2" />
<text  x="1174.85" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="1081.1" y="373" width="36.3" height="15.0" fill="rgb(241,173,20)" rx="2" ry="2" />
<text  x="1084.08" y="383.5" >std..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 4.62%)</title><rect x="572.8" y="181" width="54.4" height="15.0" fill="rgb(244,191,17)" rx="2" ry="2" />
<text  x="575.77" y="191.5" >std::..</text>
</g>
<g >
<title>Page::~Page (1 samples, 1.54%)</title><rect x="1135.5" y="501" width="18.2" height="15.0" fill="rgb(216,74,22)" rx="2" ry="2" />
<text  x="1138.54" y="511.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5639598287a0) (1 samples, 1.54%)</title><rect x="10.0" y="357" width="18.2" height="15.0" fill="rgb(235,65,10)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 24.62%)</title><rect x="10.0" y="485" width="290.5" height="15.0" fill="rgb(239,139,31)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiT..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="300.5" y="261" width="36.3" height="15.0" fill="rgb(241,131,31)" rx="2" ry="2" />
<text  x="303.46" y="271.5" >std..</text>
</g>
<g >
<title>std::vector&lt;PageId, (8 samples, 12.31%)</title><rect x="808.8" y="357" width="145.2" height="15.0" fill="rgb(245,76,50)" rx="2" ry="2" />
<text  x="811.77" y="367.5" >std::vector&lt;PageId,</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 1.54%)</title><rect x="718.0" y="437" width="18.2" height="15.0" fill="rgb(223,136,18)" rx="2" ry="2" />
<text  x="721.00" y="447.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 3.08%)</title><rect x="300.5" y="341" width="36.3" height="15.0" fill="rgb(235,222,53)" rx="2" ry="2" />
<text  x="303.46" y="351.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.54%)</title><rect x="572.8" y="133" width="18.1" height="15.0" fill="rgb(222,22,38)" rx="2" ry="2" />
<text  x="575.77" y="143.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (3 samples, 4.62%)</title><rect x="627.2" y="101" width="54.5" height="15.0" fill="rgb(233,87,9)" rx="2" ry="2" />
<text  x="630.23" y="111.5" >std::..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="518.3" y="309" width="54.5" height="15.0" fill="rgb(214,39,8)" rx="2" ry="2" />
<text  x="521.31" y="319.5" >std::..</text>
</g>
<g >
<title>PageIdHash::operator() (3 samples, 4.62%)</title><rect x="627.2" y="149" width="54.5" height="15.0" fill="rgb(254,194,21)" rx="2" ry="2" />
<text  x="630.23" y="159.5" >PageI..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="518.3" y="325" width="54.5" height="15.0" fill="rgb(248,76,19)" rx="2" ry="2" />
<text  x="521.31" y="335.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 3.08%)</title><rect x="354.9" y="165" width="36.3" height="15.0" fill="rgb(245,210,45)" rx="2" ry="2" />
<text  x="357.92" y="175.5" >std..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (2 samples, 3.08%)</title><rect x="518.3" y="101" width="36.3" height="15.0" fill="rgb(251,90,53)" rx="2" ry="2" />
<text  x="521.31" y="111.5" >std..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x563959957b78, (2 samples, 3.08%)</title><rect x="754.3" y="373" width="36.3" height="15.0" fill="rgb(224,152,17)" rx="2" ry="2" />
<text  x="757.31" y="383.5" >__p..</text>
</g>
<g >
<title>Page::getId (1 samples, 1.54%)</title><rect x="282.3" y="405" width="18.2" height="15.0" fill="rgb(254,70,36)" rx="2" ry="2" />
<text  x="285.31" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 3.08%)</title><rect x="718.0" y="469" width="36.3" height="15.0" fill="rgb(237,144,32)" rx="2" ry="2" />
<text  x="721.00" y="479.5" >std..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks (3 samples, 4.62%)</title><rect x="754.3" y="501" width="54.5" height="15.0" fill="rgb(237,61,2)" rx="2" ry="2" />
<text  x="757.31" y="511.5" >Multi..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 1.54%)</title><rect x="1171.8" y="341" width="18.2" height="15.0" fill="rgb(206,166,31)" rx="2" ry="2" />
<text  x="1174.85" y="351.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;,std::unordered_map&lt;PageId, (1 samples, 1.54%)</title><rect x="554.6" y="213" width="18.2" height="15.0" fill="rgb(220,216,34)" rx="2" ry="2" />
<text  x="557.62" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f4488612c80) (1 samples, 1.54%)</title><rect x="899.5" y="181" width="18.2" height="15.0" fill="rgb(228,188,9)" rx="2" ry="2" />
<text  x="902.54" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 1.54%)</title><rect x="1171.8" y="501" width="18.2" height="15.0" fill="rgb(246,117,45)" rx="2" ry="2" />
<text  x="1174.85" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 4.62%)</title><rect x="336.8" y="181" width="54.4" height="15.0" fill="rgb(225,30,7)" rx="2" ry="2" />
<text  x="339.77" y="191.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="990.3" y="373" width="18.2" height="15.0" fill="rgb(238,206,28)" rx="2" ry="2" />
<text  x="993.31" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="518.3" y="133" width="36.3" height="15.0" fill="rgb(223,103,47)" rx="2" ry="2" />
<text  x="521.31" y="143.5" >std..</text>
</g>
<g >
<title>_int_free(av=0x7f449c000020, (1 samples, 1.54%)</title><rect x="881.4" y="181" width="18.1" height="15.0" fill="rgb(235,122,13)" rx="2" ry="2" />
<text  x="884.38" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 3.08%)</title><rect x="427.5" y="165" width="36.3" height="15.0" fill="rgb(206,166,2)" rx="2" ry="2" />
<text  x="430.54" y="175.5" >std..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 3.08%)</title><rect x="300.5" y="229" width="36.3" height="15.0" fill="rgb(234,101,24)" rx="2" ry="2" />
<text  x="303.46" y="239.5" >std..</text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (3 samples, 4.62%)</title><rect x="990.3" y="485" width="54.5" height="15.0" fill="rgb(253,12,31)" rx="2" ry="2" />
<text  x="993.31" y="495.5" >Netwo..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1153.7" y="453" width="18.1" height="15.0" fill="rgb(225,76,51)" rx="2" ry="2" />
<text  x="1156.69" y="463.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5639598287a0) (1 samples, 1.54%)</title><rect x="10.0" y="341" width="18.2" height="15.0" fill="rgb(215,185,40)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="518.3" y="261" width="54.5" height="15.0" fill="rgb(244,180,34)" rx="2" ry="2" />
<text  x="521.31" y="271.5" >std::..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.54%)</title><rect x="572.8" y="149" width="18.1" height="15.0" fill="rgb(251,26,18)" rx="2" ry="2" />
<text  x="575.77" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.54%)</title><rect x="1117.4" y="437" width="18.1" height="15.0" fill="rgb(253,214,26)" rx="2" ry="2" />
<text  x="1120.38" y="447.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="463.8" y="277" width="54.5" height="15.0" fill="rgb(224,38,54)" rx="2" ry="2" />
<text  x="466.85" y="287.5" >std::..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 1.54%)</title><rect x="972.2" y="469" width="18.1" height="15.0" fill="rgb(213,174,49)" rx="2" ry="2" />
<text  x="975.15" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (2 samples, 3.08%)</title><rect x="518.3" y="117" width="36.3" height="15.0" fill="rgb(243,39,22)" rx="2" ry="2" />
<text  x="521.31" y="127.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 1.54%)</title><rect x="1153.7" y="421" width="18.1" height="15.0" fill="rgb(220,1,39)" rx="2" ry="2" />
<text  x="1156.69" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (8 samples, 12.31%)</title><rect x="808.8" y="469" width="145.2" height="15.0" fill="rgb(252,28,19)" rx="2" ry="2" />
<text  x="811.77" y="479.5" >std::_Hashtable&lt;Pa..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="336.8" y="309" width="54.4" height="15.0" fill="rgb(208,183,49)" rx="2" ry="2" />
<text  x="339.77" y="319.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="282.3" y="341" width="18.2" height="15.0" fill="rgb(244,41,54)" rx="2" ry="2" />
<text  x="285.31" y="351.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 1.54%)</title><rect x="28.2" y="325" width="18.1" height="15.0" fill="rgb(238,26,24)" rx="2" ry="2" />
<text  x="31.15" y="335.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (2 samples, 3.08%)</title><rect x="754.3" y="405" width="36.3" height="15.0" fill="rgb(229,227,30)" rx="2" ry="2" />
<text  x="757.31" y="415.5" >std..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (3 samples, 4.62%)</title><rect x="627.2" y="197" width="54.5" height="15.0" fill="rgb(240,201,53)" rx="2" ry="2" />
<text  x="630.23" y="207.5" >std::..</text>
</g>
<g >
<title>clone() (37 samples, 56.92%)</title><rect x="10.0" y="549" width="671.7" height="15.0" fill="rgb(234,61,51)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >clone()</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (3 samples, 4.62%)</title><rect x="463.8" y="341" width="54.5" height="15.0" fill="rgb(248,109,42)" rx="2" ry="2" />
<text  x="466.85" y="351.5" >std::..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f44b0298e70, (1 samples, 1.54%)</title><rect x="209.7" y="325" width="18.1" height="15.0" fill="rgb(230,211,5)" rx="2" ry="2" />
<text  x="212.69" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 4.62%)</title><rect x="627.2" y="165" width="54.5" height="15.0" fill="rgb(205,98,44)" rx="2" ry="2" />
<text  x="630.23" y="175.5" >std::..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x563959958008, (3 samples, 4.62%)</title><rect x="518.3" y="357" width="54.5" height="15.0" fill="rgb(220,172,15)" rx="2" ry="2" />
<text  x="521.31" y="367.5" >__pth..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 3.08%)</title><rect x="300.5" y="165" width="36.3" height="15.0" fill="rgb(228,190,4)" rx="2" ry="2" />
<text  x="303.46" y="175.5" >std..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait(this=0x563959957b50) (2 samples, 3.08%)</title><rect x="754.3" y="453" width="36.3" height="15.0" fill="rgb(205,154,42)" rx="2" ry="2" />
<text  x="757.31" y="463.5" >std..</text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNumWithGeneratedId (5 samples, 7.69%)</title><rect x="990.3" y="501" width="90.8" height="15.0" fill="rgb(242,78,41)" rx="2" ry="2" />
<text  x="993.31" y="511.5" >NetworkGen..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 3.08%)</title><rect x="482.0" y="165" width="36.3" height="15.0" fill="rgb(216,131,53)" rx="2" ry="2" />
<text  x="485.00" y="175.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="282.3" y="357" width="18.2" height="15.0" fill="rgb(207,151,7)" rx="2" ry="2" />
<text  x="285.31" y="367.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (21 samples, 32.31%)</title><rect x="300.5" y="389" width="381.2" height="15.0" fill="rgb(229,195,14)" rx="2" ry="2" />
<text  x="303.46" y="399.5" >std::call_once&lt;void</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 1.54%)</title><rect x="1171.8" y="357" width="18.2" height="15.0" fill="rgb(251,107,1)" rx="2" ry="2" />
<text  x="1174.85" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 9.23%)</title><rect x="808.8" y="229" width="108.9" height="15.0" fill="rgb(225,35,42)" rx="2" ry="2" />
<text  x="811.77" y="239.5" >std::__cxx11:..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (6 samples, 9.23%)</title><rect x="808.8" y="213" width="108.9" height="15.0" fill="rgb(235,151,32)" rx="2" ry="2" />
<text  x="811.77" y="223.5" >std::allocato..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x563959957e38, (3 samples, 4.62%)</title><rect x="463.8" y="357" width="54.5" height="15.0" fill="rgb(217,162,49)" rx="2" ry="2" />
<text  x="466.85" y="367.5" >__pth..</text>
</g>
<g >
<title>__vsnprintf_internal(string=0x7ffdec1b4680 (1 samples, 1.54%)</title><rect x="1026.6" y="421" width="18.2" height="15.0" fill="rgb(228,62,24)" rx="2" ry="2" />
<text  x="1029.62" y="431.5" ></text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (21 samples, 32.31%)</title><rect x="300.5" y="373" width="381.2" height="15.0" fill="rgb(230,114,44)" rx="2" ry="2" />
<text  x="303.46" y="383.5" >__gthread_once(__func=&lt;optimized</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 3.08%)</title><rect x="300.5" y="309" width="36.3" height="15.0" fill="rgb(240,138,24)" rx="2" ry="2" />
<text  x="303.46" y="319.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.54%)</title><rect x="1062.9" y="421" width="18.2" height="15.0" fill="rgb(250,31,22)" rx="2" ry="2" />
<text  x="1065.92" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 3.08%)</title><rect x="427.5" y="325" width="36.3" height="15.0" fill="rgb(238,165,18)" rx="2" ry="2" />
<text  x="430.54" y="335.5" >std..</text>
</g>
<g >
<title>operatornew(unsigned (1 samples, 1.54%)</title><rect x="972.2" y="261" width="18.1" height="15.0" fill="rgb(234,102,30)" rx="2" ry="2" />
<text  x="975.15" y="271.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 3.08%)</title><rect x="354.9" y="149" width="36.3" height="15.0" fill="rgb(247,161,18)" rx="2" ry="2" />
<text  x="357.92" y="159.5" >Pag..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x563959957d98, (2 samples, 3.08%)</title><rect x="427.5" y="357" width="36.3" height="15.0" fill="rgb(242,165,47)" rx="2" ry="2" />
<text  x="430.54" y="367.5" >__p..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (2 samples, 3.08%)</title><rect x="191.5" y="341" width="36.3" height="15.0" fill="rgb(254,140,45)" rx="2" ry="2" />
<text  x="194.54" y="351.5" >std..</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.54%)</title><rect x="1153.7" y="501" width="18.1" height="15.0" fill="rgb(249,70,1)" rx="2" ry="2" />
<text  x="1156.69" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="627.2" y="309" width="54.5" height="15.0" fill="rgb(211,2,10)" rx="2" ry="2" />
<text  x="630.23" y="319.5" >std::..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 3.08%)</title><rect x="391.2" y="309" width="36.3" height="15.0" fill="rgb(251,114,25)" rx="2" ry="2" />
<text  x="394.23" y="319.5" >std..</text>
</g>
<g >
<title>PageId::~PageId (2 samples, 3.08%)</title><rect x="191.5" y="405" width="36.3" height="15.0" fill="rgb(215,208,46)" rx="2" ry="2" />
<text  x="194.54" y="415.5" >Pag..</text>
</g>
<g >
<title>Page::addLink (3 samples, 4.62%)</title><rect x="1081.1" y="501" width="54.4" height="15.0" fill="rgb(240,106,5)" rx="2" ry="2" />
<text  x="1084.08" y="511.5" >Page:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1153.7" y="469" width="18.1" height="15.0" fill="rgb(223,130,13)" rx="2" ry="2" />
<text  x="1156.69" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (6 samples, 9.23%)</title><rect x="808.8" y="293" width="108.9" height="15.0" fill="rgb(239,38,3)" rx="2" ry="2" />
<text  x="811.77" y="303.5" >std::_Destroy..</text>
</g>
<g >
<title>_int_free(av=0x7f448c000020, (1 samples, 1.54%)</title><rect x="917.7" y="277" width="18.1" height="15.0" fill="rgb(246,203,43)" rx="2" ry="2" />
<text  x="920.69" y="287.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (1 samples, 1.54%)</title><rect x="790.6" y="405" width="18.2" height="15.0" fill="rgb(206,209,45)" rx="2" ry="2" />
<text  x="793.62" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="191.5" y="389" width="36.3" height="15.0" fill="rgb(223,120,5)" rx="2" ry="2" />
<text  x="194.54" y="399.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="990.3" y="389" width="18.2" height="15.0" fill="rgb(226,204,16)" rx="2" ry="2" />
<text  x="993.31" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (2 samples, 3.08%)</title><rect x="718.0" y="485" width="36.3" height="15.0" fill="rgb(249,14,28)" rx="2" ry="2" />
<text  x="721.00" y="495.5" >std..</text>
</g>
<g >
<title>std::__relocate_a&lt;PageId*, (1 samples, 1.54%)</title><rect x="1117.4" y="421" width="18.1" height="15.0" fill="rgb(212,136,0)" rx="2" ry="2" />
<text  x="1120.38" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 1.54%)</title><rect x="1135.5" y="421" width="18.2" height="15.0" fill="rgb(252,47,6)" rx="2" ry="2" />
<text  x="1138.54" y="431.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 3.08%)</title><rect x="391.2" y="149" width="36.3" height="15.0" fill="rgb(245,98,28)" rx="2" ry="2" />
<text  x="394.23" y="159.5" >Pag..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f44b0e0bb80 (1 samples, 1.54%)</title><rect x="972.2" y="229" width="18.1" height="15.0" fill="rgb(232,0,36)" rx="2" ry="2" />
<text  x="975.15" y="239.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 1.54%)</title><rect x="572.8" y="85" width="18.1" height="15.0" fill="rgb(248,29,42)" rx="2" ry="2" />
<text  x="575.77" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (6 samples, 9.23%)</title><rect x="82.6" y="389" width="108.9" height="15.0" fill="rgb(237,206,11)" rx="2" ry="2" />
<text  x="85.62" y="399.5" >std::vector&lt;P..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="482.0" y="133" width="36.3" height="15.0" fill="rgb(218,58,30)" rx="2" ry="2" />
<text  x="485.00" y="143.5" >std..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="518.3" y="213" width="36.3" height="15.0" fill="rgb(227,89,12)" rx="2" ry="2" />
<text  x="521.31" y="223.5" >Mul..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.54%)</title><rect x="609.1" y="149" width="18.1" height="15.0" fill="rgb(228,219,10)" rx="2" ry="2" />
<text  x="612.08" y="159.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (2 samples, 3.08%)</title><rect x="354.9" y="101" width="36.3" height="15.0" fill="rgb(226,1,33)" rx="2" ry="2" />
<text  x="357.92" y="111.5" >std..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (2 samples, 3.08%)</title><rect x="391.2" y="117" width="36.3" height="15.0" fill="rgb(222,128,53)" rx="2" ry="2" />
<text  x="394.23" y="127.5" >std..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (3 samples, 4.62%)</title><rect x="336.8" y="341" width="54.4" height="15.0" fill="rgb(244,173,36)" rx="2" ry="2" />
<text  x="339.77" y="351.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1171.8" y="309" width="18.2" height="15.0" fill="rgb(211,84,23)" rx="2" ry="2" />
<text  x="1174.85" y="319.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 3.08%)</title><rect x="391.2" y="293" width="36.3" height="15.0" fill="rgb(214,80,26)" rx="2" ry="2" />
<text  x="394.23" y="303.5" >std..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 1.54%)</title><rect x="1171.8" y="389" width="18.2" height="15.0" fill="rgb(253,13,3)" rx="2" ry="2" />
<text  x="1174.85" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (2 samples, 3.08%)</title><rect x="354.9" y="117" width="36.3" height="15.0" fill="rgb(226,99,24)" rx="2" ry="2" />
<text  x="357.92" y="127.5" >std..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 3.08%)</title><rect x="427.5" y="197" width="36.3" height="15.0" fill="rgb(243,152,54)" rx="2" ry="2" />
<text  x="430.54" y="207.5" >std..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (6 samples, 9.23%)</title><rect x="82.6" y="373" width="108.9" height="15.0" fill="rgb(228,217,0)" rx="2" ry="2" />
<text  x="85.62" y="383.5" >std::allocato..</text>
</g>
<g >
<title>__pthread_clockjoin_ex (2 samples, 3.08%)</title><rect x="754.3" y="341" width="36.3" height="15.0" fill="rgb(241,2,10)" rx="2" ry="2" />
<text  x="757.31" y="351.5" >__p..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.54%)</title><rect x="736.2" y="405" width="18.1" height="15.0" fill="rgb(246,151,14)" rx="2" ry="2" />
<text  x="739.15" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.54%)</title><rect x="609.1" y="165" width="18.1" height="15.0" fill="rgb(231,21,30)" rx="2" ry="2" />
<text  x="612.08" y="175.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(__mutex=0x56395989a380) (1 samples, 1.54%)</title><rect x="64.5" y="357" width="18.1" height="15.0" fill="rgb(230,90,23)" rx="2" ry="2" />
<text  x="67.46" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (6 samples, 9.23%)</title><rect x="82.6" y="357" width="108.9" height="15.0" fill="rgb(236,223,31)" rx="2" ry="2" />
<text  x="85.62" y="367.5" >__gnu_cxx::ne..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="627.2" y="245" width="54.5" height="15.0" fill="rgb(222,165,48)" rx="2" ry="2" />
<text  x="630.23" y="255.5" >std::..</text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.54%)</title><rect x="972.2" y="389" width="18.1" height="15.0" fill="rgb(218,208,47)" rx="2" ry="2" />
<text  x="975.15" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join (2 samples, 3.08%)</title><rect x="754.3" y="421" width="36.3" height="15.0" fill="rgb(206,149,14)" rx="2" ry="2" />
<text  x="757.31" y="431.5" >std..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 1.54%)</title><rect x="1171.8" y="373" width="18.2" height="15.0" fill="rgb(241,2,15)" rx="2" ry="2" />
<text  x="1174.85" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="391.2" y="245" width="36.3" height="15.0" fill="rgb(214,161,19)" rx="2" ry="2" />
<text  x="394.23" y="255.5" >std..</text>
</g>
<g >
<title>all (65 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(222,117,32)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (8 samples, 12.31%)</title><rect x="808.8" y="501" width="145.2" height="15.0" fill="rgb(212,147,10)" rx="2" ry="2" />
<text  x="811.77" y="511.5" >std::unordered_map..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f448d42fec0, (1 samples, 1.54%)</title><rect x="845.1" y="197" width="18.1" height="15.0" fill="rgb(210,136,42)" rx="2" ry="2" />
<text  x="848.08" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (2 samples, 3.08%)</title><rect x="391.2" y="101" width="36.3" height="15.0" fill="rgb(229,154,4)" rx="2" ry="2" />
<text  x="394.23" y="111.5" >std..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (2 samples, 3.08%)</title><rect x="917.7" y="325" width="36.3" height="15.0" fill="rgb(246,185,22)" rx="2" ry="2" />
<text  x="920.69" y="335.5" >std..</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.54%)</title><rect x="427.5" y="101" width="18.2" height="15.0" fill="rgb(238,198,39)" rx="2" ry="2" />
<text  x="430.54" y="111.5" ></text>
</g>
<g >
<title>mprotect() (1 samples, 1.54%)</title><rect x="137.1" y="181" width="18.1" height="15.0" fill="rgb(234,34,40)" rx="2" ry="2" />
<text  x="140.08" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1026.6" y="453" width="18.2" height="15.0" fill="rgb(236,9,43)" rx="2" ry="2" />
<text  x="1029.62" y="463.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 3.08%)</title><rect x="518.3" y="149" width="36.3" height="15.0" fill="rgb(227,126,14)" rx="2" ry="2" />
<text  x="521.31" y="159.5" >Pag..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (3 samples, 4.62%)</title><rect x="627.2" y="133" width="54.5" height="15.0" fill="rgb(223,103,48)" rx="2" ry="2" />
<text  x="630.23" y="143.5" >std::..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="572.8" y="261" width="54.4" height="15.0" fill="rgb(238,129,10)" rx="2" ry="2" />
<text  x="575.77" y="271.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (8 samples, 12.31%)</title><rect x="808.8" y="437" width="145.2" height="15.0" fill="rgb(227,112,17)" rx="2" ry="2" />
<text  x="811.77" y="447.5" >std::__detail::_Ha..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (8 samples, 12.31%)</title><rect x="808.8" y="485" width="145.2" height="15.0" fill="rgb(248,146,5)" rx="2" ry="2" />
<text  x="811.77" y="495.5" >std::_Hashtable&lt;Pa..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="100.8" y="277" width="18.1" height="15.0" fill="rgb(221,224,4)" rx="2" ry="2" />
<text  x="103.77" y="287.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="518.3" y="245" width="54.5" height="15.0" fill="rgb(239,17,31)" rx="2" ry="2" />
<text  x="521.31" y="255.5" >std::..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="336.8" y="245" width="54.4" height="15.0" fill="rgb(224,98,51)" rx="2" ry="2" />
<text  x="339.77" y="255.5" >std::..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.54%)</title><rect x="336.8" y="165" width="18.1" height="15.0" fill="rgb(232,221,32)" rx="2" ry="2" />
<text  x="339.77" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f44a10e54c0, (1 samples, 1.54%)</title><rect x="899.5" y="197" width="18.2" height="15.0" fill="rgb(212,129,37)" rx="2" ry="2" />
<text  x="902.54" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (1 samples, 1.54%)</title><rect x="1171.8" y="437" width="18.2" height="15.0" fill="rgb(234,220,43)" rx="2" ry="2" />
<text  x="1174.85" y="447.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5639598c6150) (1 samples, 1.54%)</title><rect x="46.3" y="341" width="18.2" height="15.0" fill="rgb(251,39,34)" rx="2" ry="2" />
<text  x="49.31" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1135.5" y="453" width="18.2" height="15.0" fill="rgb(226,155,12)" rx="2" ry="2" />
<text  x="1138.54" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="389" width="18.1" height="15.0" fill="rgb(235,25,17)" rx="2" ry="2" />
<text  x="1011.46" y="399.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (1 samples, 1.54%)</title><rect x="1171.8" y="469" width="18.2" height="15.0" fill="rgb(226,34,0)" rx="2" ry="2" />
<text  x="1174.85" y="479.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="572.8" y="213" width="54.4" height="15.0" fill="rgb(233,81,16)" rx="2" ry="2" />
<text  x="575.77" y="223.5" >Multi..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (15 samples, 23.08%)</title><rect x="10.0" y="421" width="272.3" height="15.0" fill="rgb(241,82,38)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >MultiThreadedPageRankComputer::initE..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 3.08%)</title><rect x="391.2" y="325" width="36.3" height="15.0" fill="rgb(217,101,24)" rx="2" ry="2" />
<text  x="394.23" y="335.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="1081.1" y="405" width="36.3" height="15.0" fill="rgb(214,42,9)" rx="2" ry="2" />
<text  x="1084.08" y="415.5" >std..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5639599581d8, (3 samples, 4.62%)</title><rect x="572.8" y="357" width="54.4" height="15.0" fill="rgb(233,58,7)" rx="2" ry="2" />
<text  x="575.77" y="367.5" >__pth..</text>
</g>
<g >
<title>main(argc=3, (28 samples, 43.08%)</title><rect x="681.7" y="549" width="508.3" height="15.0" fill="rgb(214,204,48)" rx="2" ry="2" />
<text  x="684.69" y="559.5" >main(argc=3,</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="437" width="18.1" height="15.0" fill="rgb(229,146,12)" rx="2" ry="2" />
<text  x="1011.46" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.54%)</title><rect x="1062.9" y="405" width="18.2" height="15.0" fill="rgb(206,223,10)" rx="2" ry="2" />
<text  x="1065.92" y="415.5" ></text>
</g>
<g >
<title>PageId::PageId (6 samples, 9.23%)</title><rect x="82.6" y="341" width="108.9" height="15.0" fill="rgb(231,38,17)" rx="2" ry="2" />
<text  x="85.62" y="351.5" >PageId::PageId</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="341" width="18.1" height="15.0" fill="rgb(216,24,35)" rx="2" ry="2" />
<text  x="1011.46" y="351.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="627.2" y="261" width="54.5" height="15.0" fill="rgb(228,116,53)" rx="2" ry="2" />
<text  x="630.23" y="271.5" >std::..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="463.8" y="261" width="54.5" height="15.0" fill="rgb(248,24,19)" rx="2" ry="2" />
<text  x="466.85" y="271.5" >std::..</text>
</g>
<g >
<title>PageId::PageId (2 samples, 3.08%)</title><rect x="1081.1" y="437" width="36.3" height="15.0" fill="rgb(205,28,12)" rx="2" ry="2" />
<text  x="1084.08" y="447.5" >Pag..</text>
</g>
<g >
<title>operatornew(unsigned (4 samples, 6.15%)</title><rect x="118.9" y="261" width="72.6" height="15.0" fill="rgb(250,206,25)" rx="2" ry="2" />
<text  x="121.92" y="271.5" >operator..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 3.08%)</title><rect x="300.5" y="325" width="36.3" height="15.0" fill="rgb(214,2,0)" rx="2" ry="2" />
<text  x="303.46" y="335.5" >std..</text>
</g>
<g >
<title>operatornew(unsigned (1 samples, 1.54%)</title><rect x="282.3" y="309" width="18.2" height="15.0" fill="rgb(220,163,33)" rx="2" ry="2" />
<text  x="285.31" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7ffdec1b48a0, (1 samples, 1.54%)</title><rect x="1135.5" y="405" width="18.2" height="15.0" fill="rgb(230,97,3)" rx="2" ry="2" />
<text  x="1138.54" y="415.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5639598987e0) (1 samples, 1.54%)</title><rect x="28.2" y="357" width="18.1" height="15.0" fill="rgb(241,124,33)" rx="2" ry="2" />
<text  x="31.15" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.54%)</title><rect x="609.1" y="117" width="18.1" height="15.0" fill="rgb(216,56,1)" rx="2" ry="2" />
<text  x="612.08" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 3.08%)</title><rect x="391.2" y="181" width="36.3" height="15.0" fill="rgb(208,102,33)" rx="2" ry="2" />
<text  x="394.23" y="191.5" >std..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (21 samples, 32.31%)</title><rect x="300.5" y="437" width="381.2" height="15.0" fill="rgb(241,203,27)" rx="2" ry="2" />
<text  x="303.46" y="447.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>_int_free(av=0x7f4490000020, (1 samples, 1.54%)</title><rect x="191.5" y="309" width="18.2" height="15.0" fill="rgb(212,5,54)" rx="2" ry="2" />
<text  x="194.54" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 1.54%)</title><rect x="1044.8" y="357" width="18.1" height="15.0" fill="rgb(234,93,12)" rx="2" ry="2" />
<text  x="1047.77" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 1.54%)</title><rect x="972.2" y="453" width="18.1" height="15.0" fill="rgb(219,48,44)" rx="2" ry="2" />
<text  x="975.15" y="463.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f4494000020, (1 samples, 1.54%)</title><rect x="137.1" y="229" width="18.1" height="15.0" fill="rgb(226,169,8)" rx="2" ry="2" />
<text  x="140.08" y="239.5" ></text>
</g>
<g >
<title>std::mutex::lock (3 samples, 4.62%)</title><rect x="10.0" y="373" width="54.5" height="15.0" fill="rgb(247,106,3)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >std::..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f4498f786d0, (1 samples, 1.54%)</title><rect x="863.2" y="197" width="18.2" height="15.0" fill="rgb(242,185,36)" rx="2" ry="2" />
<text  x="866.23" y="207.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (8 samples, 12.31%)</title><rect x="808.8" y="373" width="145.2" height="15.0" fill="rgb(230,188,1)" rx="2" ry="2" />
<text  x="811.77" y="383.5" >MultiThreadedPageR..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.54%)</title><rect x="972.2" y="277" width="18.1" height="15.0" fill="rgb(232,131,27)" rx="2" ry="2" />
<text  x="975.15" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 3.08%)</title><rect x="1081.1" y="293" width="36.3" height="15.0" fill="rgb(225,187,22)" rx="2" ry="2" />
<text  x="1084.08" y="303.5" >__m..</text>
</g>
<g >
<title>Network::addPage (1 samples, 1.54%)</title><rect x="972.2" y="501" width="18.1" height="15.0" fill="rgb(237,170,38)" rx="2" ry="2" />
<text  x="975.15" y="511.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="427.5" y="213" width="36.3" height="15.0" fill="rgb(226,140,42)" rx="2" ry="2" />
<text  x="430.54" y="223.5" >Mul..</text>
</g>
<g >
<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (21 samples, 32.31%)</title><rect x="300.5" y="421" width="381.2" height="15.0" fill="rgb(237,206,4)" rx="2" ry="2" />
<text  x="303.46" y="431.5" >std::__future_base::_Async_state_impl&lt;std::thread::..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 3.08%)</title><rect x="518.3" y="197" width="36.3" height="15.0" fill="rgb(253,197,23)" rx="2" ry="2" />
<text  x="521.31" y="207.5" >std..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (21 samples, 32.31%)</title><rect x="300.5" y="501" width="381.2" height="15.0" fill="rgb(211,139,31)" rx="2" ry="2" />
<text  x="303.46" y="511.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="972.2" y="309" width="18.1" height="15.0" fill="rgb(252,45,16)" rx="2" ry="2" />
<text  x="975.15" y="319.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (3 samples, 4.62%)</title><rect x="10.0" y="389" width="54.5" height="15.0" fill="rgb(209,114,48)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >std::..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::initEdges (4 samples, 6.15%)</title><rect x="681.7" y="501" width="72.6" height="15.0" fill="rgb(250,80,17)" rx="2" ry="2" />
<text  x="684.69" y="511.5" >MultiThr..</text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 1.54%)</title><rect x="972.2" y="357" width="18.1" height="15.0" fill="rgb(240,138,8)" rx="2" ry="2" />
<text  x="975.15" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.54%)</title><rect x="972.2" y="373" width="18.1" height="15.0" fill="rgb(248,103,26)" rx="2" ry="2" />
<text  x="975.15" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 1.54%)</title><rect x="463.8" y="149" width="18.2" height="15.0" fill="rgb(222,217,15)" rx="2" ry="2" />
<text  x="466.85" y="159.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async (2 samples, 3.08%)</title><rect x="754.3" y="437" width="36.3" height="15.0" fill="rgb(231,158,29)" rx="2" ry="2" />
<text  x="757.31" y="447.5" >std..</text>
</g>
<g >
<title>??() (37 samples, 56.92%)</title><rect x="10.0" y="517" width="671.7" height="15.0" fill="rgb(244,112,10)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >??()</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="627.2" y="229" width="54.5" height="15.0" fill="rgb(231,145,14)" rx="2" ry="2" />
<text  x="630.23" y="239.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (4 samples, 6.15%)</title><rect x="118.9" y="277" width="72.6" height="15.0" fill="rgb(243,204,22)" rx="2" ry="2" />
<text  x="121.92" y="287.5" >std::__c..</text>
</g>
<g >
<title>std::__invoke&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (21 samples, 32.31%)</title><rect x="300.5" y="453" width="381.2" height="15.0" fill="rgb(241,127,33)" rx="2" ry="2" />
<text  x="303.46" y="463.5" >std::__invoke&lt;std::__future_base::_Async_state_impl..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (2 samples, 3.08%)</title><rect x="1081.1" y="469" width="36.3" height="15.0" fill="rgb(238,172,29)" rx="2" ry="2" />
<text  x="1084.08" y="479.5" >std..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (3 samples, 4.62%)</title><rect x="572.8" y="197" width="54.4" height="15.0" fill="rgb(208,166,30)" rx="2" ry="2" />
<text  x="575.77" y="207.5" >std::..</text>
</g>
<g >
<title>unlink_chunk (1 samples, 1.54%)</title><rect x="917.7" y="245" width="18.1" height="15.0" fill="rgb(214,210,41)" rx="2" ry="2" />
<text  x="920.69" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="990.3" y="405" width="18.2" height="15.0" fill="rgb(245,21,12)" rx="2" ry="2" />
<text  x="993.31" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="990.3" y="421" width="18.2" height="15.0" fill="rgb(245,187,25)" rx="2" ry="2" />
<text  x="993.31" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc(bytes=68) (1 samples, 1.54%)</title><rect x="972.2" y="245" width="18.1" height="15.0" fill="rgb(212,153,4)" rx="2" ry="2" />
<text  x="975.15" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 3.08%)</title><rect x="1081.1" y="485" width="36.3" height="15.0" fill="rgb(251,156,51)" rx="2" ry="2" />
<text  x="1084.08" y="495.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.54%)</title><rect x="1044.8" y="389" width="18.1" height="15.0" fill="rgb(242,39,21)" rx="2" ry="2" />
<text  x="1047.77" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 4.62%)</title><rect x="227.8" y="373" width="54.5" height="15.0" fill="rgb(206,15,42)" rx="2" ry="2" />
<text  x="230.85" y="383.5" >std::..</text>
</g>
<g >
<title>_int_free(av=0x7f4490000020, (1 samples, 1.54%)</title><rect x="845.1" y="181" width="18.1" height="15.0" fill="rgb(207,142,48)" rx="2" ry="2" />
<text  x="848.08" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.54%)</title><rect x="427.5" y="149" width="18.2" height="15.0" fill="rgb(249,144,30)" rx="2" ry="2" />
<text  x="430.54" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 3.08%)</title><rect x="155.2" y="229" width="36.3" height="15.0" fill="rgb(232,139,30)" rx="2" ry="2" />
<text  x="158.23" y="239.5" >_in..</text>
</g>
<g >
<title>std::__cxx11::to_string(__val=1790) (1 samples, 1.54%)</title><rect x="1008.5" y="469" width="18.1" height="15.0" fill="rgb(249,55,6)" rx="2" ry="2" />
<text  x="1011.46" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (2 samples, 3.08%)</title><rect x="300.5" y="101" width="36.3" height="15.0" fill="rgb(234,156,5)" rx="2" ry="2" />
<text  x="303.46" y="111.5" >std..</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.54%)</title><rect x="1171.8" y="325" width="18.2" height="15.0" fill="rgb(229,111,6)" rx="2" ry="2" />
<text  x="1174.85" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="373" width="18.1" height="15.0" fill="rgb(228,104,44)" rx="2" ry="2" />
<text  x="1011.46" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.54%)</title><rect x="736.2" y="389" width="18.1" height="15.0" fill="rgb(252,35,27)" rx="2" ry="2" />
<text  x="739.15" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 1.54%)</title><rect x="572.8" y="53" width="18.1" height="15.0" fill="rgb(242,24,24)" rx="2" ry="2" />
<text  x="575.77" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 9.23%)</title><rect x="808.8" y="245" width="108.9" height="15.0" fill="rgb(243,150,41)" rx="2" ry="2" />
<text  x="811.77" y="255.5" >std::__cxx11:..</text>
</g>
<g >
<title>Page::Page (1 samples, 1.54%)</title><rect x="972.2" y="437" width="18.1" height="15.0" fill="rgb(225,224,19)" rx="2" ry="2" />
<text  x="975.15" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="453" width="18.1" height="15.0" fill="rgb(246,4,8)" rx="2" ry="2" />
<text  x="1011.46" y="463.5" ></text>
</g>
<g >
<title>SimpleNetworkGenerator::generateNetworkOfSize(this=0x7ffdec1b4dd0, (1 samples, 1.54%)</title><rect x="954.0" y="517" width="18.2" height="15.0" fill="rgb(242,221,47)" rx="2" ry="2" />
<text  x="957.00" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (8 samples, 12.31%)</title><rect x="808.8" y="405" width="145.2" height="15.0" fill="rgb(238,221,15)" rx="2" ry="2" />
<text  x="811.77" y="415.5" >__gnu_cxx::new_all..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1044.8" y="421" width="18.1" height="15.0" fill="rgb(207,61,23)" rx="2" ry="2" />
<text  x="1047.77" y="431.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 1.54%)</title><rect x="427.5" y="85" width="18.2" height="15.0" fill="rgb(215,23,5)" rx="2" ry="2" />
<text  x="430.54" y="95.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 1.54%)</title><rect x="427.5" y="53" width="18.2" height="15.0" fill="rgb(220,160,34)" rx="2" ry="2" />
<text  x="430.54" y="63.5" ></text>
</g>
<g >
<title>start_thread(arg=&lt;optimized (37 samples, 56.92%)</title><rect x="10.0" y="533" width="671.7" height="15.0" fill="rgb(213,193,33)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >start_thread(arg=&lt;optimized</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="391.2" y="261" width="36.3" height="15.0" fill="rgb(229,199,4)" rx="2" ry="2" />
<text  x="394.23" y="271.5" >std..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (6 samples, 9.23%)</title><rect x="808.8" y="309" width="108.9" height="15.0" fill="rgb(223,220,19)" rx="2" ry="2" />
<text  x="811.77" y="319.5" >std::_Destroy..</text>
</g>
<g >
<title>_int_free(av=0x7f44b0e0bb80 (1 samples, 1.54%)</title><rect x="1171.8" y="229" width="18.2" height="15.0" fill="rgb(212,43,3)" rx="2" ry="2" />
<text  x="1174.85" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="1081.1" y="341" width="36.3" height="15.0" fill="rgb(222,194,19)" rx="2" ry="2" />
<text  x="1084.08" y="351.5" >std..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (21 samples, 32.31%)</title><rect x="300.5" y="485" width="381.2" height="15.0" fill="rgb(223,98,0)" rx="2" ry="2" />
<text  x="303.46" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;std::__future_base..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 3.08%)</title><rect x="391.2" y="165" width="36.3" height="15.0" fill="rgb(212,134,9)" rx="2" ry="2" />
<text  x="394.23" y="175.5" >std..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="336.8" y="325" width="54.4" height="15.0" fill="rgb(224,27,41)" rx="2" ry="2" />
<text  x="339.77" y="335.5" >std::..</text>
</g>
<g >
<title>Network::~Network (1 samples, 1.54%)</title><rect x="1171.8" y="517" width="18.2" height="15.0" fill="rgb(230,79,26)" rx="2" ry="2" />
<text  x="1174.85" y="527.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="300.5" y="277" width="36.3" height="15.0" fill="rgb(244,17,21)" rx="2" ry="2" />
<text  x="303.46" y="287.5" >std..</text>
</g>
<g >
<title>std::future&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="754.3" y="485" width="54.5" height="15.0" fill="rgb(241,168,26)" rx="2" ry="2" />
<text  x="757.31" y="495.5" >std::..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (2 samples, 3.08%)</title><rect x="917.7" y="341" width="36.3" height="15.0" fill="rgb(213,57,0)" rx="2" ry="2" />
<text  x="920.69" y="351.5" >std..</text>
</g>
<g >
<title>_int_free(av=0x7f4488000020, (1 samples, 1.54%)</title><rect x="863.2" y="181" width="18.2" height="15.0" fill="rgb(234,164,42)" rx="2" ry="2" />
<text  x="866.23" y="191.5" ></text>
</g>
<g >
<title>operatornew(unsigned (1 samples, 1.54%)</title><rect x="1044.8" y="373" width="18.1" height="15.0" fill="rgb(254,0,17)" rx="2" ry="2" />
<text  x="1047.77" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 9.23%)</title><rect x="808.8" y="261" width="108.9" height="15.0" fill="rgb(245,202,19)" rx="2" ry="2" />
<text  x="811.77" y="271.5" >std::__cxx11:..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(__n=4, (1 samples, 1.54%)</title><rect x="1008.5" y="325" width="18.1" height="15.0" fill="rgb(214,165,18)" rx="2" ry="2" />
<text  x="1011.46" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (3 samples, 4.62%)</title><rect x="227.8" y="405" width="54.5" height="15.0" fill="rgb(246,215,48)" rx="2" ry="2" />
<text  x="230.85" y="415.5" >std::..</text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 1.54%)</title><rect x="46.3" y="325" width="18.2" height="15.0" fill="rgb(239,37,10)" rx="2" ry="2" />
<text  x="49.31" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="191.5" y="357" width="36.3" height="15.0" fill="rgb(250,137,33)" rx="2" ry="2" />
<text  x="194.54" y="367.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="191.5" y="373" width="36.3" height="15.0" fill="rgb(233,102,36)" rx="2" ry="2" />
<text  x="194.54" y="383.5" >std..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="300.5" y="213" width="36.3" height="15.0" fill="rgb(209,44,5)" rx="2" ry="2" />
<text  x="303.46" y="223.5" >Mul..</text>
</g>
<g >
<title>Page::~Page (1 samples, 1.54%)</title><rect x="1171.8" y="421" width="18.2" height="15.0" fill="rgb(214,197,11)" rx="2" ry="2" />
<text  x="1174.85" y="431.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;PageId*, (1 samples, 1.54%)</title><rect x="1117.4" y="405" width="18.1" height="15.0" fill="rgb(227,43,34)" rx="2" ry="2" />
<text  x="1120.38" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1171.8" y="293" width="18.2" height="15.0" fill="rgb(232,177,38)" rx="2" ry="2" />
<text  x="1174.85" y="303.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1 samples, 1.54%)</title><rect x="64.5" y="341" width="18.1" height="15.0" fill="rgb(214,157,4)" rx="2" ry="2" />
<text  x="67.46" y="351.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.54%)</title><rect x="1135.5" y="485" width="18.2" height="15.0" fill="rgb(209,16,51)" rx="2" ry="2" />
<text  x="1138.54" y="495.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="427.5" y="277" width="36.3" height="15.0" fill="rgb(237,58,45)" rx="2" ry="2" />
<text  x="430.54" y="287.5" >std..</text>
</g>
<g >
<title>malloc_consolidate(av=av@entry=0x7f44a0000020) (1 samples, 1.54%)</title><rect x="935.8" y="261" width="18.2" height="15.0" fill="rgb(214,15,6)" rx="2" ry="2" />
<text  x="938.85" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.54%)</title><rect x="1117.4" y="469" width="18.1" height="15.0" fill="rgb(236,226,17)" rx="2" ry="2" />
<text  x="1120.38" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 1.54%)</title><rect x="445.7" y="149" width="18.1" height="15.0" fill="rgb(240,55,3)" rx="2" ry="2" />
<text  x="448.69" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 1.54%)</title><rect x="572.8" y="117" width="18.1" height="15.0" fill="rgb(226,73,51)" rx="2" ry="2" />
<text  x="575.77" y="127.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 1.54%)</title><rect x="427.5" y="37" width="18.2" height="15.0" fill="rgb(241,197,28)" rx="2" ry="2" />
<text  x="430.54" y="47.5" ></text>
</g>
<g >
<title>PageId::~PageId (6 samples, 9.23%)</title><rect x="808.8" y="277" width="108.9" height="15.0" fill="rgb(222,133,41)" rx="2" ry="2" />
<text  x="811.77" y="287.5" >PageId::~PageId</text>
</g>
<g >
<title>std::thread::join()() (2 samples, 3.08%)</title><rect x="681.7" y="469" width="36.3" height="15.0" fill="rgb(240,8,40)" rx="2" ry="2" />
<text  x="684.69" y="479.5" >std..</text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 3.08%)</title><rect x="300.5" y="149" width="36.3" height="15.0" fill="rgb(226,57,2)" rx="2" ry="2" />
<text  x="303.46" y="159.5" >Pag..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 3.08%)</title><rect x="391.2" y="197" width="36.3" height="15.0" fill="rgb(250,104,4)" rx="2" ry="2" />
<text  x="394.23" y="207.5" >std..</text>
</g>
<g >
<title>malloc_consolidate(av=av@entry=0x7f448c000020) (1 samples, 1.54%)</title><rect x="917.7" y="261" width="18.1" height="15.0" fill="rgb(225,77,40)" rx="2" ry="2" />
<text  x="920.69" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 4.62%)</title><rect x="627.2" y="181" width="54.5" height="15.0" fill="rgb(231,217,31)" rx="2" ry="2" />
<text  x="630.23" y="191.5" >std::..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="463.8" y="309" width="54.5" height="15.0" fill="rgb(209,189,4)" rx="2" ry="2" />
<text  x="466.85" y="319.5" >std::..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="336.8" y="293" width="54.4" height="15.0" fill="rgb(214,186,28)" rx="2" ry="2" />
<text  x="339.77" y="303.5" >std::..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="463.8" y="325" width="54.5" height="15.0" fill="rgb(225,172,20)" rx="2" ry="2" />
<text  x="466.85" y="335.5" >std::..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::Pool::join(this=0x7ffdec1b47f0) (2 samples, 3.08%)</title><rect x="681.7" y="485" width="36.3" height="15.0" fill="rgb(222,52,7)" rx="2" ry="2" />
<text  x="684.69" y="495.5" >Mul..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.54%)</title><rect x="463.8" y="165" width="18.2" height="15.0" fill="rgb(225,34,45)" rx="2" ry="2" />
<text  x="466.85" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string(__val=394) (1 samples, 1.54%)</title><rect x="1026.6" y="469" width="18.2" height="15.0" fill="rgb(226,148,12)" rx="2" ry="2" />
<text  x="1029.62" y="479.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="572.8" y="277" width="54.4" height="15.0" fill="rgb(227,195,15)" rx="2" ry="2" />
<text  x="575.77" y="287.5" >std::..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (2 samples, 3.08%)</title><rect x="482.0" y="101" width="36.3" height="15.0" fill="rgb(234,167,35)" rx="2" ry="2" />
<text  x="485.00" y="111.5" >std..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait(this=0x5639599581c0) (1 samples, 1.54%)</title><rect x="790.6" y="453" width="18.2" height="15.0" fill="rgb(243,87,19)" rx="2" ry="2" />
<text  x="793.62" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1153.7" y="485" width="18.1" height="15.0" fill="rgb(249,149,29)" rx="2" ry="2" />
<text  x="1156.69" y="495.5" ></text>
</g>
<g >
<title>SimpleNetworkGenerator::generateNetworkOfSize (11 samples, 16.92%)</title><rect x="972.2" y="517" width="199.6" height="15.0" fill="rgb(211,216,45)" rx="2" ry="2" />
<text  x="975.15" y="527.5" >SimpleNetworkGenerator::ge..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (5 samples, 7.69%)</title><rect x="100.8" y="309" width="90.7" height="15.0" fill="rgb(234,167,54)" rx="2" ry="2" />
<text  x="103.77" y="319.5" >std::__cxx..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.54%)</title><rect x="972.2" y="421" width="18.1" height="15.0" fill="rgb(241,125,13)" rx="2" ry="2" />
<text  x="975.15" y="431.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="427.5" y="245" width="36.3" height="15.0" fill="rgb(253,145,41)" rx="2" ry="2" />
<text  x="430.54" y="255.5" >std..</text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 1.54%)</title><rect x="572.8" y="37" width="18.1" height="15.0" fill="rgb(235,135,54)" rx="2" ry="2" />
<text  x="575.77" y="47.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="391.2" y="277" width="36.3" height="15.0" fill="rgb(232,183,50)" rx="2" ry="2" />
<text  x="394.23" y="287.5" >std..</text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (1 samples, 1.54%)</title><rect x="1171.8" y="485" width="18.2" height="15.0" fill="rgb(235,139,30)" rx="2" ry="2" />
<text  x="1174.85" y="495.5" ></text>
</g>
<g >
<title>_int_free(av=0x7f449c000020, (1 samples, 1.54%)</title><rect x="826.9" y="181" width="18.2" height="15.0" fill="rgb(215,42,49)" rx="2" ry="2" />
<text  x="829.92" y="191.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 1.54%)</title><rect x="64.5" y="325" width="18.1" height="15.0" fill="rgb(234,194,17)" rx="2" ry="2" />
<text  x="67.46" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (3 samples, 4.62%)</title><rect x="627.2" y="117" width="54.5" height="15.0" fill="rgb(230,1,38)" rx="2" ry="2" />
<text  x="630.23" y="127.5" >std::..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (2 samples, 3.08%)</title><rect x="427.5" y="309" width="36.3" height="15.0" fill="rgb(219,224,48)" rx="2" ry="2" />
<text  x="430.54" y="319.5" >std..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="300.5" y="133" width="36.3" height="15.0" fill="rgb(251,44,12)" rx="2" ry="2" />
<text  x="303.46" y="143.5" >std..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;,Network (1 samples, 1.54%)</title><rect x="282.3" y="421" width="18.2" height="15.0" fill="rgb(240,85,9)" rx="2" ry="2" />
<text  x="285.31" y="431.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(__n=68, (2 samples, 3.08%)</title><rect x="1081.1" y="309" width="36.3" height="15.0" fill="rgb(212,158,18)" rx="2" ry="2" />
<text  x="1084.08" y="319.5" >std..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="572.8" y="245" width="54.4" height="15.0" fill="rgb(236,58,21)" rx="2" ry="2" />
<text  x="575.77" y="255.5" >std::..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="572.8" y="229" width="54.4" height="15.0" fill="rgb(240,173,14)" rx="2" ry="2" />
<text  x="575.77" y="239.5" >std::..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 1.54%)</title><rect x="336.8" y="149" width="18.1" height="15.0" fill="rgb(253,126,32)" rx="2" ry="2" />
<text  x="339.77" y="159.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (16 samples, 24.62%)</title><rect x="10.0" y="437" width="290.5" height="15.0" fill="rgb(226,146,17)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1044.8" y="437" width="18.1" height="15.0" fill="rgb(228,201,12)" rx="2" ry="2" />
<text  x="1047.77" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (2 samples, 3.08%)</title><rect x="391.2" y="229" width="36.3" height="15.0" fill="rgb(239,57,17)" rx="2" ry="2" />
<text  x="394.23" y="239.5" >std..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="336.8" y="277" width="54.4" height="15.0" fill="rgb(206,180,4)" rx="2" ry="2" />
<text  x="339.77" y="287.5" >std::..</text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 3.08%)</title><rect x="482.0" y="149" width="36.3" height="15.0" fill="rgb(230,128,7)" rx="2" ry="2" />
<text  x="485.00" y="159.5" >Pag..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 4.62%)</title><rect x="227.8" y="389" width="54.5" height="15.0" fill="rgb(245,83,44)" rx="2" ry="2" />
<text  x="230.85" y="399.5" >std::..</text>
</g>
<g >
<title>_int_free(av=0x7f44b0e0bb80 (1 samples, 1.54%)</title><rect x="1135.5" y="389" width="18.2" height="15.0" fill="rgb(249,218,13)" rx="2" ry="2" />
<text  x="1138.54" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="572.8" y="293" width="54.4" height="15.0" fill="rgb(244,194,12)" rx="2" ry="2" />
<text  x="575.77" y="303.5" >std::..</text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 1.54%)</title><rect x="137.1" y="197" width="18.1" height="15.0" fill="rgb(220,20,16)" rx="2" ry="2" />
<text  x="140.08" y="207.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (3 samples, 4.62%)</title><rect x="627.2" y="341" width="54.5" height="15.0" fill="rgb(205,204,9)" rx="2" ry="2" />
<text  x="630.23" y="351.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="990.3" y="437" width="18.2" height="15.0" fill="rgb(209,98,53)" rx="2" ry="2" />
<text  x="993.31" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="972.2" y="325" width="18.1" height="15.0" fill="rgb(215,60,2)" rx="2" ry="2" />
<text  x="975.15" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="463.8" y="229" width="54.5" height="15.0" fill="rgb(225,160,6)" rx="2" ry="2" />
<text  x="466.85" y="239.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.54%)</title><rect x="100.8" y="261" width="18.1" height="15.0" fill="rgb(254,224,6)" rx="2" ry="2" />
<text  x="103.77" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="391.2" y="213" width="36.3" height="15.0" fill="rgb(211,170,3)" rx="2" ry="2" />
<text  x="394.23" y="223.5" >Mul..</text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5639598987e0) (1 samples, 1.54%)</title><rect x="28.2" y="341" width="18.1" height="15.0" fill="rgb(206,152,7)" rx="2" ry="2" />
<text  x="31.15" y="351.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (1 samples, 1.54%)</title><rect x="790.6" y="341" width="18.2" height="15.0" fill="rgb(229,66,21)" rx="2" ry="2" />
<text  x="793.62" y="351.5" ></text>
</g>
<g >
<title>std::thread::join()() (2 samples, 3.08%)</title><rect x="754.3" y="357" width="36.3" height="15.0" fill="rgb(240,13,15)" rx="2" ry="2" />
<text  x="757.31" y="367.5" >std..</text>
</g>
<g >
<title>SimpleIdGenerator::generateId (2 samples, 3.08%)</title><rect x="1044.8" y="469" width="36.3" height="15.0" fill="rgb(217,109,41)" rx="2" ry="2" />
<text  x="1047.77" y="479.5" >Sim..</text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f44920224c0) (1 samples, 1.54%)</title><rect x="808.8" y="181" width="18.1" height="15.0" fill="rgb(219,163,21)" rx="2" ry="2" />
<text  x="811.77" y="191.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (6 samples, 9.23%)</title><rect x="808.8" y="325" width="108.9" height="15.0" fill="rgb(226,84,31)" rx="2" ry="2" />
<text  x="811.77" y="335.5" >std::_Destroy..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="405" width="18.1" height="15.0" fill="rgb(236,148,20)" rx="2" ry="2" />
<text  x="1011.46" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="357" width="18.1" height="15.0" fill="rgb(214,166,13)" rx="2" ry="2" />
<text  x="1011.46" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="627.2" y="293" width="54.5" height="15.0" fill="rgb(211,3,24)" rx="2" ry="2" />
<text  x="630.23" y="303.5" >std::..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="463.8" y="293" width="54.5" height="15.0" fill="rgb(219,76,11)" rx="2" ry="2" />
<text  x="466.85" y="303.5" >std::..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f44af296e70, (1 samples, 1.54%)</title><rect x="191.5" y="325" width="18.2" height="15.0" fill="rgb(237,197,0)" rx="2" ry="2" />
<text  x="194.54" y="335.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (3 samples, 4.62%)</title><rect x="572.8" y="309" width="54.4" height="15.0" fill="rgb(213,212,8)" rx="2" ry="2" />
<text  x="575.77" y="319.5" >std::..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="609.1" y="133" width="18.1" height="15.0" fill="rgb(221,173,53)" rx="2" ry="2" />
<text  x="612.08" y="143.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 3.08%)</title><rect x="391.2" y="341" width="36.3" height="15.0" fill="rgb(222,42,23)" rx="2" ry="2" />
<text  x="394.23" y="351.5" >std..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="518.3" y="293" width="54.5" height="15.0" fill="rgb(225,86,8)" rx="2" ry="2" />
<text  x="521.31" y="303.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="282.3" y="373" width="18.2" height="15.0" fill="rgb(235,201,24)" rx="2" ry="2" />
<text  x="285.31" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 4.62%)</title><rect x="463.8" y="181" width="54.5" height="15.0" fill="rgb(228,5,18)" rx="2" ry="2" />
<text  x="466.85" y="191.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="1081.1" y="421" width="36.3" height="15.0" fill="rgb(236,215,46)" rx="2" ry="2" />
<text  x="1084.08" y="431.5" >std..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5639599583a8, (3 samples, 4.62%)</title><rect x="627.2" y="357" width="54.5" height="15.0" fill="rgb(219,86,38)" rx="2" ry="2" />
<text  x="630.23" y="367.5" >__pth..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (2 samples, 3.08%)</title><rect x="1081.1" y="453" width="36.3" height="15.0" fill="rgb(250,42,53)" rx="2" ry="2" />
<text  x="1084.08" y="463.5" >__g..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x563959957ca8, (2 samples, 3.08%)</title><rect x="391.2" y="357" width="36.3" height="15.0" fill="rgb(235,129,54)" rx="2" ry="2" />
<text  x="394.23" y="367.5" >__p..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x563959957c08, (3 samples, 4.62%)</title><rect x="336.8" y="357" width="54.4" height="15.0" fill="rgb(217,5,28)" rx="2" ry="2" />
<text  x="339.77" y="367.5" >__pth..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 3.08%)</title><rect x="427.5" y="293" width="36.3" height="15.0" fill="rgb(211,81,13)" rx="2" ry="2" />
<text  x="430.54" y="303.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1135.5" y="469" width="18.2" height="15.0" fill="rgb(206,60,4)" rx="2" ry="2" />
<text  x="1138.54" y="479.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="463.8" y="213" width="54.5" height="15.0" fill="rgb(226,81,7)" rx="2" ry="2" />
<text  x="466.85" y="223.5" >Multi..</text>
</g>
<g >
<title>vsnprintf(__ap=0x7ffdec1b46a0, (1 samples, 1.54%)</title><rect x="1026.6" y="437" width="18.2" height="15.0" fill="rgb(213,79,44)" rx="2" ry="2" />
<text  x="1029.62" y="447.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 24.62%)</title><rect x="10.0" y="469" width="290.5" height="15.0" fill="rgb(233,133,0)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiT..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 1.54%)</title><rect x="427.5" y="117" width="18.2" height="15.0" fill="rgb(214,2,6)" rx="2" ry="2" />
<text  x="430.54" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="1008.5" y="421" width="18.1" height="15.0" fill="rgb(243,75,16)" rx="2" ry="2" />
<text  x="1011.46" y="431.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (15 samples, 23.08%)</title><rect x="681.7" y="517" width="272.3" height="15.0" fill="rgb(243,14,28)" rx="2" ry="2" />
<text  x="684.69" y="527.5" >MultiThreadedPageRankComputer::compu..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f4499542560, (1 samples, 1.54%)</title><rect x="881.4" y="197" width="18.1" height="15.0" fill="rgb(208,95,41)" rx="2" ry="2" />
<text  x="884.38" y="207.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (3 samples, 4.62%)</title><rect x="572.8" y="341" width="54.4" height="15.0" fill="rgb(253,202,13)" rx="2" ry="2" />
<text  x="575.77" y="351.5" >std::..</text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (2 samples, 3.08%)</title><rect x="754.3" y="389" width="36.3" height="15.0" fill="rgb(212,92,7)" rx="2" ry="2" />
<text  x="757.31" y="399.5" >__g..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="627.2" y="277" width="54.5" height="15.0" fill="rgb(207,27,41)" rx="2" ry="2" />
<text  x="630.23" y="287.5" >std::..</text>
</g>
<g >
<title>_int_free(av=0x7f44a0000020, (1 samples, 1.54%)</title><rect x="935.8" y="277" width="18.2" height="15.0" fill="rgb(254,40,31)" rx="2" ry="2" />
<text  x="938.85" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(idGenerator=..., (2 samples, 3.08%)</title><rect x="1044.8" y="485" width="36.3" height="15.0" fill="rgb(207,221,52)" rx="2" ry="2" />
<text  x="1047.77" y="495.5" >Pag..</text>
</g>
<g >
<title>std::mutex::unlock (1 samples, 1.54%)</title><rect x="64.5" y="373" width="18.1" height="15.0" fill="rgb(243,50,13)" rx="2" ry="2" />
<text  x="67.46" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (16 samples, 24.62%)</title><rect x="10.0" y="453" width="290.5" height="15.0" fill="rgb(240,129,32)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std::__invoke&lt;MultiThreadedPageRankComp..</text>
</g>
<g >
<title>__pthread_clockjoin_ex (2 samples, 3.08%)</title><rect x="681.7" y="453" width="36.3" height="15.0" fill="rgb(246,37,32)" rx="2" ry="2" />
<text  x="684.69" y="463.5" >__p..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (5 samples, 7.69%)</title><rect x="100.8" y="293" width="90.7" height="15.0" fill="rgb(227,175,33)" rx="2" ry="2" />
<text  x="103.77" y="303.5" >std::__cxx..</text>
</g>
<g >
<title>std::thread::join()() (1 samples, 1.54%)</title><rect x="790.6" y="357" width="18.2" height="15.0" fill="rgb(230,209,49)" rx="2" ry="2" />
<text  x="793.62" y="367.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5639599581e8, (1 samples, 1.54%)</title><rect x="790.6" y="373" width="18.2" height="15.0" fill="rgb(215,161,8)" rx="2" ry="2" />
<text  x="793.62" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 3.08%)</title><rect x="427.5" y="181" width="36.3" height="15.0" fill="rgb(230,78,0)" rx="2" ry="2" />
<text  x="430.54" y="191.5" >std..</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=69) (2 samples, 3.08%)</title><rect x="155.2" y="245" width="36.3" height="15.0" fill="rgb(252,60,17)" rx="2" ry="2" />
<text  x="158.23" y="255.5" >__G..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (3 samples, 4.62%)</title><rect x="336.8" y="229" width="54.4" height="15.0" fill="rgb(251,71,37)" rx="2" ry="2" />
<text  x="339.77" y="239.5" >std::..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (2 samples, 3.08%)</title><rect x="427.5" y="341" width="36.3" height="15.0" fill="rgb(205,81,17)" rx="2" ry="2" />
<text  x="430.54" y="351.5" >std..</text>
</g>
<g >
<title>pageRankComputationWithNumNodes(num=2000, (27 samples, 41.54%)</title><rect x="681.7" y="533" width="490.1" height="15.0" fill="rgb(252,73,15)" rx="2" ry="2" />
<text  x="684.69" y="543.5" >pageRankComputationWithNumNodes(num=2000,</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 3.08%)</title><rect x="1081.1" y="389" width="36.3" height="15.0" fill="rgb(222,16,24)" rx="2" ry="2" />
<text  x="1084.08" y="399.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate(this=0x5639598c62d8, (1 samples, 1.54%)</title><rect x="935.8" y="293" width="18.2" height="15.0" fill="rgb(221,82,24)" rx="2" ry="2" />
<text  x="938.85" y="303.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, (2 samples, 3.08%)</title><rect x="1044.8" y="453" width="36.3" height="15.0" fill="rgb(233,202,53)" rx="2" ry="2" />
<text  x="1047.77" y="463.5" >std..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (2 samples, 3.08%)</title><rect x="427.5" y="261" width="36.3" height="15.0" fill="rgb(248,90,29)" rx="2" ry="2" />
<text  x="430.54" y="271.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.54%)</title><rect x="972.2" y="293" width="18.1" height="15.0" fill="rgb(244,211,16)" rx="2" ry="2" />
<text  x="975.15" y="303.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (3 samples, 4.62%)</title><rect x="463.8" y="245" width="54.5" height="15.0" fill="rgb(224,102,16)" rx="2" ry="2" />
<text  x="466.85" y="255.5" >std::..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (2 samples, 3.08%)</title><rect x="300.5" y="293" width="36.3" height="15.0" fill="rgb(218,37,27)" rx="2" ry="2" />
<text  x="303.46" y="303.5" >std..</text>
</g>
</g>
</svg>
