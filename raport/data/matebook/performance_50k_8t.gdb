
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007fdd1213badb in munmap () at ../sysdeps/unix/syscall-template.S:78

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x00007fdd1213badb in munmap () at ../sysdeps/unix/syscall-template.S:78
#1  0x000056159623ced5 in __gnu_cxx::new_allocator<Page>::deallocate (this=<optimized out>, __p=0x7fdd106f5010) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<Page> >::deallocate (__a=..., __n=<optimized out>, __p=0x7fdd106f5010) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::_Vector_base<Page, std::allocator<Page> >::_M_deallocate (this=<optimized out>, __n=<optimized out>, __p=0x7fdd106f5010) at /usr/include/c++/9/bits/stl_vector.h:351
#4  std::vector<Page, std::allocator<Page> >::_M_realloc_insert<Page const&> (this=0x7ffe9048f800, __position=...) at /usr/include/c++/9/bits/vector.tcc:500
#5  0x000056159623e2c6 in std::vector<Page, std::allocator<Page> >::push_back (__x=..., this=0x7ffe9048f800) at /usr/include/c++/9/bits/stl_iterator.h:806
#6  Network::addPage (page=..., this=0x7ffe9048f800) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/network.hpp:19
#7  NetworkWithoutManyEdgesGenerator::generateNetworkOfSize (this=0x7ffe9048fac0, size=500000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:94
#8  0x00005615962398cf in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#9  0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007fdd12099a20 in __vfprintf_internal (s=s@entry=0x7ffe9048f1f0, format=format@entry=0x561596246079 "%u", ap=ap@entry=0x7ffe9048f390, mode_flags=mode_flags@entry=2) at vfprintf-internal.c:1320

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x00007fdd12099a20 in __vfprintf_internal (s=s@entry=0x7ffe9048f1f0, format=format@entry=0x561596246079 "%u", ap=ap@entry=0x7ffe9048f390, mode_flags=mode_flags@entry=2) at vfprintf-internal.c:1320
#1  0x00007fdd120af11a in __vsnprintf_internal (string=0x7ffe9048f370 "", maxlen=<optimized out>, format=0x561596246079 "%u", args=0x7ffe9048f390, mode_flags=2) at vsnprintf.c:114
#2  0x00005615962393fa in vsnprintf (__ap=0x7ffe9048f390, __fmt=0x561596246079 "%u", __n=16, __s=0x7ffe9048f370 "") at /usr/include/x86_64-linux-gnu/bits/stdio2.h:80
#3  __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> (__convf=<optimized out>, __n=16, __fmt=0x561596246079 "%u", __fmt=0x561596246079 "%u", __n=16, __convf=<optimized out>) at /usr/include/c++/9/ext/string_conversions.h:111
#4  0x000056159623d982 in std::__cxx11::to_string (__val=480752) at /usr/include/c++/9/bits/basic_string.h:6552
#5  NetworkGenerator::generatePageFromNum (this=0x7ffe9048fac0, num=480752) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:18
#6  NetworkWithoutManyEdgesGenerator::generateNetworkOfSize (this=0x7ffe9048fac0, size=500000) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/./lib/networkGenerator.hpp:89
#7  0x00005615962398cf in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:17
#8  0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x0000561596240e55 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data (this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1532
1532	    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x0000561596240e55 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data (this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1532
#1  std::operator==<char> (__rhs=..., __lhs=...) at /usr/include/c++/9/bits/basic_string.h:6152
#2  PageId::operator== (other=..., this=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:15
#3  std::equal_to<PageId>::operator() (this=<optimized out>, __y=..., __x=...) at /usr/include/c++/9/bits/stl_function.h:356
#4  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=<optimized out>, __c=<optimized out>, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1450
#5  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=<optimized out>, __n=<optimized out>, __c=<optimized out>, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1834
#6  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=2276755375529243608, __k=..., __n=79663, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:1545
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=2276755375529243608, __key=..., __bkt=79663, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:655
#8  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable_policy.h:722
#9  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/unordered_map.h:989
#10 MultiThreadedPageRankComputer::initPages (danglingCount=<synthetic pointer>: 84124, initialRank=1.9999999999999999e-06, pageHashMap=std::unordered_map with 84703 elements = {...}, network=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:204
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:38
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x000056159623ffdf in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux (__n=351061, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable_policy.h:1393
1393	      _M_bucket_index(const __node_type* __p, std::size_t __n) const

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x000056159623ffdf in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux (__n=351061, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable_policy.h:1393
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash (this=0x7ffe9048f500, __n=351061, __state=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:2067
#2  0x00005615962400d8 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node (this=0x7ffe9048f500, __bkt=153468, __code=11289724442667379955, __node=0x561598333400, __n_elt=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:477
#3  0x0000561596240f0f in std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/char_traits.h:300
#4  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/unordered_map.h:989
#5  MultiThreadedPageRankComputer::initPages (danglingCount=<synthetic pointer>: <optimized out>, initialRank=1.9999999999999999e-06, pageHashMap=std::unordered_map with 172933 elements = {...}, network=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:204
#6  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:38
#7  0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#8  0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x0000561596240e41 in std::operator==<char> (__rhs=..., __lhs=...) at /usr/include/c++/9/bits/hashtable.h:1532
1532	    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x0000561596240e41 in std::operator==<char> (__rhs=..., __lhs=...) at /usr/include/c++/9/bits/hashtable.h:1532
#1  PageId::operator== (other=..., this=<optimized out>) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:15
#2  std::equal_to<PageId>::operator() (this=<optimized out>, __y=..., __x=...) at /usr/include/c++/9/bits/stl_function.h:356
#3  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=<optimized out>, __c=<optimized out>, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1450
#4  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=<optimized out>, __n=<optimized out>, __c=<optimized out>, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1834
#5  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=6945145100443897362, __k=..., __n=189971, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:1545
#6  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=6945145100443897362, __key=..., __bkt=189971, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:655
#7  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable_policy.h:722
#8  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/unordered_map.h:989
#9  MultiThreadedPageRankComputer::initPages (danglingCount=<synthetic pointer>: 260011, initialRank=1.9999999999999999e-06, pageHashMap=std::unordered_map with 260766 elements = {...}, network=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:204
#10 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:38
#11 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#12 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x000056159623ffd8 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux (__n=712697, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable_policy.h:1393
1393	      _M_bucket_index(const __node_type* __p, std::size_t __n) const

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x000056159623ffd8 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux (__n=712697, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable_policy.h:1393
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash (this=0x7ffe9048f500, __n=712697, __state=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:2067
#2  0x00005615962400d8 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node (this=0x7ffe9048f500, __bkt=280295, __code=3759716224984873580, __node=0x56159a2751a0, __n_elt=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:477
#3  0x0000561596240f0f in std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/char_traits.h:300
#4  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffe9048f500) at /usr/include/c++/9/bits/unordered_map.h:989
#5  MultiThreadedPageRankComputer::initPages (danglingCount=<synthetic pointer>: <optimized out>, initialRank=1.9999999999999999e-06, pageHashMap=std::unordered_map with 351061 elements = {...}, network=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:204
#6  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:38
#7  0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#8  0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007fdd120bb8a2 in _int_malloc (av=av@entry=0x7fdd1220bb80 <main_arena>, bytes=bytes@entry=71) at malloc.c:4114

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x00007fdd120bb8a2 in _int_malloc (av=av@entry=0x7fdd1220bb80 <main_arena>, bytes=bytes@entry=71) at malloc.c:4114
#1  0x00007fdd120bd419 in __GI___libc_malloc (bytes=71) at malloc.c:3066
#2  0x00007fdd122d7c29 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x0000561596241aa2 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7fdd00417d56 "", __beg=0x7fdd00417d10 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725402904", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/char_traits.h:363
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7fdd00417d56 "", __beg=0x7fdd00417d10 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725402904", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/basic_string.h:247
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7fdd00417d56 "", __beg=0x7fdd00417d10 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725402904", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/basic_string.h:266
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725402904", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/basic_string.h:451
#7  PageId::PageId (this=0x7ffe9048f5f0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  Page::getId (this=0x7fdd0e3d6110) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/page.hpp:33
#9  MultiThreadedPageRankComputer::initPages (danglingCount=<synthetic pointer>: <optimized out>, initialRank=1.9999999999999999e-06, pageHashMap=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>.: 
std::unordered_map with 402904 elements, network=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:204
#10 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:38
#11 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#12 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 39985]
[New LWP 39986]
[New LWP 39987]
[New LWP 39988]
[New LWP 39989]
[New LWP 39990]
[New LWP 39991]
[New LWP 39992]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd0aef0700 (LWP 39992)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159646f668) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159646f668) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159646f660) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd0b6f1700 (LWP 39991)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd0bef2700 (LWP 39990)):
#0  0x0000561596244fae in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:161
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631a798) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631a798) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631a790) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd0fec7700 (LWP 39989)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631bdd8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631bdd8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631bdd0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd11ecb700 (LWP 39988)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631db18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631db18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631db10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd116ca700 (LWP 39987)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596467f28) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596467f28) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596467f20) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd10ec9700 (LWP 39986)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372f8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596460948) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596460948) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596460940) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd106c8700 (LWP 39985)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962ad228) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962ad228) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962ad220) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374c8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be374a0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=0, alpha=0.84999999999999998, dangleSum=0.99800999999999995, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 39999]
[New LWP 40000]
[New LWP 40001]
[New LWP 40002]
[New LWP 40003]
[New LWP 40004]
[New LWP 40005]
[New LWP 40006]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd106c8700 (LWP 40006)):
#0  0x00007fdd122d7b09 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056159624503b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725499133") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffe9048f540, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffe9048f540, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=0x7ffe9048f540) at /usr/include/c++/9/bits/hashtable.h:1449
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=0x7ffe9048f540) at /usr/include/c++/9/bits/unordered_map.h:939
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#13 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#16 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631a798) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631a798) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631a790) at /usr/include/c++/9/thread:195
#26 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd10ec9700 (LWP 40005)):
#0  0x0000561596245020 in MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:270
#1  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#2  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#3  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#5  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#6  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#7  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#8  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#9  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#10 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#11 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#12 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#13 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#14 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#15 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596471438) at /usr/include/c++/9/thread:244
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596471438) at /usr/include/c++/9/thread:251
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596471430) at /usr/include/c++/9/thread:195
#19 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#21 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd116ca700 (LWP 40004)):
#0  0x0000561596244fed in MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:270
#1  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#2  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#3  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#5  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#6  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#7  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#8  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#9  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#10 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#11 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#12 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#13 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#14 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#15 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964a0f08) at /usr/include/c++/9/thread:244
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964a0f08) at /usr/include/c++/9/thread:251
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964a0f00) at /usr/include/c++/9/thread:195
#19 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#21 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd11ecb700 (LWP 40003)):
#0  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:161
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962b19f8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962b19f8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962b19f0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd0fec7700 (LWP 40002)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159647d618) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159647d618) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159647d610) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd0bef2700 (LWP 40001)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649c088) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649c088) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649c080) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd0b6f1700 (LWP 40000)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372f8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596468dd8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596468dd8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596468dd0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd0aef0700 (LWP 39999)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649a218) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649a218) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649a210) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b38, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be37b10) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=1, alpha=0.84999999999999998, dangleSum=0.99720312481704965, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40013]
[New LWP 40014]
[New LWP 40015]
[New LWP 40016]
[New LWP 40017]
[New LWP 40018]
[New LWP 40019]
[New LWP 40020]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd0aef0700 (LWP 40020)):
#0  0x0000561596245069 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:938
#1  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:939
#2  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#3  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#4  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#6  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#7  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#8  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#9  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#10 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#11 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#12 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#13 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#14 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#15 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#16 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#17 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649e038) at /usr/include/c++/9/thread:244
#19 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649e038) at /usr/include/c++/9/thread:251
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649e030) at /usr/include/c++/9/thread:195
#21 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#23 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd0b6f1700 (LWP 40019)):
#0  __memcmp_avx2_movbe () at ../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:71
#1  0x00005615962450b6 in std::char_traits<char>::compare (__n=<optimized out>, __s2=<optimized out>, __s1=<optimized out>) at /usr/include/c++/9/bits/char_traits.h:325
#2  std::operator==<char> (__rhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725100", __lhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725100") at /usr/include/c++/9/bits/basic_string.h:6152
#3  PageId::operator== (other=..., this=0x5615964df028) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:15
#4  std::equal_to<PageId>::operator() (this=<optimized out>, __y=..., __x=...) at /usr/include/c++/9/bits/stl_function.h:356
#5  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=<optimized out>, __c=<optimized out>, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1450
#6  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (__c=16430663556309411870, this=<optimized out>, __n=0x5615964ab010, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1834
#7  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=<optimized out>, __n=0x5615964ab010, __c=16430663556309411870, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1829
#8  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1458
#9  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:939
#10 MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#11 std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#12 std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#15 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#16 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#17 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#18 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#19 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#20 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#21 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#22 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#23 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#24 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#25 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#26 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631bdd8) at /usr/include/c++/9/thread:244
#27 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631bdd8) at /usr/include/c++/9/thread:251
#28 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631bdd0) at /usr/include/c++/9/thread:195
#29 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#30 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#31 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd0bef2700 (LWP 40018)):
#0  start_thread (arg=<optimized out>) at pthread_create.c:408
#1  0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd0fec7700 (LWP 40017)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596460948) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596460948) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596460940) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd11ecb700 (LWP 40016)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631db18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631db18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631db10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd116ca700 (LWP 40015)):
#0  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_begin (this=0x7ffe9048f540, __bkt=1088) at /usr/include/c++/9/bits/hashtable.h:938
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=0x7ffe9048f540) at /usr/include/c++/9/bits/hashtable.h:1451
#2  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=0x7ffe9048f540) at /usr/include/c++/9/bits/unordered_map.h:939
#3  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#4  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#5  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#6  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#8  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#9  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#10 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#11 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#12 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#13 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#14 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#15 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#16 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#17 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#18 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#19 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#21 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#22 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#23 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#24 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd10ec9700 (LWP 40014)):
#0  0x00007fdd12419ff3 in __GI___pthread_mutex_lock (mutex=0x56159be372f8) at ../nptl/pthread_mutex_lock.c:80
#1  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be372f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#2  std::mutex::lock (this=0x56159be372f8) at /usr/include/c++/9/bits/std_mutex.h:100
#3  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#4  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372f8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#5  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#6  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#7  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#10 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#11 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#12 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#13 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#14 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#15 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#16 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#17 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#18 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#19 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#20 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159646f668) at /usr/include/c++/9/thread:244
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159646f668) at /usr/include/c++/9/thread:251
#23 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159646f660) at /usr/include/c++/9/thread:195
#24 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#25 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#26 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd106c8700 (LWP 40013)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962ad228) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962ad228) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962ad220) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374c8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be374a0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=2, alpha=0.84999999999999998, dangleSum=0.9965872085547145, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40026]
[New LWP 40027]
[New LWP 40028]
[New LWP 40029]
[New LWP 40030]
[New LWP 40031]
[New LWP 40032]
[New LWP 40033]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd106c8700 (LWP 40033)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631bdd8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631bdd8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631bdd0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd10ec9700 (LWP 40032)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be37448, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be37448) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be37448) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be37448) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649ffe8) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649ffe8) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649ffe0) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd116ca700 (LWP 40031)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be37448, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be37448) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be37448) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be37448) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596469d48) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596469d48) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596469d40) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd11ecb700 (LWP 40030)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964e7558) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964e7558) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964e7550) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd0fec7700 (LWP 40029)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373a0, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373a0) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615965112c8) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615965112c8) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615965112c0) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd0bef2700 (LWP 40028)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be373a0) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56159be373a0) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649c088) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649c088) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649c080) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd0b6f1700 (LWP 40027)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373a0, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373a0) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561597521328) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561597521328) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561597521320) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd0aef0700 (LWP 40026)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373a0, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373a0) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962b19f8) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962b19f8) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962b19f0) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b38, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(class std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be37b10) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=3, alpha=0.84999999999999998, dangleSum=0.9961603838836055, networkSize=<optimized out>, edges=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true>.: 
std::unordered_map with 995 elements, pageHashMap=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>.: 
std::unordered_map with 500000 elements, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40039]
[New LWP 40040]
[New LWP 40041]
[New LWP 40042]
[New LWP 40043]
[New LWP 40044]
[New LWP 40045]
[New LWP 40046]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd0aef0700 (LWP 40046)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596468dd8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596468dd8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596468dd0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd0b6f1700 (LWP 40045)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be37448, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be37448) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be37448) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be37448) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631db18) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631db18) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631db10) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd0bef2700 (LWP 40044)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be37448, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be37448) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be37448) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be37448) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596467f28) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596467f28) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596467f20) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd0fec7700 (LWP 40043)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373a0, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373a0) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649e038) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649e038) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649e030) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd11ecb700 (LWP 40042)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159646f668) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159646f668) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159646f660) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd116ca700 (LWP 40041)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373a0, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373a0) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596460948) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596460948) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596460940) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd10ec9700 (LWP 40040)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be373a0) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56159be373a0) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962ad228) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962ad228) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962ad220) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd106c8700 (LWP 40039)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be373a0) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56159be373a0) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374c8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(class std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be374a0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=4, alpha=0.84999999999999998, dangleSum=0.9958965696257478, networkSize=<optimized out>, edges=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true>.: 
std::unordered_map with 995 elements, pageHashMap=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>.: 
std::unordered_map with 500000 elements, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40054]
[New LWP 40055]
[New LWP 40056]
[New LWP 40057]
[New LWP 40058]
[New LWP 40059]
[New LWP 40060]
[New LWP 40061]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd106c8700 (LWP 40061)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596460948) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596460948) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596460940) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd10ec9700 (LWP 40060)):
#0  0x00007fdd1241b7b7 in __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be37410) at pthread_mutex_unlock.c:357
#1  __GI___pthread_mutex_unlock (mutex=0x56159be37410) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be37410) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be37410) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159647d618) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159647d618) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159647d610) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd116ca700 (LWP 40059)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649a218) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649a218) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649a210) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd11ecb700 (LWP 40058)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964a0f08) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964a0f08) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964a0f00) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd0fec7700 (LWP 40057)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596471438) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596471438) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596471430) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd0bef2700 (LWP 40056)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be37330) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56159be37330) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be37330) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be37330) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561597521328) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561597521328) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561597521320) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd0b6f1700 (LWP 40055)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372f8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631a798) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631a798) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631a790) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd0aef0700 (LWP 40054)):
#0  0x00007fdd1241b7b7 in __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be372c0) at pthread_mutex_unlock.c:357
#1  __GI___pthread_mutex_unlock (mutex=0x56159be372c0) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be372c0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be372c0) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615965112c8) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615965112c8) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615965112c0) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b38, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(class std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be37b10) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=5, alpha=0.84999999999999998, dangleSum=0.99575168219631138, networkSize=<optimized out>, edges=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true>.: 
std::unordered_map with 995 elements, pageHashMap=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>.: 
std::unordered_map with 500000 elements, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40068]
[New LWP 40069]
[New LWP 40070]
[New LWP 40071]
[New LWP 40072]
[New LWP 40073]
[New LWP 40074]
[New LWP 40075]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd0aef0700 (LWP 40075)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964e7558) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964e7558) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964e7550) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd0b6f1700 (LWP 40074)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596467f28) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596467f28) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596467f20) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd0bef2700 (LWP 40073)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be373d8) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56159be373d8) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159646f668) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159646f668) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159646f660) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd0fec7700 (LWP 40072)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962ad228) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962ad228) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962ad220) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd11ecb700 (LWP 40071)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd116ca700 (LWP 40070)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596468dd8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596468dd8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596468dd0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd10ec9700 (LWP 40069)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372f8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631db18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631db18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631db10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd106c8700 (LWP 40068)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649e038) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649e038) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649e030) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374c8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be374a0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=6, alpha=0.84999999999999998, dangleSum=0.99568113682931936, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40082]
[New LWP 40083]
[New LWP 40084]
[New LWP 40085]
[New LWP 40086]
[New LWP 40087]
[New LWP 40088]
[New LWP 40089]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd106c8700 (LWP 40089)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be37448, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be37448) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be37448) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be37448) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649e038) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649e038) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649e030) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd10ec9700 (LWP 40088)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649c088) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649c088) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649c080) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd116ca700 (LWP 40087)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be37448) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56159be37448) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be37448) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be37448) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649ffe8) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649ffe8) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649ffe0) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd11ecb700 (LWP 40086)):
#0  0x000056159624508e in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:1393
#1  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:939
#2  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#3  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#4  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#6  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#7  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#8  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#9  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#10 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#11 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#12 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#13 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#14 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#15 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#16 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#17 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962b19f8) at /usr/include/c++/9/thread:244
#19 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962b19f8) at /usr/include/c++/9/thread:251
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962b19f0) at /usr/include/c++/9/thread:195
#21 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#23 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd0fec7700 (LWP 40085)):
#0  __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be373a0) at pthread_mutex_unlock.c:58
#1  __GI___pthread_mutex_unlock (mutex=0x56159be373a0) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be373a0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be373a0) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631bdd8) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631bdd8) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631bdd0) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd0bef2700 (LWP 40084)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be37330, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be37330) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be37330) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be37330) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964a0f08) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964a0f08) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964a0f00) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd0b6f1700 (LWP 40083)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be37330, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be37330) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be37330) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be37330) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596469d48) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596469d48) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596469d40) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd0aef0700 (LWP 40082)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159647d618) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159647d618) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159647d610) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b38, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be37b10) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=7, alpha=0.84999999999999998, dangleSum=0.9956505491674541, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40096]
[New LWP 40097]
[New LWP 40098]
[New LWP 40099]
[New LWP 40100]
[New LWP 40101]
[New LWP 40102]
[New LWP 40103]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd0aef0700 (LWP 40103)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561597521328) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561597521328) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561597521320) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd0b6f1700 (LWP 40102)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596468dd8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596468dd8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596468dd0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd0bef2700 (LWP 40101)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631db18) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631db18) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631db10) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd0fec7700 (LWP 40100)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962ad228) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962ad228) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962ad220) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd11ecb700 (LWP 40099)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596467f28) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596467f28) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596467f20) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd116ca700 (LWP 40098)):
#0  0x00007fdd122d7b13 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x000056159624503b in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/9/bits/functional_hash.h:197
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725330162") at /usr/include/c++/9/bits/basic_string.h:6735
#3  PageIdHash::operator() (this=0x7ffe9048f540, pageId=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffe9048f540, __k=...) at /usr/include/c++/9/bits/hashtable_policy.h:1384
#5  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=0x7ffe9048f540) at /usr/include/c++/9/bits/hashtable.h:1449
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=0x7ffe9048f540) at /usr/include/c++/9/bits/unordered_map.h:939
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#13 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#14 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#16 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#17 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964e7558) at /usr/include/c++/9/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964e7558) at /usr/include/c++/9/thread:251
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964e7550) at /usr/include/c++/9/thread:195
#26 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#28 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd10ec9700 (LWP 40097)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd106c8700 (LWP 40096)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159646f668) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159646f668) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159646f660) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374c8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(class std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be374a0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=8, alpha=0.84999999999999998, dangleSum=0.99563873492426691, networkSize=<optimized out>, edges=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true>.: 
std::unordered_map with 995 elements, pageHashMap=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>.: 
std::unordered_map with 500000 elements, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40109]
[New LWP 40110]
[New LWP 40111]
[New LWP 40112]
[New LWP 40113]
[New LWP 40114]
[New LWP 40115]
[New LWP 40116]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd106c8700 (LWP 40116)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd10ec9700 (LWP 40115)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596460948) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596460948) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596460940) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd116ca700 (LWP 40114)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596471438) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596471438) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596471430) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd11ecb700 (LWP 40113)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649a218) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649a218) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649a210) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd0fec7700 (LWP 40112)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631a798) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631a798) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631a790) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd0bef2700 (LWP 40111)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596469d48) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596469d48) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596469d40) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd0b6f1700 (LWP 40110)):
#0  0x0000561596244fbf in std::__detail::_Node_iterator_base<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>::_M_incr (this=0x56159be37400) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true>::operator++ (this=0x56159be37400) at /usr/include/c++/9/bits/hashtable_policy.h:362
#2  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:162
#3  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#4  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#5  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#6  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#8  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#9  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#10 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#11 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#12 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#13 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#14 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#15 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#16 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#17 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#18 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#19 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615965112c8) at /usr/include/c++/9/thread:244
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615965112c8) at /usr/include/c++/9/thread:251
#21 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615965112c0) at /usr/include/c++/9/thread:195
#22 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#23 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#24 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd0aef0700 (LWP 40109)):
#0  __lll_lock_wait (futex=futex@entry=0x56159be373d8, private=0) at lowlevellock.c:52
#1  0x00007fdd1241a0a3 in __GI___pthread_mutex_lock (mutex=0x56159be373d8) at ../nptl/pthread_mutex_lock.c:80
#2  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be373d8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  std::mutex::lock (this=0x56159be373d8) at /usr/include/c++/9/bits/std_mutex.h:100
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962b19f8) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962b19f8) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962b19f0) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b38, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(class std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be37b10) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=9, alpha=0.84999999999999998, dangleSum=0.99563467312683351, networkSize=<optimized out>, edges=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true>.: 
std::unordered_map with 995 elements, pageHashMap=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>.: 
std::unordered_map with 500000 elements, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40124]
[New LWP 40125]
[New LWP 40126]
[New LWP 40127]
[New LWP 40128]
[New LWP 40129]
[New LWP 40130]
[New LWP 40131]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd0aef0700 (LWP 40131)):
#0  std::__detail::_Mod_range_hashing::operator() (this=<optimized out>, __den=<optimized out>, __num=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:1393
#1  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index (this=<optimized out>, __p=0x5615964a6f30, __n=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:1396
#2  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:640
#3  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1465
#4  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:939
#5  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#6  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#7  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#10 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#11 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#12 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#13 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#14 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#15 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#16 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#17 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#18 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#19 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#20 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631bdd8) at /usr/include/c++/9/thread:244
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631bdd8) at /usr/include/c++/9/thread:251
#23 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631bdd0) at /usr/include/c++/9/thread:195
#24 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#25 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#26 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd0b6f1700 (LWP 40130)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561597521328) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561597521328) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561597521320) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd0bef2700 (LWP 40129)):
#0  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:161
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964e7558) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964e7558) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964e7550) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd0fec7700 (LWP 40128)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962ad228) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962ad228) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962ad220) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd11ecb700 (LWP 40127)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596467f28) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596467f28) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596467f20) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd116ca700 (LWP 40126)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631db18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631db18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631db10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd10ec9700 (LWP 40125)):
#0  MultiThreadedPageRankComputer::PageInfo::setCurrentRank (newRank=1.9925768501716714e-06, iteration=10, this=0x561598a30f28) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:278
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:278
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596468dd8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596468dd8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596468dd0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd106c8700 (LWP 40124)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159646f668) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159646f668) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159646f660) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374c8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be374a0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=10, alpha=0.84999999999999998, dangleSum=0.9956334412774539, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40139]
[New LWP 40140]
[New LWP 40141]
[New LWP 40142]
[New LWP 40143]
[New LWP 40144]
[New LWP 40145]
[New LWP 40146]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd106c8700 (LWP 40146)):
#0  0x000056159624505b in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:938
#1  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:939
#2  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#3  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#4  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#6  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#7  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#8  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#9  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#10 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#11 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#12 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#13 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#14 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#15 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#16 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#17 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159646f668) at /usr/include/c++/9/thread:244
#19 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159646f668) at /usr/include/c++/9/thread:251
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159646f660) at /usr/include/c++/9/thread:195
#21 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#23 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd10ec9700 (LWP 40145)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649c088) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649c088) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649c080) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd116ca700 (LWP 40144)):
#0  clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:78
#1  0x00007fdd12417530 in ?? () at allocatestack.c:311 from /lib/x86_64-linux-gnu/libpthread.so.0
#2  0x00007fdd116ca700 in ?? ()
#3  0x0000000000000000 in ?? ()

Thread 6 (Thread 0x7fdd11ecb700 (LWP 40143)):
#0  0x000056159624500a in MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:270
#1  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#2  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#3  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#5  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#6  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#7  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#8  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#9  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#10 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#11 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#12 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#13 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#14 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#15 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964a0f08) at /usr/include/c++/9/thread:244
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964a0f08) at /usr/include/c++/9/thread:251
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964a0f00) at /usr/include/c++/9/thread:195
#19 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#21 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd0fec7700 (LWP 40142)):
#0  0x0000561596245070 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:938
#1  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:939
#2  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#3  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#4  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#6  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#7  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#8  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#9  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#10 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#11 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#12 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#13 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#14 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#15 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#16 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#17 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649e038) at /usr/include/c++/9/thread:244
#19 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649e038) at /usr/include/c++/9/thread:251
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649e030) at /usr/include/c++/9/thread:195
#21 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#23 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd0bef2700 (LWP 40141)):
#0  0x00007fdd1241b7cf in __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be37330) at pthread_mutex_unlock.c:52
#1  __GI___pthread_mutex_unlock (mutex=0x56159be37330) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be37330) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be37330) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd0b6f1700 (LWP 40140)):
#0  0x00007fdd12419ff3 in __GI___pthread_mutex_lock (mutex=0x56159be372f8) at ../nptl/pthread_mutex_lock.c:80
#1  0x0000561596244f99 in __gthread_mutex_lock (__mutex=0x56159be372f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#2  std::mutex::lock (this=0x56159be372f8) at /usr/include/c++/9/bits/std_mutex.h:100
#3  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/9/bits/std_mutex.h:159
#4  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372f8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#5  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#6  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#7  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#10 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#11 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#12 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#13 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#14 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#15 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#16 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#17 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#18 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#19 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#20 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649ffe8) at /usr/include/c++/9/thread:244
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649ffe8) at /usr/include/c++/9/thread:251
#23 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649ffe0) at /usr/include/c++/9/thread:195
#24 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#25 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#26 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd0aef0700 (LWP 40139)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615965112c8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615965112c8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615965112c0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b38, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be37b10) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=11, alpha=0.84999999999999998, dangleSum=0.99563312242831259, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40153]
[New LWP 40154]
[New LWP 40155]
[New LWP 40156]
[New LWP 40157]
[New LWP 40158]
[New LWP 40159]
[New LWP 40160]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd0aef0700 (LWP 40160)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962b19f8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962b19f8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962b19f0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd0b6f1700 (LWP 40159)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631db18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631db18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631db10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd0bef2700 (LWP 40158)):
#0  0x0000561596245115 in MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:279
#1  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#2  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#3  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#5  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#6  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#7  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#8  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#9  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#10 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#11 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#12 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#13 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#14 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#15 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631bdd8) at /usr/include/c++/9/thread:244
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631bdd8) at /usr/include/c++/9/thread:251
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631bdd0) at /usr/include/c++/9/thread:195
#19 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#21 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd0fec7700 (LWP 40157)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962ad228) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962ad228) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962ad220) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd11ecb700 (LWP 40156)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615964e7558) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615964e7558) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615964e7550) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd116ca700 (LWP 40155)):
#0  0x0000561596244fed in MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:270
#1  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#2  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#3  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#5  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#6  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#7  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#8  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#9  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#10 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#11 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#12 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#13 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#14 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#15 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596468dd8) at /usr/include/c++/9/thread:244
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596468dd8) at /usr/include/c++/9/thread:251
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596468dd0) at /usr/include/c++/9/thread:195
#19 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#21 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd10ec9700 (LWP 40154)):
#0  0x000056159624505b in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count (__k=..., this=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:938
#1  std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::count (__x=..., this=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:939
#2  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:272
#3  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#4  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#6  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#7  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#8  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#9  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#10 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#11 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#12 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#13 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#14 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#15 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#16 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#17 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561597521328) at /usr/include/c++/9/thread:244
#19 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561597521328) at /usr/include/c++/9/thread:251
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561597521320) at /usr/include/c++/9/thread:195
#21 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#23 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd106c8700 (LWP 40153)):
#0  0x00007fdd1241b7b7 in __pthread_mutex_unlock_usercnt (decr=1, mutex=0x56159be372c0) at pthread_mutex_unlock.c:357
#1  __GI___pthread_mutex_unlock (mutex=0x56159be372c0) at pthread_mutex_unlock.c:357
#2  0x0000561596244fdf in __gthread_mutex_unlock (__mutex=0x56159be372c0) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:779
#3  std::mutex::unlock (this=0x56159be372c0) at /usr/include/c++/9/bits/std_mutex.h:118
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/std_mutex.h:165
#5  MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:157
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#12 0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#13 0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#15 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#16 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596467f28) at /usr/include/c++/9/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596467f28) at /usr/include/c++/9/thread:251
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596467f20) at /usr/include/c++/9/thread:195
#25 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#27 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587440047872, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374c8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(class std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be374a0) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=12, alpha=0.84999999999999998, dangleSum=0.99563305866364515, networkSize=<optimized out>, edges=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true>.: 
std::unordered_map with 995 elements, pageHashMap=Python Exception <class 'gdb.error'> No type named std::__detail::_Hash_node<struct std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true>.: 
std::unordered_map with 500000 elements, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[New LWP 40167]
[New LWP 40168]
[New LWP 40169]
[New LWP 40170]
[New LWP 40171]
[New LWP 40172]
[New LWP 40173]
[New LWP 40174]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145

Thread 9 (Thread 0x7fdd106c8700 (LWP 40174)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37448) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x56159be37d20) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37d18) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37d18) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd106c7e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37ce0, __f=<optimized out>, __did_set=0x7fdd106c7e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37cf8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37cf8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd106c7e40: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37ce0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5615962b19f8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5615962b19f8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5615962b19f0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7fdd10ec9700 (LWP 40173)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37410) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x56159be374e0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be374d8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be374d8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd10ec8e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be374a0, __f=<optimized out>, __did_set=0x7fdd10ec8e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be374b8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be374b8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd10ec8e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be374a0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596460948) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596460948) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596460940) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7fdd116ca700 (LWP 40172)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373d8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x56159be37580) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37578) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37578) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd116c9e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37540, __f=<optimized out>, __did_set=0x7fdd116c9e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37558, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37558) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd116c9e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37540) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596469d48) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596469d48) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596469d40) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7fdd11ecb700 (LWP 40171)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be373a0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x56159be37620) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37618) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37618) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd11ecae70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be375e0, __f=<optimized out>, __did_set=0x7fdd11ecae27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be375f8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be375f8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd11ecae40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be375e0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596471438) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596471438) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596471430) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7fdd0fec7700 (LWP 40170)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37368) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x56159be37710) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37708) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37708) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0fec6e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be376d0, __f=<optimized out>, __did_set=0x7fdd0fec6e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be376e8, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be376e8) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0fec6e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be376d0) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649a218) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649a218) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649a210) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7fdd0bef2700 (LWP 40169)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be37330) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x56159be377b0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be377a8) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be377a8) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0bef1e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37770, __f=<optimized out>, __did_set=0x7fdd0bef1e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37788, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37788) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0bef1e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37770) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159649ffe8) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159649ffe8) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159649ffe0) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7fdd0b6f1700 (LWP 40168)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372f8) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x56159be37980) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37978) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37978) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0b6f0e70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37940, __f=<optimized out>, __did_set=0x7fdd0b6f0e27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37958, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37958) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0b6f0e40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37940) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x56159631a798) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x56159631a798) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x56159631a790) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7fdd0aef0700 (LWP 40167)):
#0  0x0000561596244fbb in MultiThreadedPageRankComputer::AtomicIterator<std::__detail::_Node_iterator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, false, true> >::fetch_advance (dist=8, this=0x56159be372c0) at /usr/include/c++/9/bits/hashtable_policy.h:359
#1  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x56159be37b50) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:265
#2  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#3  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#4  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x56159be37b48) at /usr/include/c++/9/thread:244
#5  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x56159be37b48) at /usr/include/c++/9/thread:251
#6  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7fdd0aeefe70) at /usr/include/c++/9/future:1339
#7  0x0000561596245525 in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/9/bits/std_function.h:151
#8  0x000056159623a66d in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/9/bits/std_function.h:683
#9  std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x56159be37b10, __f=<optimized out>, __did_set=0x7fdd0aeefe27) at /usr/include/c++/9/future:561
#10 0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b28, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#11 0x000056159623bab5 in __gthread_once (__func=<optimized out>, __once=0x56159be37b28) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#12 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7fdd0aeefe40: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x56159623a640 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/9/mutex:683
#13 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x56159be37b10) at /usr/include/c++/9/future:401
#14 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/9/future:1662
#15 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60
#16 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95
#17 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x561596316e18) at /usr/include/c++/9/thread:244
#18 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x561596316e18) at /usr/include/c++/9/thread:251
#19 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x561596316e10) at /usr/include/c++/9/thread:195
#20 0x00007fdd12303d84 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#21 0x00007fdd12417609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#22 0x00007fdd12142293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __pthread_clockjoin_ex (threadid=140587347937024, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145
#1  0x00007fdd12303fe7 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fdd1242047f in __pthread_once_slow (once_control=0x56159be37b38, init_routine=0x7fdd12302b80 <__once_proxy>) at pthread_once.c:116
#3  0x000056159623a5bf in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:700
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffe9048f3c0: (void (std::thread::*)(std::thread * const)) 0x7fdd12303fd0 <std::thread::join()>, __once=...) at /usr/include/c++/9/mutex:683
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/9/future:1642
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/9/future:1640
#7  0x0000561596241506 in std::__future_base::_State_baseV2::wait (this=0x56159be37b10) at /usr/include/c++/9/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5615962ab100) at /usr/include/c++/9/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5615962ab100) at /usr/include/c++/9/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=13, alpha=0.84999999999999998, dangleSum=0.99563305377032008, networkSize=<optimized out>, edges=std::unordered_map with 995 elements = {...}, pageHashMap=std::unordered_map with 500000 elements = {...}, pool=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (this=0x56159c95eff0, __capacity=70) at /usr/include/c++/9/bits/basic_string.h:210
210	      _M_capacity(size_type __capacity)

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (this=0x56159c95eff0, __capacity=70) at /usr/include/c++/9/bits/basic_string.h:210
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x56159c95eff0) at /usr/include/c++/9/bits/basic_string.h:563
#2  PageId::PageId (this=0x56159c95eff0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#3  PageIdAndRank::PageIdAndRank (this=0x56159c95eff0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageIdAndRank.hpp:9
#4  __gnu_cxx::new_allocator<PageIdAndRank>::construct<PageIdAndRank, PageIdAndRank> (this=0x7ffe9048f7e0, __p=0x56159c95eff0) at /usr/include/c++/9/ext/new_allocator.h:147
#5  std::allocator_traits<std::allocator<PageIdAndRank> >::construct<PageIdAndRank, PageIdAndRank> (__a=..., __p=0x56159c95eff0) at /usr/include/c++/9/bits/alloc_traits.h:484
#6  std::vector<PageIdAndRank, std::allocator<PageIdAndRank> >::emplace_back<PageIdAndRank> (this=0x7ffe9048f7e0) at /usr/include/c++/9/bits/vector.tcc:115
#7  std::vector<PageIdAndRank, std::allocator<PageIdAndRank> >::push_back (__x=..., this=0x7ffe9048f7e0) at /usr/include/c++/9/bits/stl_vector.h:1201
#8  MultiThreadedPageRankComputer::generateResult (iteration=13, network=..., pageHashMap=std::unordered_map with 500000 elements = {...}) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:305
#9  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:50
#10 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#11 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:366

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:366
#1  0x0000561596241ee0 in std::char_traits<char>::copy (__n=70, __s2=0x561597c270f0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", __s1=<optimized out>) at /usr/include/c++/9/bits/char_traits.h:365
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=70, __s=0x561597c270f0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", __d=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:351
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (__n=70, __s=0x561597c270f0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", __d=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:346
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (__k2=0x561597c27136 "", __k1=0x561597c270f0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", __p=<optimized out>) at /usr/include/c++/9/bits/basic_string.h:393
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x561597c27136 "", __beg=0x561597c270f0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/basic_string.tcc:225
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x561597c27136 "", __beg=0x561597c270f0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/basic_string.h:247
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x561597c27136 "", __beg=0x561597c270f0 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/basic_string.h:266
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725130945", this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/basic_string.h:451
#9  PageId::PageId (this=0x7ffe9048f5f0) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#10 std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>::pair (this=0x7ffe9048f5f0) at /usr/include/c++/9/bits/stl_pair.h:303
#11 MultiThreadedPageRankComputer::generateResult (iteration=13, network=..., pageHashMap=std::unordered_map with 500000 elements = {...}) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:304
#12 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:50
#13 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#14 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007fdd120b9a7a in _int_free (av=0x7fdd1220bb80 <main_arena>, p=0x56159882fac0, have_lock=0) at malloc.c:4231

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  0x00007fdd120b9a7a in _int_free (av=0x7fdd1220bb80 <main_arena>, p=0x56159882fac0, have_lock=0) at malloc.c:4231
#1  0x0000561596241d7d in __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true> >::deallocate (this=<optimized out>, __p=0x56159882fad0) at /usr/include/c++/9/ext/new_allocator.h:119
#2  std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true> > >::deallocate (__a=..., __n=1, __p=0x56159882fad0) at /usr/include/c++/9/bits/alloc_traits.h:470
#3  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true> > >::_M_deallocate_node_ptr (this=<optimized out>, __n=0x56159882fad0) at /usr/include/c++/9/bits/hashtable_policy.h:2113
#4  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x56159882fad0) at /usr/include/c++/9/bits/hashtable_policy.h:2103
#5  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x561596a15b80) at /usr/include/c++/9/bits/hashtable_policy.h:2124
#6  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:2028
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffe9048f500, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1352
#8  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::~unordered_map (this=0x7ffe9048f500, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#9  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:31
#10 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#11 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
malloc_consolidate (av=av@entry=0x7fdd1220bb80 <main_arena>) at malloc.c:4476

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  malloc_consolidate (av=av@entry=0x7fdd1220bb80 <main_arena>) at malloc.c:4476
#1  0x00007fdd120ba160 in _int_free (av=0x7fdd1220bb80 <main_arena>, p=0x56159a2751f0, have_lock=<optimized out>) at malloc.c:4400
#2  0x0000561596241dee in __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate (this=<synthetic pointer>, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#3  std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate (__a=<synthetic pointer>..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#4  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true> > >::_M_deallocate_buckets (this=0x7ffe9048f500, __n=<optimized out>, __bkts=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:2148
#5  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets (__n=<optimized out>, __bkts=<optimized out>, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:370
#6  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets (this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:375
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffe9048f500, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1353
#8  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::~unordered_map (this=0x7ffe9048f500, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#9  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:31
#10 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#11 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
unlink_chunk (p=p@entry=0x56159af81030, av=0x7fdd1220bb80 <main_arena>) at malloc.c:1462

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  unlink_chunk (p=p@entry=0x56159af81030, av=0x7fdd1220bb80 <main_arena>) at malloc.c:1462
#1  0x00007fdd120b8bfc in malloc_consolidate (av=av@entry=0x7fdd1220bb80 <main_arena>) at malloc.c:4494
#2  0x00007fdd120ba160 in _int_free (av=0x7fdd1220bb80 <main_arena>, p=0x56159a2751f0, have_lock=<optimized out>) at malloc.c:4400
#3  0x0000561596241dee in __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate (this=<synthetic pointer>, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#4  std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate (__a=<synthetic pointer>..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#5  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, true> > >::_M_deallocate_buckets (this=0x7ffe9048f500, __n=<optimized out>, __bkts=<optimized out>) at /usr/include/c++/9/bits/hashtable_policy.h:2148
#6  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets (__n=<optimized out>, __bkts=<optimized out>, this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:370
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets (this=0x7ffe9048f500) at /usr/include/c++/9/bits/hashtable.h:375
#8  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffe9048f500, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/hashtable.h:1353
#9  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::~unordered_map (this=0x7ffe9048f500, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/unordered_map.h:102
#10 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:31
#11 0x0000561596239901 in pageRankComputationWithNumNodes (num=500000, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#12 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__brk (addr=0x56159be59000) at ../sysdeps/unix/sysv/linux/x86_64/brk.c:31

Thread 1 (Thread 0x7fdd11ecc740 (LWP 39924)):
#0  __brk (addr=0x56159be59000) at ../sysdeps/unix/sysv/linux/x86_64/brk.c:31
#1  0x00007fdd121374d1 in __GI___sbrk (increment=-60940288) at sbrk.c:56
#2  __GI___sbrk (increment=-60940288) at sbrk.c:31
#3  0x00007fdd120bfd0d in __GI___default_morecore (increment=<optimized out>) at morecore.c:47
#4  0x00007fdd120b996a in systrim (pad=<optimized out>, av=0x7fdd1220bb80 <main_arena>, av=0x7fdd1220bb80 <main_arena>) at malloc.c:2781
#5  0x00007fdd120ba18d in _int_free (av=0x7fdd1220bb80 <main_arena>, p=0x56159dc37fb0, have_lock=<optimized out>) at malloc.c:4406
#6  0x0000561596239d30 in __gnu_cxx::new_allocator<PageIdAndRank>::deallocate (this=0x7ffe9048f7e0, __p=<optimized out>) at /usr/include/c++/9/ext/new_allocator.h:119
#7  std::allocator_traits<std::allocator<PageIdAndRank> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/alloc_traits.h:470
#8  std::_Vector_base<PageIdAndRank, std::allocator<PageIdAndRank> >::_M_deallocate (this=0x7ffe9048f7e0, __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:351
#9  std::_Vector_base<PageIdAndRank, std::allocator<PageIdAndRank> >::~_Vector_base (this=0x7ffe9048f7e0, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:332
#10 std::vector<PageIdAndRank, std::allocator<PageIdAndRank> >::~vector (this=<optimized out>, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:680
#11 pageRankComputationWithNumNodes (num=<optimized out>, computer=..., networkGenerator=...) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:19
#12 0x0000561596238dd4 in main (argc=3, argv=0x7ffe9048fda8) at /home/janw23/Workspace/MIMUW/uw-pw-pagerank/PageRank/tests/benchmarkTest.cpp:57
[Inferior 1 (process 39924) detached]
