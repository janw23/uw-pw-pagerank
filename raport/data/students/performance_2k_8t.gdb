
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
sysmalloc (nb=nb@entry=80, av=av@entry=0x7f10557c2c40 <main_arena>) at malloc.c:2723

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f10557c2c40 <main_arena>) at malloc.c:2723
#1  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f10557c2c40 <main_arena>, bytes=bytes@entry=69) at malloc.c:4133
#2  0x00007f105568b3e3 in __GI___libc_malloc (bytes=69) at malloc.c:3049
#3  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00005612d587d04f in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=<optimized out>, __beg=<optimized out>, this=0x5612d7971790) at /usr/include/c++/8/bits/char_traits.h:350
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=<optimized out>, __beg=<optimized out>, this=0x5612d7971790) at /usr/include/c++/8/bits/basic_string.h:236
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=<optimized out>, __beg=<optimized out>, this=0x5612d7971790) at /usr/include/c++/8/bits/basic_string.h:255
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x5612d7971790) at /usr/include/c++/8/bits/basic_string.h:440
#8  PageId::PageId (this=0x5612d7971790) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#9  std::_Construct<PageId, PageId const&> (__p=0x5612d7971790) at /usr/include/c++/8/bits/stl_construct.h:75
#10 std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<PageId const*, std::vector<PageId, std::allocator<PageId> > >, PageId*> (__result=0x5612d7969130, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:83
#11 std::uninitialized_copy<__gnu_cxx::__normal_iterator<PageId const*, std::vector<PageId, std::allocator<PageId> > >, PageId*> (__result=0x5612d7969130, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:134
#12 std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<PageId const*, std::vector<PageId, std::allocator<PageId> > >, PageId*, PageId> (__result=0x5612d7969130, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:289
#13 std::vector<PageId, std::allocator<PageId> >::vector (__x=std::vector of length 1983, capacity 2048 = {...}, this=0x5612d7177818) at /usr/include/c++/8/bits/stl_vector.h:463
#14 Page::Page (this=0x5612d71777d0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:13
#15 __gnu_cxx::new_allocator<Page>::construct<Page, Page const&> (this=0x7ffdbb270100, __p=0x5612d71777d0) at /usr/include/c++/8/ext/new_allocator.h:136
#16 std::allocator_traits<std::allocator<Page> >::construct<Page, Page const&> (__a=..., __p=0x5612d71777d0) at /usr/include/c++/8/bits/alloc_traits.h:475
#17 std::vector<Page, std::allocator<Page> >::push_back (__x=..., this=0x7ffdbb270100) at /usr/include/c++/8/bits/stl_vector.h:1079
#18 Network::addPage (page=..., this=0x7ffdbb270100) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/network.hpp:19
#19 SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:55
#20 0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#21 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00005612d587ca79 in SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:50
50	                if ((((i + 1) * 1337) ^ 0xc0ffee) % size > ((j + 2) * (j + 7)) % size) {

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00005612d587ca79 in SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:50
#1  0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#2  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055656b31 in _IO_vfprintf_internal (s=s@entry=0x7ffdbb26fab0, format=format@entry=0x5612d5884180 "%u", ap=ap@entry=0x7ffdbb26fc48) at vfprintf.c:1327

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055656b31 in _IO_vfprintf_internal (s=s@entry=0x7ffdbb26fab0, format=format@entry=0x5612d5884180 "%u", ap=ap@entry=0x7ffdbb26fc48) at vfprintf.c:1327
#1  0x00007f105567f7a0 in _IO_vsnprintf (string=0x7ffdbb26fc20 "", maxlen=<optimized out>, format=0x5612d5884180 "%u", args=0x7ffdbb26fc48) at vsnprintf.c:114
#2  0x00005612d587b4e2 in __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> (__convf=<optimized out>, __n=__n@entry=16, __fmt=__fmt@entry=0x5612d5884180 "%u") at /usr/include/c++/8/ext/string_conversions.h:99
#3  0x00005612d587ca9f in std:: (__val=740) at /usr/include/c++/8/bits/basic_string.h:6459
#4  NetworkGenerator::generatePageFromNum (this=0x7ffdbb2703a0, num=740) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:18
#5  NetworkGenerator::generatePageFromNumWithGeneratedId (this=0x7ffdbb2703a0, num=740) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:23
#6  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#7  0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#8  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055689810 in _int_malloc (av=av@entry=0x7f10557c2c40 <main_arena>, bytes=bytes@entry=2048) at malloc.c:3736

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055689810 in _int_malloc (av=av@entry=0x7f10557c2c40 <main_arena>, bytes=bytes@entry=2048) at malloc.c:3736
#1  0x00007f105568b3e3 in __GI___libc_malloc (bytes=2048) at malloc.c:3049
#2  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x00005612d587bcf9 in __gnu_cxx::new_allocator<PageId>::allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:219
#4  std::allocator_traits<std::allocator<PageId> >::allocate (__a=..., __n=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:436
#5  std::_Vector_base<PageId, std::allocator<PageId> >::_M_allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:296
#6  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x7ffdbb26fe78, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:427
#7  0x00005612d587d1b4 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x7ffdbb26fe78) at /usr/include/c++/8/bits/stl_iterator.h:783
#8  Page::addLink (link=..., this=0x7ffdbb26fe30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:38
#9  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#10 0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#11 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00005612d587ccbe in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data (this=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:81
81	      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00005612d587ccbe in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data (this=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:81
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251849", this=0x5612dd958000) at /usr/include/c++/8/bits/basic_string.h:439
#2  PageId::PageId (this=0x5612dd958000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#3  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x7ffdbb26fe78, __p=0x5612dd958000) at /usr/include/c++/8/ext/new_allocator.h:136
#4  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x5612dd958000) at /usr/include/c++/8/bits/alloc_traits.h:475
#5  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x7ffdbb26fe78) at /usr/include/c++/8/bits/stl_vector.h:1079
#6  Page::addLink (link=..., this=0x7ffdbb26fe30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:38
#7  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#8  0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#9  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00005612d587ca67 in SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:50
50	                if ((((i + 1) * 1337) ^ 0xc0ffee) % size > ((j + 2) * (j + 7)) % size) {

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00005612d587ca67 in SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:50
#1  0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#2  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7ffdbb26feb8) at /usr/include/c++/8/bits/basic_string.h:656
656	      ~basic_string()

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7ffdbb26feb8) at /usr/include/c++/8/bits/basic_string.h:656
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7ffdbb26feb8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#2  Page::~Page (this=0x7ffdbb26fe90, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:13
#3  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#4  0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#5  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055a82ad8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055a82ad8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587d11a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x5612e1b20aa3 "", __beg=0x5612e1b20a60 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725225", this=0x7ffdbb26fef0) at /usr/include/c++/8/bits/char_traits.h:352
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x5612e1b20aa3 "", __beg=0x5612e1b20a60 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725225", this=0x7ffdbb26fef0) at /usr/include/c++/8/bits/basic_string.h:236
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x5612e1b20aa3 "", __beg=0x5612e1b20a60 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725225", this=0x7ffdbb26fef0) at /usr/include/c++/8/bits/basic_string.h:255
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725225", this=0x7ffdbb26fef0) at /usr/include/c++/8/bits/basic_string.h:440
#5  PageId::PageId (this=0x7ffdbb26fef0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  Page::getId (this=0x7ffdbb26fe90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:33
#7  SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:51
#8  0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#9  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f10556881a6 in _int_free (av=0x7f10557c2c40 <main_arena>, p=0x5612e3318070, have_lock=0) at malloc.c:4251

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f10556881a6 in _int_free (av=0x7f10557c2c40 <main_arena>, p=0x5612e3318070, have_lock=0) at malloc.c:4251
#1  0x00005612d587d205 in __gnu_cxx::new_allocator<char>::deallocate (this=0x5612e358b340, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x5612e358b340) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x5612e358b340) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x5612e358b340, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x5612e358b340, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x5612e358b340) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x5612e358b340) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x5612e358f260, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x7ffdbb26fe78, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 Page::~Page (this=0x7ffdbb26fe30, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:13
#13 SimpleNetworkGenerator::generateNetworkOfSize (this=0x7ffdbb2703a0, size=2000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/./lib/networkGenerator.hpp:43
#14 0x00005612d587901d in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#15 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00005612d587ebb4 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=16293441567539356295, __k=..., __n=2751, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable_policy.h:1395
1395	      _M_bucket_index(const __node_type* __p, std::size_t __n) const

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00005612d587ebb4 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=16293441567539356295, __k=..., __n=2751, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable_policy.h:1395
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=16293441567539356295, __key=..., __bkt=2751, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:654
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=this@entry=0x7ffdbb26fe20, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:707
#3  0x00005612d587fa6d in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/unordered_map.h:973
#4  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:213
#5  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#6  0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#7  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3338]
[New LWP 3339]
[New LWP 3340]
[New LWP 3341]
[New LWP 3343]
[New LWP 3362]
[New LWP 3363]
[New LWP 3364]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3364)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3c92ed0) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3c92ed0) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3c92ed0) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c92eb8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6c82fe0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6c82fd0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3363)):
#0  __lll_lock_wait_private () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:63
#1  0x00007f1055688783 in _int_free (av=0x7f1044000020, p=0x7f1044067bc0, have_lock=<optimized out>) at malloc.c:4294
#2  0x00005612d587be9c in __gnu_cxx::new_allocator<PageId>::deallocate (this=<optimized out>, __p=0x7f1044067bd0) at /usr/include/c++/8/ext/new_allocator.h:116
#3  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=0x7f1044067bd0) at /usr/include/c++/8/bits/alloc_traits.h:462
#4  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=<optimized out>, __n=<optimized out>, __p=0x7f1044067bd0) at /usr/include/c++/8/bits/stl_vector.h:304
#5  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3c92eb8, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:469
#6  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3c92eb8) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c92eb8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#8  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6cea4e0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#9  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#10 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:244
#12 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:253
#13 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6cea4d0) at /usr/include/c++/8/thread:196
#14 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#16 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3362)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3c92ed0) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3c92ed0) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3c92ed0) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c92eb8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6d4ea80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6d4ea70) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3343)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f104c000bb2 "", __beg=0x7f104c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872540", this=0x7f1030094930) at /usr/include/c++/8/bits/basic_string.tcc:206
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f104c000bb2 "", __beg=0x7f104c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872540", this=0x7f1030094930) at /usr/include/c++/8/bits/basic_string.h:236
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f104c000bb2 "", __beg=0x7f104c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872540", this=0x7f1030094930) at /usr/include/c++/8/bits/basic_string.h:255
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872540", this=0x7f1030094930) at /usr/include/c++/8/bits/basic_string.h:440
#4  PageId::PageId (this=0x7f1030094930) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#5  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3cd74c8, __p=0x7f1030094930) at /usr/include/c++/8/ext/new_allocator.h:136
#6  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1030094930) at /usr/include/c++/8/bits/alloc_traits.h:475
#7  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cd74c8) at /usr/include/c++/8/bits/stl_vector.h:1079
#8  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd74c8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#9  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6e17f40) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#10 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#11 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#12 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6e17f38) at /usr/include/c++/8/thread:244
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6e17f38) at /usr/include/c++/8/thread:253
#14 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6e17f30) at /usr/include/c++/8/thread:196
#15 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#16 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#17 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3341)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=4096, h=0x7f1040000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=2064, av=av@entry=0x7f1040000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1040000020, bytes=bytes@entry=2048) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=2048) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587bcf9 in __gnu_cxx::new_allocator<PageId>::allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:219
#7  std::allocator_traits<std::allocator<PageId> >::allocate (__a=..., __n=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:436
#8  std::_Vector_base<PageId, std::allocator<PageId> >::_M_allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:296
#9  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3cd3088, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:427
#10 0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cd3088) at /usr/include/c++/8/bits/stl_iterator.h:783
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd3088) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6efb9b0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:253
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6efb9a0) at /usr/include/c++/8/thread:196
#18 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#20 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3340)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e39bb650) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e39bb650) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e39bb650) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e39bb638) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6edbcc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6edbcb0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3339)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=4096, h=0x7f1048000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f1048000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1048000020, bytes=bytes@entry=67) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=67) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb2 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872553", this=0x7f1044062f80) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1048000bb2 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872553", this=0x7f1044062f80) at /usr/include/c++/8/bits/basic_string.h:236
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb2 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872553", this=0x7f1044062f80) at /usr/include/c++/8/bits/basic_string.h:255
#9  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872553", this=0x7f1044062f80) at /usr/include/c++/8/bits/basic_string.h:440
#10 PageId::PageId (this=0x7f1044062f80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#11 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3ce5778, __p=0x7f1044062f80) at /usr/include/c++/8/ext/new_allocator.h:136
#12 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1044062f80) at /usr/include/c++/8/bits/alloc_traits.h:475
#13 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ce5778) at /usr/include/c++/8/bits/stl_vector.h:1079
#14 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ce5778) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#15 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6b4b970) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#16 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#17 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6b4b968) at /usr/include/c++/8/thread:244
#19 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6b4b968) at /usr/include/c++/8/thread:253
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6b4b960) at /usr/include/c++/8/thread:196
#21 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#23 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3338)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=4096, h=0x7f1044000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=2064, av=av@entry=0x7f1044000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1044000020, bytes=bytes@entry=2048) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=2048) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587bcf9 in __gnu_cxx::new_allocator<PageId>::allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:219
#7  std::allocator_traits<std::allocator<PageId> >::allocate (__a=..., __n=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:436
#8  std::_Vector_base<PageId, std::allocator<PageId> >::_M_allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:296
#9  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e39bb638, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:427
#10 0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e39bb638) at /usr/include/c++/8/bits/stl_iterator.h:783
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e39bb638) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d64ddfc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:253
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d64ddfb0) at /usr/include/c++/8/thread:196
#18 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#20 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00005612d587fc28 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdbb26fda0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3338]
[New LWP 3339]
[New LWP 3340]
[New LWP 3341]
[New LWP 3343]
[New LWP 3362]
[New LWP 3363]
[New LWP 3364]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3364)):
#0  __lll_lock_wait_private () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:63
#1  0x00007f1055688783 in _int_free (av=0x7f1040000020, p=0x7f10400af1f0, have_lock=<optimized out>) at malloc.c:4294
#2  0x00005612d587be9c in __gnu_cxx::new_allocator<PageId>::deallocate (this=<optimized out>, __p=0x7f10400af200) at /usr/include/c++/8/ext/new_allocator.h:116
#3  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=0x7f10400af200) at /usr/include/c++/8/bits/alloc_traits.h:462
#4  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=<optimized out>, __n=<optimized out>, __p=0x7f10400af200) at /usr/include/c++/8/bits/stl_vector.h:304
#5  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3d04658, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:469
#6  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3d04658) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3d04658) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#8  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6c82fe0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#9  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#10 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:244
#12 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:253
#13 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6c82fd0) at /usr/include/c++/8/thread:196
#14 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#16 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3363)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3bfe2b0) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3bfe2b0) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3bfe2b0) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3bfe298) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6cea4e0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6cea4d0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3362)):
#0  __lll_lock_wait_private () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:63
#1  0x00007f1055688783 in _int_free (av=0x7f1040000020, p=0x7f10402ff970, have_lock=<optimized out>) at malloc.c:4294
#2  0x00005612d587be9c in __gnu_cxx::new_allocator<PageId>::deallocate (this=<optimized out>, __p=0x7f10402ff980) at /usr/include/c++/8/ext/new_allocator.h:116
#3  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=0x7f10402ff980) at /usr/include/c++/8/bits/alloc_traits.h:462
#4  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=<optimized out>, __n=<optimized out>, __p=0x7f10402ff980) at /usr/include/c++/8/bits/stl_vector.h:304
#5  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3ce4738, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:469
#6  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ce4738) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ce4738) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#8  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6d4ea80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#9  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#10 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:244
#12 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:253
#13 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6d4ea70) at /usr/include/c++/8/thread:196
#14 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#16 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3343)):
#0  0x00005612d587bdae in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (this=0x7f104c577ff0, __capacity=66) at /usr/include/c++/8/bits/basic_string.h:199
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x7f104c577ff0) at /usr/include/c++/8/bits/basic_string.h:552
#2  PageId::PageId (this=0x7f104c577ff0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#3  std::_Construct<PageId, PageId> (__p=0x7f104c577ff0) at /usr/include/c++/8/bits/stl_construct.h:75
#4  std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:83
#5  std::uninitialized_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:134
#6  std::__uninitialized_copy_a<std::move_iterator<PageId*>, PageId*, PageId> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:289
#7  std::__uninitialized_move_if_noexcept_a<PageId*, PageId*, std::allocator<PageId> > (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_uninitialized.h:311
#8  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3bfe298, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:447
#9  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3bfe298) at /usr/include/c++/8/bits/stl_iterator.h:783
#10 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3bfe298) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#11 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6e17f40) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#12 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6e17f38) at /usr/include/c++/8/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6e17f38) at /usr/include/c++/8/thread:253
#16 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6e17f30) at /usr/include/c++/8/thread:196
#17 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#18 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#19 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3341)):
#0  sysmalloc (nb=nb@entry=16400, av=av@entry=0x7f1040000020) at malloc.c:2723
#1  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1040000020, bytes=bytes@entry=16384) at malloc.c:4133
#2  0x00007f105568b56a in __GI___libc_malloc (bytes=16384) at malloc.c:3057
#3  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00005612d587bcf9 in __gnu_cxx::new_allocator<PageId>::allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:219
#5  std::allocator_traits<std::allocator<PageId> >::allocate (__a=..., __n=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:436
#6  std::_Vector_base<PageId, std::allocator<PageId> >::_M_allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:296
#7  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3c725d8, __position=__position@entry={id = "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725176\000\000\000\000\000U\000\000\000\000\000\000\000\062\060\060\060f"}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:427
#8  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3c725d8) at /usr/include/c++/8/bits/stl_iterator.h:783
#9  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c725d8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#10 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6efb9b0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#11 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#12 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:244
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:253
#15 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6efb9a0) at /usr/include/c++/8/thread:196
#16 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#17 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#18 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3340)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3ce4750) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3ce4750) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3ce4750) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ce4738) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6edbcc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6edbcb0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3339)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (this=0x7f1040499ff0, __capacity=67) at /usr/include/c++/8/bits/basic_string.h:199
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb3 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725337", this=0x7f1040499ff0) at /usr/include/c++/8/bits/basic_string.tcc:220
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1048000bb3 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725337", this=0x7f1040499ff0) at /usr/include/c++/8/bits/basic_string.h:236
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb3 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725337", this=0x7f1040499ff0) at /usr/include/c++/8/bits/basic_string.h:255
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725337", this=0x7f1040499ff0) at /usr/include/c++/8/bits/basic_string.h:440
#5  PageId::PageId (this=0x7f1040499ff0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3c9ae88, __p=0x7f1040499ff0) at /usr/include/c++/8/ext/new_allocator.h:136
#7  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1040499ff0) at /usr/include/c++/8/bits/alloc_traits.h:475
#8  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3c9ae88) at /usr/include/c++/8/bits/stl_vector.h:1079
#9  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c9ae88) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#10 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6b4b970) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#11 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#12 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6b4b968) at /usr/include/c++/8/thread:244
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6b4b968) at /usr/include/c++/8/thread:253
#15 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6b4b960) at /usr/include/c++/8/thread:196
#16 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#17 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#18 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3338)):
#0  __pthread_mutex_unlock_usercnt (mutex=0x5612e3c679c0, decr=1) at pthread_mutex_unlock.c:51
#1  0x00005612d587f449 in __gthread_mutex_unlock (__mutex=0x5612e3c679c0) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:778
#2  std::mutex::unlock (this=0x5612e3c679c0) at /usr/include/c++/8/bits/std_mutex.h:121
#3  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/std_mutex.h:168
#4  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c679a8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#5  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d64ddfc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#6  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#7  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:244
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:253
#10 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d64ddfb0) at /usr/include/c++/8/thread:196
#11 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#12 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#13 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00005612d587fc28 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdbb26fda0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements, network=..., pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3338]
[New LWP 3339]
[New LWP 3340]
[New LWP 3341]
[New LWP 3343]
[New LWP 3362]
[New LWP 3363]
[New LWP 3364]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3364)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=4096, h=0x7f1028000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f1028000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1028000020, bytes=bytes@entry=68) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=68) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1028000b63 "", __beg=0x7f1028000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725680", this=0x7f104c3a6e90) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1028000b63 "", __beg=0x7f1028000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725680", this=0x7f104c3a6e90) at /usr/include/c++/8/bits/basic_string.h:236
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1028000b63 "", __beg=0x7f1028000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725680", this=0x7f104c3a6e90) at /usr/include/c++/8/bits/basic_string.h:255
#9  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725680", this=0x7f104c3a6e90) at /usr/include/c++/8/bits/basic_string.h:440
#10 PageId::PageId (this=0x7f104c3a6e90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#11 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3ceec28, __p=0x7f104c3a6e90) at /usr/include/c++/8/ext/new_allocator.h:136
#12 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f104c3a6e90) at /usr/include/c++/8/bits/alloc_traits.h:475
#13 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ceec28) at /usr/include/c++/8/bits/stl_vector.h:1079
#14 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ceec28) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#15 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6c82fe0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#16 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#17 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:244
#19 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:253
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6c82fd0) at /usr/include/c++/8/thread:196
#21 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#23 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3363)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=4096, h=0x7f1030000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f1030000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1030000020, bytes=bytes@entry=68) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=68) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1030000b63 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725687", this=0x7f103454a310) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1030000b63 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725687", this=0x7f103454a310) at /usr/include/c++/8/bits/basic_string.h:236
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1030000b63 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725687", this=0x7f103454a310) at /usr/include/c++/8/bits/basic_string.h:255
#9  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725687", this=0x7f103454a310) at /usr/include/c++/8/bits/basic_string.h:440
#10 PageId::PageId (this=0x7f103454a310) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#11 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3c38818, __p=0x7f103454a310) at /usr/include/c++/8/ext/new_allocator.h:136
#12 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f103454a310) at /usr/include/c++/8/bits/alloc_traits.h:475
#13 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3c38818) at /usr/include/c++/8/bits/stl_vector.h:1079
#14 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c38818) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#15 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6cea4e0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#16 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#17 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:244
#19 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:253
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6cea4d0) at /usr/include/c++/8/thread:196
#21 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#23 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3362)):
#0  0x00005612d587bd94 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider (__a=..., __dat=0x7f103499c010 "", this=0x7f103499c000) at /usr/include/c++/8/ext/new_allocator.h:81
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x7f103499c000) at /usr/include/c++/8/bits/basic_string.h:542
#2  PageId::PageId (this=0x7f103499c000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#3  std::_Construct<PageId, PageId> (__p=0x7f103499c000) at /usr/include/c++/8/bits/stl_construct.h:75
#4  std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:83
#5  std::uninitialized_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:134
#6  std::__uninitialized_copy_a<std::move_iterator<PageId*>, PageId*, PageId> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:289
#7  std::__uninitialized_move_if_noexcept_a<PageId*, PageId*, std::allocator<PageId> > (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_uninitialized.h:311
#8  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3ca0cc8, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:447
#9  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ca0cc8) at /usr/include/c++/8/bits/stl_iterator.h:783
#10 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ca0cc8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#11 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6d4ea80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#12 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:253
#16 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6d4ea70) at /usr/include/c++/8/thread:196
#17 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#18 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#19 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3343)):
#0  0x00005612d587eb95 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=177811032849629767, __k=..., __n=2378, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:1554
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=177811032849629767, __key=..., __bkt=2378, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:654
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdbb26fe20, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:707
#3  0x00005612d587f39c in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:973
#4  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6e17f40) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#5  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6e17f38) at /usr/include/c++/8/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6e17f38) at /usr/include/c++/8/thread:253
#9  std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6e17f30) at /usr/include/c++/8/thread:196
#10 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#11 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#12 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3341)):
#0  sysmalloc (nb=nb@entry=32784, av=av@entry=0x7f1040000020) at malloc.c:2723
#1  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1040000020, bytes=bytes@entry=32768) at malloc.c:4133
#2  0x00007f105568b56a in __GI___libc_malloc (bytes=32768) at malloc.c:3057
#3  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00005612d587bcf9 in __gnu_cxx::new_allocator<PageId>::allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:219
#5  std::allocator_traits<std::allocator<PageId> >::allocate (__a=..., __n=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:436
#6  std::_Vector_base<PageId, std::allocator<PageId> >::_M_allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:296
#7  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3c644d8, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:427
#8  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3c644d8) at /usr/include/c++/8/bits/stl_iterator.h:783
#9  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c644d8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#10 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6efb9b0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#11 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#12 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:244
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:253
#15 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6efb9a0) at /usr/include/c++/8/thread:196
#16 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#17 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#18 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3340)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (this=0x7f104c99fff0, __capacity=67) at /usr/include/c++/8/bits/basic_string.h:199
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c000bb3 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725690", this=0x7f104c99fff0) at /usr/include/c++/8/bits/basic_string.tcc:220
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f103c000bb3 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725690", this=0x7f104c99fff0) at /usr/include/c++/8/bits/basic_string.h:236
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c000bb3 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725690", this=0x7f104c99fff0) at /usr/include/c++/8/bits/basic_string.h:255
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725690", this=0x7f104c99fff0) at /usr/include/c++/8/bits/basic_string.h:440
#5  PageId::PageId (this=0x7f104c99fff0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3bebd98, __p=0x7f104c99fff0) at /usr/include/c++/8/ext/new_allocator.h:136
#7  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f104c99fff0) at /usr/include/c++/8/bits/alloc_traits.h:475
#8  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3bebd98) at /usr/include/c++/8/bits/stl_vector.h:1079
#9  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3bebd98) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#10 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6edbcc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#11 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#12 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:244
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:253
#15 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6edbcb0) at /usr/include/c++/8/thread:196
#16 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#17 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#18 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3339)):
#0  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f1048000020) at malloc.c:2723
#1  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1048000020, bytes=bytes@entry=68) at malloc.c:4133
#2  0x00007f105568b56a in __GI___libc_malloc (bytes=68) at malloc.c:3057
#3  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb3 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725689", this=0x7f1028825e30) at /usr/include/c++/8/bits/stl_iterator.h:783
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1048000bb3 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725689", this=0x7f1028825e30) at /usr/include/c++/8/bits/basic_string.h:236
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb3 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725689", this=0x7f1028825e30) at /usr/include/c++/8/bits/basic_string.h:255
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725689", this=0x7f1028825e30) at /usr/include/c++/8/bits/basic_string.h:440
#8  PageId::PageId (this=0x7f1028825e30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#9  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e39baa08, __p=0x7f1028825e30) at /usr/include/c++/8/ext/new_allocator.h:136
#10 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1028825e30) at /usr/include/c++/8/bits/alloc_traits.h:475
#11 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e39baa08) at /usr/include/c++/8/bits/stl_vector.h:1079
#12 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e39baa08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#13 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6b4b970) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#14 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#15 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6b4b968) at /usr/include/c++/8/thread:244
#17 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6b4b968) at /usr/include/c++/8/thread:253
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6b4b960) at /usr/include/c++/8/thread:196
#19 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#21 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3338)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3ca57a0) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3ca57a0) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3ca57a0) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ca5788) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d64ddfc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d64ddfb0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00005612d587fc28 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdbb26fda0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3338]
[New LWP 3339]
[New LWP 3340]
[New LWP 3341]
[New LWP 3343]
[New LWP 3362]
[New LWP 3363]
[New LWP 3364]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3364)):
#0  0x00005612d587eb69 in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#1  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251304") at /usr/include/c++/8/bits/basic_string.h:6642
#2  PageIdHash::operator() (this=0x7ffdbb26fe20, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#3  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fe20, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#4  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdbb26fe20, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:705
#5  0x00005612d587f39c in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:973
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6c82fe0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6c82fd0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3363)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=4096, h=0x7f1030000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f1030000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1030000020, bytes=bytes@entry=69) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1030000b64 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251030", this=0x7f103ca33cf0) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1030000b64 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251030", this=0x7f103ca33cf0) at /usr/include/c++/8/bits/basic_string.h:236
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1030000b64 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251030", this=0x7f103ca33cf0) at /usr/include/c++/8/bits/basic_string.h:255
#9  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251030", this=0x7f103ca33cf0) at /usr/include/c++/8/bits/basic_string.h:440
#10 PageId::PageId (this=0x7f103ca33cf0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#11 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3cd7328, __p=0x7f103ca33cf0) at /usr/include/c++/8/ext/new_allocator.h:136
#12 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f103ca33cf0) at /usr/include/c++/8/bits/alloc_traits.h:475
#13 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cd7328) at /usr/include/c++/8/bits/stl_vector.h:1079
#14 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd7328) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#15 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6cea4e0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#16 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#17 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:244
#19 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:253
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6cea4d0) at /usr/include/c++/8/thread:196
#21 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#23 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3362)):
#0  _int_malloc (av=av@entry=0x7f1034000020, bytes=bytes@entry=69) at malloc.c:3986
#1  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#2  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1034000b64 "", __beg=0x7f1034000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251026", this=0x7f10446b2510) at /usr/include/c++/8/bits/stl_iterator.h:783
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1034000b64 "", __beg=0x7f1034000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251026", this=0x7f10446b2510) at /usr/include/c++/8/bits/basic_string.h:236
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1034000b64 "", __beg=0x7f1034000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251026", this=0x7f10446b2510) at /usr/include/c++/8/bits/basic_string.h:255
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251026", this=0x7f10446b2510) at /usr/include/c++/8/bits/basic_string.h:440
#7  PageId::PageId (this=0x7f10446b2510) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3cd1b68, __p=0x7f10446b2510) at /usr/include/c++/8/ext/new_allocator.h:136
#9  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f10446b2510) at /usr/include/c++/8/bits/alloc_traits.h:475
#10 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cd1b68) at /usr/include/c++/8/bits/stl_vector.h:1079
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd1b68) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6d4ea80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:253
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6d4ea70) at /usr/include/c++/8/thread:196
#18 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#20 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3343)):
#0  sysmalloc (nb=nb@entry=65552, av=av@entry=0x7f104c000020) at malloc.c:2723
#1  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f104c000020, bytes=bytes@entry=65536) at malloc.c:4133
#2  0x00007f105568b56a in __GI___libc_malloc (bytes=65536) at malloc.c:3057
#3  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00005612d587bcf9 in __gnu_cxx::new_allocator<PageId>::allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:219
#5  std::allocator_traits<std::allocator<PageId> >::allocate (__a=..., __n=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:436
#6  std::_Vector_base<PageId, std::allocator<PageId> >::_M_allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:296
#7  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3cdc878, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:427
#8  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cdc878) at /usr/include/c++/8/bits/stl_iterator.h:783
#9  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cdc878) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#10 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6e17f40) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#11 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#12 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#13 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6e17f38) at /usr/include/c++/8/thread:244
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6e17f38) at /usr/include/c++/8/thread:253
#15 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6e17f30) at /usr/include/c++/8/thread:196
#16 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#17 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#18 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3341)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=8192, h=0x7f1040000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=8208, av=av@entry=0x7f1040000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1040000020, bytes=bytes@entry=8192) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=8192) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587bcf9 in __gnu_cxx::new_allocator<PageId>::allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:219
#7  std::allocator_traits<std::allocator<PageId> >::allocate (__a=..., __n=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:436
#8  std::_Vector_base<PageId, std::allocator<PageId> >::_M_allocate (this=<optimized out>, __n=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:296
#9  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3ce8c48, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:427
#10 0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ce8c48) at /usr/include/c++/8/bits/stl_iterator.h:783
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ce8c48) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6efb9b0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:253
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6efb9a0) at /usr/include/c++/8/thread:196
#18 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#20 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3340)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3cd5530) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3cd5530) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3cd5530) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd5518) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6edbcc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6edbcb0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3339)):
#0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data (this=0x7f1040818a70, __p=0x7f1040818a80 "C") at /usr/include/c++/8/bits/basic_string.h:179
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x7f1048723400) at /usr/include/c++/8/bits/basic_string.h:559
#2  PageId::PageId (this=0x7f1048723400) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#3  std::_Construct<PageId, PageId> (__p=0x7f1048723400) at /usr/include/c++/8/bits/stl_construct.h:75
#4  std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:83
#5  std::uninitialized_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:134
#6  std::__uninitialized_copy_a<std::move_iterator<PageId*>, PageId*, PageId> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:289
#7  std::__uninitialized_move_if_noexcept_a<PageId*, PageId*, std::allocator<PageId> > (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_uninitialized.h:311
#8  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3cd4198, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:447
#9  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cd4198) at /usr/include/c++/8/bits/stl_iterator.h:783
#10 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd4198) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#11 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6b4b970) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#12 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6b4b968) at /usr/include/c++/8/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6b4b968) at /usr/include/c++/8/thread:253
#16 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6b4b960) at /usr/include/c++/8/thread:196
#17 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#18 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#19 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3338)):
#0  0x00005612d587f3e3 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data (this=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:81
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251032", this=0x7f1030a0a000) at /usr/include/c++/8/bits/basic_string.h:439
#2  PageId::PageId (this=0x7f1030a0a000) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#3  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3c94a58, __p=0x7f1030a0a000) at /usr/include/c++/8/ext/new_allocator.h:136
#4  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1030a0a000) at /usr/include/c++/8/bits/alloc_traits.h:475
#5  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3c94a58) at /usr/include/c++/8/bits/stl_vector.h:1079
#6  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c94a58) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#7  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d64ddfc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#8  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:253
#12 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d64ddfb0) at /usr/include/c++/8/thread:196
#13 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#14 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#15 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00005612d587fc28 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdbb26fda0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3338]
[New LWP 3339]
[New LWP 3340]
[New LWP 3341]
[New LWP 3343]
[New LWP 3362]
[New LWP 3363]
[New LWP 3364]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3364)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3cdc140) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3cdc140) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3cdc140) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cdc128) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6c82fe0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6c82fd0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3363)):
#0  0x00007f105568b540 in __GI___libc_malloc (bytes=69) at malloc.c:3055
#1  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1030000b64 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251434", this=0x7f10292aefe0) at /usr/include/c++/8/bits/stl_iterator.h:783
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1030000b64 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251434", this=0x7f10292aefe0) at /usr/include/c++/8/bits/basic_string.h:236
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1030000b64 "", __beg=0x7f1030000b20 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251434", this=0x7f10292aefe0) at /usr/include/c++/8/bits/basic_string.h:255
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251434", this=0x7f10292aefe0) at /usr/include/c++/8/bits/basic_string.h:440
#6  PageId::PageId (this=0x7f10292aefe0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3cdc128, __p=0x7f10292aefe0) at /usr/include/c++/8/ext/new_allocator.h:136
#8  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f10292aefe0) at /usr/include/c++/8/bits/alloc_traits.h:475
#9  std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cdc128) at /usr/include/c++/8/bits/stl_vector.h:1079
#10 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cdc128) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#11 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6cea4e0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#12 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:253
#16 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6cea4d0) at /usr/include/c++/8/thread:196
#17 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#18 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#19 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3362)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3d01f70) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3d01f70) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3d01f70) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3d01f58) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6d4ea80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6d4ea70) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3343)):
#0  0x00007f1055689962 in _int_malloc (av=av@entry=0x7f104c000020, bytes=bytes@entry=69) at malloc.c:3634
#1  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#2  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f104c000bb4 "", __beg=0x7f104c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251443", this=0x7f1028c7cc80) at /usr/include/c++/8/bits/stl_iterator.h:783
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f104c000bb4 "", __beg=0x7f104c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251443", this=0x7f1028c7cc80) at /usr/include/c++/8/bits/basic_string.h:236
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f104c000bb4 "", __beg=0x7f104c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251443", this=0x7f1028c7cc80) at /usr/include/c++/8/bits/basic_string.h:255
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251443", this=0x7f1028c7cc80) at /usr/include/c++/8/bits/basic_string.h:440
#7  PageId::PageId (this=0x7f1028c7cc80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3901348, __p=0x7f1028c7cc80) at /usr/include/c++/8/ext/new_allocator.h:136
#9  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1028c7cc80) at /usr/include/c++/8/bits/alloc_traits.h:475
#10 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3901348) at /usr/include/c++/8/bits/stl_vector.h:1079
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3901348) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6e17f40) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6e17f38) at /usr/include/c++/8/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6e17f38) at /usr/include/c++/8/thread:253
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6e17f30) at /usr/include/c++/8/thread:196
#18 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#20 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3341)):
#0  0x00005612d587eb99 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=2479586511667743899, __k=..., __n=2234, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:1554
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=2479586511667743899, __key=..., __bkt=2234, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:654
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdbb26fe20, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:707
#3  0x00005612d587f39c in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:973
#4  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6efb9b0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#5  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:253
#9  std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6efb9a0) at /usr/include/c++/8/thread:196
#10 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#11 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#12 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3340)):
#0  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f103c000020) at malloc.c:2723
#1  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f103c000020, bytes=bytes@entry=69) at malloc.c:4133
#2  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#3  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c000bb4 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251432", this=0x7f104496d120) at /usr/include/c++/8/bits/stl_iterator.h:783
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f103c000bb4 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251432", this=0x7f104496d120) at /usr/include/c++/8/bits/basic_string.h:236
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c000bb4 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251432", this=0x7f104496d120) at /usr/include/c++/8/bits/basic_string.h:255
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251432", this=0x7f104496d120) at /usr/include/c++/8/bits/basic_string.h:440
#8  PageId::PageId (this=0x7f104496d120) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#9  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3d01f58, __p=0x7f104496d120) at /usr/include/c++/8/ext/new_allocator.h:136
#10 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f104496d120) at /usr/include/c++/8/bits/alloc_traits.h:475
#11 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3d01f58) at /usr/include/c++/8/bits/stl_vector.h:1079
#12 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3d01f58) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#13 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6edbcc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#14 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#15 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:244
#17 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:253
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6edbcb0) at /usr/include/c++/8/thread:196
#19 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#21 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3339)):
#0  _int_malloc (av=av@entry=0x7f1048000020, bytes=bytes@entry=69) at malloc.c:4108
#1  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#2  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb4 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251441", this=0x7f10351d95e0) at /usr/include/c++/8/bits/stl_iterator.h:783
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1048000bb4 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251441", this=0x7f10351d95e0) at /usr/include/c++/8/bits/basic_string.h:236
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb4 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251441", this=0x7f10351d95e0) at /usr/include/c++/8/bits/basic_string.h:255
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251441", this=0x7f10351d95e0) at /usr/include/c++/8/bits/basic_string.h:440
#7  PageId::PageId (this=0x7f10351d95e0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3ce59e8, __p=0x7f10351d95e0) at /usr/include/c++/8/ext/new_allocator.h:136
#9  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f10351d95e0) at /usr/include/c++/8/bits/alloc_traits.h:475
#10 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ce59e8) at /usr/include/c++/8/bits/stl_vector.h:1079
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ce59e8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6b4b970) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6b4b968) at /usr/include/c++/8/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6b4b968) at /usr/include/c++/8/thread:253
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6b4b960) at /usr/include/c++/8/thread:196
#18 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#20 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3338)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3cd85f0) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3cd85f0) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3cd85f0) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd85d8) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d64ddfc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d64ddfb0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00005612d587fc28 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdbb26fda0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements = {...}, network=..., pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3338]
[New LWP 3339]
[New LWP 3340]
[New LWP 3341]
[New LWP 3343]
[New LWP 3362]
[New LWP 3363]
[New LWP 3364]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3364)):
#0  0x00005612d587eb95 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=5203624797104310314, __k=..., __n=2175, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:1554
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=5203624797104310314, __key=..., __bkt=2175, this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:654
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (this=0x7ffdbb26fe20, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:707
#3  0x00005612d587f39c in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::operator[] (__k=..., this=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:973
#4  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6c82fe0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#5  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6c82fd8) at /usr/include/c++/8/thread:253
#9  std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6c82fd0) at /usr/include/c++/8/thread:196
#10 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#11 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#12 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3363)):
#0  __lll_unlock_wake () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:339
#1  0x00007f1055af4ee2 in __pthread_mutex_unlock_usercnt (mutex=0x5612e3ccce50, decr=<optimized out>) at pthread_mutex_unlock.c:56
#2  0x00005612d587f449 in __gthread_mutex_unlock (__mutex=0x5612e3ccce50) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:778
#3  std::mutex::unlock (this=0x5612e3ccce50) at /usr/include/c++/8/bits/std_mutex.h:121
#4  std::lock_guard<std::mutex>::~lock_guard (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/std_mutex.h:168
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ccce38) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6cea4e0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6cea4d8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6cea4d0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3362)):
#0  0x00007f1055a82ae0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587aedf in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c003994 "", __beg=0x7f103c003950 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251805", this=0x7f1054dffe80) at /usr/include/c++/8/bits/char_traits.h:350
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f103c003994 "", __beg=0x7f103c003950 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251805", this=0x7f1054dffe80) at /usr/include/c++/8/bits/basic_string.h:236
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c003994 "", __beg=0x7f103c003950 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251805", this=0x7f1054dffe80) at /usr/include/c++/8/bits/basic_string.h:255
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x7f1054dffe80) at /usr/include/c++/8/bits/basic_string.h:440
#5  PageId::PageId (this=0x7f1054dffe80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  Page::getId (this=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:33
#7  0x00005612d587f3ae in MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6d4ea80) at /usr/include/c++/8/bits/unordered_map.h:973
#8  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6d4ea78) at /usr/include/c++/8/thread:253
#12 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6d4ea70) at /usr/include/c++/8/thread:196
#13 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#14 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#15 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3343)):
#0  0x00005612d587bdae in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (this=0x7f104decdff0, __capacity=67) at /usr/include/c++/8/bits/basic_string.h:199
#1  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str=..., this=0x7f104decdff0) at /usr/include/c++/8/bits/basic_string.h:552
#2  PageId::PageId (this=0x7f104decdff0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#3  std::_Construct<PageId, PageId> (__p=0x7f104decdff0) at /usr/include/c++/8/bits/stl_construct.h:75
#4  std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:83
#5  std::uninitialized_copy<std::move_iterator<PageId*>, PageId*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:134
#6  std::__uninitialized_copy_a<std::move_iterator<PageId*>, PageId*, PageId> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:289
#7  std::__uninitialized_move_if_noexcept_a<PageId*, PageId*, std::allocator<PageId> > (__alloc=..., __result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_uninitialized.h:311
#8  std::vector<PageId, std::allocator<PageId> >::_M_realloc_insert<PageId const&> (this=this@entry=0x5612e3ced228, __position=__position@entry={id = <error reading variable: Cannot create a lazy string with address 0x0, and a non-zero length.>}, __args#0=...) at /usr/include/c++/8/bits/vector.tcc:447
#9  0x00005612d587f490 in std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ced228) at /usr/include/c++/8/bits/stl_iterator.h:783
#10 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ced228) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#11 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6e17f40) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#12 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6e17f38) at /usr/include/c++/8/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6e17f38) at /usr/include/c++/8/thread:253
#16 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6e17f30) at /usr/include/c++/8/thread:196
#17 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#18 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#19 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3341)):
#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103
#1  0x00007f1055af3714 in __GI___pthread_mutex_lock (mutex=0x5612e3ccce50) at ../nptl/pthread_mutex_lock.c:80
#2  0x00005612d587f3c9 in __gthread_mutex_lock (__mutex=0x5612e3ccce50) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:748
#3  std::mutex::lock (this=0x5612e3ccce50) at /usr/include/c++/8/bits/std_mutex.h:103
#4  std::lock_guard<std::mutex>::lock_guard (__m=..., this=<synthetic pointer>) at /usr/include/c++/8/bits/std_mutex.h:162
#5  MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ccce38) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:138
#6  MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6efb9b0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#7  std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6efb9a8) at /usr/include/c++/8/thread:253
#11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6efb9a0) at /usr/include/c++/8/thread:196
#12 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#13 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#14 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3340)):
#0  _int_malloc (av=av@entry=0x7f103c000020, bytes=bytes@entry=69) at malloc.c:4108
#1  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#2  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c000bb4 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251798", this=0x7f10294df670) at /usr/include/c++/8/bits/stl_iterator.h:783
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f103c000bb4 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251798", this=0x7f10294df670) at /usr/include/c++/8/bits/basic_string.h:236
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f103c000bb4 "", __beg=0x7f103c000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251798", this=0x7f10294df670) at /usr/include/c++/8/bits/basic_string.h:255
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251798", this=0x7f10294df670) at /usr/include/c++/8/bits/basic_string.h:440
#7  PageId::PageId (this=0x7f10294df670) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#8  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3cd4268, __p=0x7f10294df670) at /usr/include/c++/8/ext/new_allocator.h:136
#9  std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f10294df670) at /usr/include/c++/8/bits/alloc_traits.h:475
#10 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3cd4268) at /usr/include/c++/8/bits/stl_vector.h:1079
#11 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3cd4268) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#12 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6edbcc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#13 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#14 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:244
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6edbcb8) at /usr/include/c++/8/thread:253
#17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6edbcb0) at /usr/include/c++/8/thread:196
#18 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#20 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3339)):
#0  0x00007f10556fb207 in mprotect () at ../sysdeps/unix/syscall-template.S:78
#1  0x00007f105568908c in grow_heap (diff=4096, h=0x7f1048000000) at arena.c:542
#2  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f1048000020) at malloc.c:2400
#3  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1048000020, bytes=bytes@entry=69) at malloc.c:4133
#4  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#5  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb4 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251803", this=0x7f1041072d80) at /usr/include/c++/8/bits/stl_iterator.h:783
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1048000bb4 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251803", this=0x7f1041072d80) at /usr/include/c++/8/bits/basic_string.h:236
#8  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1048000bb4 "", __beg=0x7f1048000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251803", this=0x7f1041072d80) at /usr/include/c++/8/bits/basic_string.h:255
#9  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251803", this=0x7f1041072d80) at /usr/include/c++/8/bits/basic_string.h:440
#10 PageId::PageId (this=0x7f1041072d80) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#11 __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3c9df48, __p=0x7f1041072d80) at /usr/include/c++/8/ext/new_allocator.h:136
#12 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1041072d80) at /usr/include/c++/8/bits/alloc_traits.h:475
#13 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3c9df48) at /usr/include/c++/8/bits/stl_vector.h:1079
#14 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3c9df48) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#15 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d6b4b970) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#16 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#17 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#18 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d6b4b968) at /usr/include/c++/8/thread:244
#19 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d6b4b968) at /usr/include/c++/8/thread:253
#20 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d6b4b960) at /usr/include/c++/8/thread:196
#21 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#22 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#23 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3338)):
#0  sysmalloc (nb=nb@entry=80, av=av@entry=0x7f1044000020) at malloc.c:2723
#1  0x00007f105568a2c9 in _int_malloc (av=av@entry=0x7f1044000020, bytes=bytes@entry=69) at malloc.c:4133
#2  0x00007f105568b56a in __GI___libc_malloc (bytes=69) at malloc.c:3057
#3  0x00007f10559f7fd8 in operator new(unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00005612d587f4a7 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1044000bb4 "", __beg=0x7f1044000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251804", this=0x7f1040db9f90) at /usr/include/c++/8/bits/stl_iterator.h:783
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*> (__end=0x7f1044000bb4 "", __beg=0x7f1044000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251804", this=0x7f1040db9f90) at /usr/include/c++/8/bits/basic_string.h:236
#6  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (__end=0x7f1044000bb4 "", __beg=0x7f1044000b70 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251804", this=0x7f1040db9f90) at /usr/include/c++/8/bits/basic_string.h:255
#7  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (__str="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251804", this=0x7f1040db9f90) at /usr/include/c++/8/bits/basic_string.h:440
#8  PageId::PageId (this=0x7f1040db9f90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#9  __gnu_cxx::new_allocator<PageId>::construct<PageId, PageId const&> (this=0x5612e3ce1338, __p=0x7f1040db9f90) at /usr/include/c++/8/ext/new_allocator.h:136
#10 std::allocator_traits<std::allocator<PageId> >::construct<PageId, PageId const&> (__a=..., __p=0x7f1040db9f90) at /usr/include/c++/8/bits/alloc_traits.h:475
#11 std::vector<PageId, std::allocator<PageId> >::push_back (__x=..., this=0x5612e3ce1338) at /usr/include/c++/8/bits/stl_vector.h:1079
#12 MultiThreadedPageRankComputer::EdgeInfo::push_back (elem=..., this=0x5612e3ce1338) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:139
#13 MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=<optimized out>, __closure=0x5612d64ddfc0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:227
#14 std::__invoke_impl<void, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#15 std::__invoke<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#16 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:244
#17 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612d64ddfb8) at /usr/include/c++/8/thread:253
#18 std::thread::_State_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&, Network const&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&)::{lambda(unsigned int)#1}, unsigned int> > >::_M_run() (this=0x5612d64ddfb0) at /usr/include/c++/8/thread:196
#19 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#21 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00005612d587fc28 in MultiThreadedPageRankComputer::Pool::join (this=0x7ffdbb26fda0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:83
#3  MultiThreadedPageRankComputer::initEdges (edges=std::unordered_map with 2000 elements, network=..., pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:233
#4  MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=0.84999999999999998, iterations=100, tolerance=9.9999999999999995e-08) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:34
#5  0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#6  0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3665]
[New LWP 3666]
[New LWP 3668]
[New LWP 3672]
[New LWP 3675]
[New LWP 3679]
[New LWP 3682]
[New LWP 3688]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708103386880, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1051dfa700 (LWP 3688)):
#0  0x00005612d587f072 in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=265020523579730629, __k=..., __n=1868, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:1395
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=265020523579730629, __key=..., __bkt=1868, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:654
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:707
#3  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#4  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5612e3d6b4d0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#5  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:253
#9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1051df9e90) at /usr/include/c++/8/future:1339
#10 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#11 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b490, __f=<optimized out>, __did_set=0x7f1051df9e37) at /usr/include/c++/8/future:561
#13 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b4a8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#14 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b4a8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#15 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1051df9e60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#16 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b490) at /usr/include/c++/8/future:401
#17 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#18 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#19 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d658fff8) at /usr/include/c++/8/thread:244
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d658fff8) at /usr/include/c++/8/thread:253
#22 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d658fff0) at /usr/include/c++/8/thread:196
#23 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#24 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#25 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10525fb700 (LWP 3682)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725604") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x5612e3d6b300) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10525fae90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b2c0, __f=<optimized out>, __did_set=0x7f10525fae37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2d8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b2d8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10525fae60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b2c0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d63ce228) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d63ce228) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d63ce220) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1052dfc700 (LWP 3679)):
#0  0x00007f10559f7ee8 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251315") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x5612e3d6b130) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b128) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b128) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1052dfbe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b0f0, __f=<optimized out>, __did_set=0x7f1052dfbe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b108, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b108) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1052dfbe60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b0f0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d63a1788) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d63a1788) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d63a1780) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f10535fd700 (LWP 3675)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725851") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x5612e3d6af60) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6af58) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6af58) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10535fce90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6af20, __f=<optimized out>, __did_set=0x7f10535fce37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6af38, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6af38) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10535fce60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6af20) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6467938) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6467938) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6467930) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f1055601700 (LWP 3672)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251517") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x5612e3d6aec0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1055600e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ae80, __f=<optimized out>, __did_set=0x7f1055600e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ae98, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ae98) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1055600e60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ae80) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64641c8) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64641c8) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64641c0) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1054e00700 (LWP 3668)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872541") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x5612e3d6add0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1054dffe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ad90, __f=<optimized out>, __did_set=0x7f1054dffe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ada8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ada8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1054dffe60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ad90) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64843c8) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64843c8) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64843c0) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10545ff700 (LWP 3666)):
#0  0x00005612d587f041 in std::__detail::_Mod_range_hashing::operator() (this=0x7ffdbb26fde0, __den=3209, __num=8078737470847960962) at /usr/include/c++/8/bits/hashtable_policy.h:1390
#1  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index (this=0x7ffdbb26fde0, __n=3209, __c=8078737470847960962) at /usr/include/c++/8/bits/hashtable_policy.h:1392
#2  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index (this=0x7ffdbb26fde0, __k=..., __c=8078737470847960962) at /usr/include/c++/8/bits/hashtable.h:643
#3  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:706
#4  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#5  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x5612e3d6ad30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#6  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#7  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:244
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:253
#10 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10545fee90) at /usr/include/c++/8/future:1339
#11 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#12 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#13 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6acf0, __f=<optimized out>, __did_set=0x7f10545fee37) at /usr/include/c++/8/future:561
#14 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ad08, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#15 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ad08) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#16 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10545fee60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#17 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6acf0) at /usr/include/c++/8/future:401
#18 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#19 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#20 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64c0228) at /usr/include/c++/8/thread:244
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64c0228) at /usr/include/c++/8/thread:253
#23 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64c0220) at /usr/include/c++/8/thread:196
#24 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#25 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#26 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1053dfe700 (LWP 3665)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725970") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x5612e3d6ac90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1053dfde90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ac50, __f=<optimized out>, __did_set=0x7f1053dfde37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ac68, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ac68) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1053dfde60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ac50) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d63a4938) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d63a4938) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d63a4930) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708103386880, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ac78, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#3  0x00005612d5879c32 in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdbb26fc00: (void (std::thread::*)(std::thread * const)) 0x7f1055a20d40 <std::thread::join()>, __once=...) at /usr/include/c++/8/mutex:684
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/8/future:1647
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/8/future:1645
#7  0x00005612d58805da in std::__future_base::_State_baseV2::wait (this=0x5612e3d6ac50) at /usr/include/c++/8/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5612d6377f80) at /usr/include/c++/8/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5612d6377f80) at /usr/include/c++/8/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=<optimized out>, alpha=<optimized out>, dangleSum=<optimized out>, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements = {...}, pageHashMap=std::unordered_map with 2000 elements = {...}, pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3727]
[New LWP 3728]
[New LWP 3729]
[New LWP 3731]
[New LWP 3732]
[New LWP 3733]
[New LWP 3734]
[New LWP 3735]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3735)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725807") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5612e3d6b4d0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1053dfde90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b490, __f=<optimized out>, __did_set=0x7f1053dfde37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b4a8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b4a8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1053dfde60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b490) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64c0228) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64c0228) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64c0220) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3734)):
#0  0x00005612d5878150 in memcmp@plt ()
#1  0x00005612d587f181 in std::char_traits<char>::compare (__n=<optimized out>, __s2=<optimized out>, __s1=<optimized out>) at /usr/include/c++/8/bits/char_traits.h:312
#2  std::operator==<char> (__rhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251000", __lhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251000") at /usr/include/c++/8/bits/basic_string.h:6059
#3  PageId::operator== (other=..., this=0x7f1041a2a9a0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:15
#4  std::equal_to<PageId>::operator() (this=0x7ffdbb26fde0, __y=..., __x=...) at /usr/include/c++/8/bits/stl_function.h:356
#5  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=0x5612e3d3c430, __c=8994250446365985264, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1452
#6  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=0x7ffdbb26fde0, __n=0x5612e3d3c430, __c=8994250446365985264, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1833
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=8994250446365985264, __k=..., __n=797, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:1567
#8  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=8994250446365985264, __key=..., __bkt=797, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:654
#9  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:707
#10 std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#11 MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x5612e3d6ac90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#12 std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:253
#16 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10545fee90) at /usr/include/c++/8/future:1339
#17 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#18 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#19 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ac50, __f=<optimized out>, __did_set=0x7f10545fee37) at /usr/include/c++/8/future:561
#20 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ac68, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#21 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ac68) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#22 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10545fee60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#23 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ac50) at /usr/include/c++/8/future:401
#24 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#25 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#26 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#27 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d65cb798) at /usr/include/c++/8/thread:244
#28 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d65cb798) at /usr/include/c++/8/thread:253
#29 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d65cb790) at /usr/include/c++/8/thread:196
#30 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#31 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#32 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3733)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725915") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x5612e3d6ad30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1054dffe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6acf0, __f=<optimized out>, __did_set=0x7f1054dffe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ad08, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ad08) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1054dffe60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6acf0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6622a48) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6622a48) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6622a40) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3732)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725943") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x5612e3d6add0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1055600e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ad90, __f=<optimized out>, __did_set=0x7f1055600e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ada8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ada8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1055600e60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ad90) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d65bff18) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d65bff18) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d65bff10) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3731)):
#0  0x00007f10559f7edd in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251012") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x5612e3d6aec0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10535fce90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ae80, __f=<optimized out>, __did_set=0x7f10535fce37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ae98, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ae98) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10535fce60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ae80) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6620188) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6620188) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6620180) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3729)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725944") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x5612e3d6af60) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6af58) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6af58) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1052dfbe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6af20, __f=<optimized out>, __did_set=0x7f1052dfbe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6af38, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6af38) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1052dfbe60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6af20) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d66ccb28) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d66ccb28) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d66ccb20) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3728)):
#0  0x00005612d587f04b in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=11089063529192692401, __k=..., __n=1393, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:1554
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=11089063529192692401, __key=..., __bkt=1393, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:654
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:707
#3  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#4  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x5612e3d6b130) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#5  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b128) at /usr/include/c++/8/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b128) at /usr/include/c++/8/thread:253
#9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10525fae90) at /usr/include/c++/8/future:1339
#10 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#11 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b0f0, __f=<optimized out>, __did_set=0x7f10525fae37) at /usr/include/c++/8/future:561
#13 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b108, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#14 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b108) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#15 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10525fae60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#16 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b0f0) at /usr/include/c++/8/future:401
#17 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#18 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#19 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6677e98) at /usr/include/c++/8/thread:244
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6677e98) at /usr/include/c++/8/thread:253
#22 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6677e90) at /usr/include/c++/8/thread:196
#23 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#24 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#25 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3727)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725374") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x5612e3d6b300) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1051df9e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b2c0, __f=<optimized out>, __did_set=0x7f1051df9e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2d8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b2d8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1051df9e60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b2c0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6637858) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6637858) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6637850) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2e8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#3  0x00005612d5879c32 in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdbb26fc00: (void (std::thread::*)(std::thread * const)) 0x7f1055a20d40 <std::thread::join()>, __once=...) at /usr/include/c++/8/mutex:684
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/8/future:1647
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/8/future:1645
#7  0x00005612d58805da in std::__future_base::_State_baseV2::wait (this=0x5612e3d6b2c0) at /usr/include/c++/8/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5612d6377f80) at /usr/include/c++/8/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5612d6377f80) at /usr/include/c++/8/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=<optimized out>, alpha=<optimized out>, dangleSum=<optimized out>, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements = {...}, pageHashMap=std::unordered_map with 2000 elements = {...}, pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3793]
[New LWP 3794]
[New LWP 3795]
[New LWP 3796]
[New LWP 3797]
[New LWP 3798]
[New LWP 3799]
[New LWP 3800]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3800)):
#0  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=0x5612e3d656d0, __c=7511747688108319937, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1831
#1  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=0x7ffdbb26fde0, __n=0x5612e3d656d0, __c=7511747688108319937, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1833
#2  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=7511747688108319937, __k=..., __n=2037, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:1567
#3  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=7511747688108319937, __key=..., __bkt=2037, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:654
#4  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:707
#5  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5612e3d6b4d0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:253
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1053dfde90) at /usr/include/c++/8/future:1339
#12 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#13 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b490, __f=<optimized out>, __did_set=0x7f1053dfde37) at /usr/include/c++/8/future:561
#15 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b4a8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#16 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b4a8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1053dfde60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b490) at /usr/include/c++/8/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6467938) at /usr/include/c++/8/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6467938) at /usr/include/c++/8/thread:253
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6467930) at /usr/include/c++/8/thread:196
#25 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#27 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3799)):
#0  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=0x5612e3d67040, __c=15282753974171812537, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1831
#1  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=0x7ffdbb26fde0, __n=0x5612e3d67040, __c=15282753974171812537, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1833
#2  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=15282753974171812537, __k=..., __n=2901, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:1567
#3  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=15282753974171812537, __key=..., __bkt=2901, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:654
#4  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:707
#5  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#6  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x5612e3d6ac90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#7  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#8  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#9  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:244
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:253
#11 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10545fee90) at /usr/include/c++/8/future:1339
#12 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#13 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#14 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ac50, __f=<optimized out>, __did_set=0x7f10545fee37) at /usr/include/c++/8/future:561
#15 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ac68, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#16 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ac68) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#17 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10545fee60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#18 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ac50) at /usr/include/c++/8/future:401
#19 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#20 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#21 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#22 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d66ccb28) at /usr/include/c++/8/thread:244
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d66ccb28) at /usr/include/c++/8/thread:253
#24 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d66ccb20) at /usr/include/c++/8/thread:196
#25 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#26 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#27 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3798)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251614") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x5612e3d6ad30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1054dffe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6acf0, __f=<optimized out>, __did_set=0x7f1054dffe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ad08, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ad08) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1054dffe60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6acf0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64c0228) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64c0228) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64c0220) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3797)):
#0  0x00007f10559f7eb9 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725106") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x5612e3d6add0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1055600e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ad90, __f=<optimized out>, __did_set=0x7f1055600e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ada8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ada8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1055600e60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ad90) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6620188) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6620188) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6620180) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3796)):
#0  __memcmp_avx2_movbe () at ../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:357
#1  0x00005612d587f181 in std::char_traits<char>::compare (__n=<optimized out>, __s2=<optimized out>, __s1=<optimized out>) at /usr/include/c++/8/bits/char_traits.h:312
#2  std::operator==<char> (__rhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725898", __lhs="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725898") at /usr/include/c++/8/bits/basic_string.h:6059
#3  PageId::operator== (other=..., this=0x7f104123d4d0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:15
#4  std::equal_to<PageId>::operator() (this=0x7ffdbb26fde0, __y=..., __x=...) at /usr/include/c++/8/bits/stl_function.h:356
#5  std::__detail::_Equal_helper<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, unsigned long, true>::_S_equals (__eq=..., __extract=..., __n=0x5612e3d37e10, __c=14968860328462627417, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1452
#6  std::__detail::_Hashtable_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals (this=0x7ffdbb26fde0, __n=0x5612e3d37e10, __c=14968860328462627417, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1833
#7  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=14968860328462627417, __k=..., __n=636, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:1567
#8  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=14968860328462627417, __key=..., __bkt=636, this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable.h:654
#9  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:707
#10 std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#11 MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x5612e3d6aec0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#12 std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#13 std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#14 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:244
#15 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:253
#16 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10535fce90) at /usr/include/c++/8/future:1339
#17 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#18 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#19 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ae80, __f=<optimized out>, __did_set=0x7f10535fce37) at /usr/include/c++/8/future:561
#20 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ae98, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#21 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ae98) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#22 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10535fce60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#23 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ae80) at /usr/include/c++/8/future:401
#24 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#25 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#26 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#27 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6637858) at /usr/include/c++/8/thread:244
#28 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6637858) at /usr/include/c++/8/thread:253
#29 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6637850) at /usr/include/c++/8/thread:196
#30 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#31 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#32 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3795)):
#0  0x00007f10559f7eb2 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251731") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x5612e3d6af60) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6af58) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6af58) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1052dfbe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6af20, __f=<optimized out>, __did_set=0x7f1052dfbe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6af38, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6af38) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1052dfbe60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6af20) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6622a48) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6622a48) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6622a40) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3794)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a872569") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x5612e3d6b130) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b128) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b128) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10525fae90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b0f0, __f=<optimized out>, __did_set=0x7f10525fae37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b108, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b108) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10525fae60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b0f0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d65bff18) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d65bff18) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d65bff10) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3793)):
#0  0x00007f10559f7eab in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251290") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x5612e3d6b300) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1051df9e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b2c0, __f=<optimized out>, __did_set=0x7f1051df9e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2d8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b2d8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1051df9e60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b2c0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d65cb798) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d65cb798) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d65cb790) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2e8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#3  0x00005612d5879c32 in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdbb26fc00: (void (std::thread::*)(std::thread * const)) 0x7f1055a20d40 <std::thread::join()>, __once=...) at /usr/include/c++/8/mutex:684
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/8/future:1647
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/8/future:1645
#7  0x00005612d58805da in std::__future_base::_State_baseV2::wait (this=0x5612e3d6b2c0) at /usr/include/c++/8/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5612d6377f80) at /usr/include/c++/8/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5612d6377f80) at /usr/include/c++/8/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=<optimized out>, alpha=<optimized out>, dangleSum=<optimized out>, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements = {...}, pageHashMap=std::unordered_map with 2000 elements = {...}, pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3831]
[New LWP 3834]
[New LWP 3835]
[New LWP 3837]
[New LWP 3839]
[New LWP 3845]
[New LWP 3850]
[New LWP 3852]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708103386880, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1051dfa700 (LWP 3852)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725668") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5612e3d6b4d0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1051df9e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b490, __f=<optimized out>, __did_set=0x7f1051df9e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b4a8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b4a8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1051df9e60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b490) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64c0228) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64c0228) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64c0220) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10525fb700 (LWP 3850)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725991") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x5612e3d6b300) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10525fae90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b2c0, __f=<optimized out>, __did_set=0x7f10525fae37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2d8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b2d8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10525fae60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b2c0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64843c8) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64843c8) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64843c0) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1052dfc700 (LWP 3845)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725701") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x5612e3d6b130) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b128) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b128) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1052dfbe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b0f0, __f=<optimized out>, __did_set=0x7f1052dfbe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b108, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b108) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1052dfbe60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b0f0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d63ce228) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d63ce228) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d63ce220) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f10535fd700 (LWP 3839)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725385") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x5612e3d6af60) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6af58) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6af58) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10535fce90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6af20, __f=<optimized out>, __did_set=0x7f10535fce37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6af38, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6af38) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10535fce60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6af20) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6677e98) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6677e98) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6677e90) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f1055601700 (LWP 3837)):
#0  0x00007f10559f7eab in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251780") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x5612e3d6aec0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1055600e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ae80, __f=<optimized out>, __did_set=0x7f1055600e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ae98, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ae98) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1055600e60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ae80) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d658fff8) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d658fff8) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d658fff0) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1054e00700 (LWP 3835)):
#0  0x00005612d587f03a in std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node (__code=<optimized out>, __k=..., __n=<optimized out>, this=<optimized out>) at /usr/include/c++/8/bits/hashtable_policy.h:1390
#1  std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node (__c=<optimized out>, __key=..., __bkt=<optimized out>, this=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:654
#2  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:707
#3  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#4  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x5612e3d6add0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#5  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#6  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#7  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:244
#8  std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:253
#9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1054dffe90) at /usr/include/c++/8/future:1339
#10 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#11 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ad90, __f=<optimized out>, __did_set=0x7f1054dffe37) at /usr/include/c++/8/future:561
#13 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ada8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#14 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ada8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#15 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1054dffe60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#16 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ad90) at /usr/include/c++/8/future:401
#17 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#18 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#19 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#20 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d63a4938) at /usr/include/c++/8/thread:244
#21 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d63a4938) at /usr/include/c++/8/thread:253
#22 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d63a4930) at /usr/include/c++/8/thread:196
#23 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#24 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#25 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10545ff700 (LWP 3834)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251093") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x5612e3d6ad30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10545fee90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6acf0, __f=<optimized out>, __did_set=0x7f10545fee37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ad08, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ad08) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10545fee60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6acf0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64641c8) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64641c8) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64641c0) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1053dfe700 (LWP 3831)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251146") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x5612e3d6ac90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1053dfde90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ac50, __f=<optimized out>, __did_set=0x7f1053dfde37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ac68, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ac68) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1053dfde60: (void (std::__future_base::_State_baseV2::*)(std::__future_base::_State_baseV2 * const, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ac50) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d63a1788) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d63a1788) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d63a1780) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708103386880, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ac78, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#3  0x00005612d5879c32 in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdbb26fc00: (void (std::thread::*)(std::thread * const)) 0x7f1055a20d40 <std::thread::join()>, __once=...) at /usr/include/c++/8/mutex:684
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/8/future:1647
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/8/future:1645
#7  0x00005612d58805da in std::__future_base::_State_baseV2::wait (this=0x5612e3d6ac50) at /usr/include/c++/8/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5612d6377f80) at /usr/include/c++/8/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5612d6377f80) at /usr/include/c++/8/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=<optimized out>, alpha=<optimized out>, dangleSum=<optimized out>, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements = {...}, pageHashMap=std::unordered_map with 2000 elements = {...}, pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[New LWP 3942]
[New LWP 3943]
[New LWP 3944]
[New LWP 3945]
[New LWP 3947]
[New LWP 3948]
[New LWP 3949]
[New LWP 3950]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89

Thread 9 (Thread 0x7f1053dfe700 (LWP 3950)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251246") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=7, __closure=0x5612e3d6b4d0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b4c8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1053dfde90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b490, __f=<optimized out>, __did_set=0x7f1053dfde37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b4a8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b4a8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1053dfde60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b490) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d64641c8) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d64641c8) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d64641c0) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 8 (Thread 0x7f10545ff700 (LWP 3949)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251850") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=6, __closure=0x5612e3d6ac90) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ac88) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10545fee90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ac50, __f=<optimized out>, __did_set=0x7f10545fee37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ac68, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ac68) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10545fee60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ac50) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d65bff18) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d65bff18) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d65bff10) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 7 (Thread 0x7f1054e00700 (LWP 3948)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251914") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=5, __closure=0x5612e3d6ad30) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6ad28) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1054dffe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6acf0, __f=<optimized out>, __did_set=0x7f1054dffe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ad08, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ad08) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1054dffe60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6acf0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6637858) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6637858) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6637850) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 6 (Thread 0x7f1055601700 (LWP 3947)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251999") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=4, __closure=0x5612e3d6add0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6adc8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1055600e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ad90, __f=<optimized out>, __did_set=0x7f1055600e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ada8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ada8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1055600e60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ad90) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6622a48) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6622a48) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6622a40) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 5 (Thread 0x7f10535fd700 (LWP 3945)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725863") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=3, __closure=0x5612e3d6aec0) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6aeb8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10535fce90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6ae80, __f=<optimized out>, __did_set=0x7f10535fce37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6ae98, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6ae98) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10535fce60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6ae80) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d65cb798) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d65cb798) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d65cb790) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 4 (Thread 0x7f1052dfc700 (LWP 3944)):
#0  0x00007f10559f7eb9 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251158") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=2, __closure=0x5612e3d6af60) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6af58) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6af58) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1052dfbe90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6af20, __f=<optimized out>, __did_set=0x7f1052dfbe37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6af38, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6af38) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1052dfbe60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6af20) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d66ccb28) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d66ccb28) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d66ccb20) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f10525fb700 (LWP 3943)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725782") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=1, __closure=0x5612e3d6b130) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b128) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b128) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f10525fae90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b0f0, __f=<optimized out>, __did_set=0x7f10525fae37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b108, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b108) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f10525fae60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b0f0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6467938) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6467938) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6467930) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f1051dfa700 (LWP 3942)):
#0  0x00007f10559f7ea3 in std::_Hash_bytes(void const*, unsigned long, unsigned long) () from /lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00005612d587f02c in std::_Hash_impl::hash (__seed=3339675911, __clength=<optimized out>, __ptr=<optimized out>) at /usr/include/c++/8/bits/functional_hash.h:192
#2  std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator() (this=<optimized out>, __s="2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a87251953") at /usr/include/c++/8/bits/basic_string.h:6642
#3  PageIdHash::operator() (this=0x7ffdbb26fde0, pageId=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:32
#4  std::__detail::_Hash_code_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::__detail::_Select1st, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code (this=0x7ffdbb26fde0, __k=...) at /usr/include/c++/8/bits/hashtable_policy.h:1387
#5  std::__detail::_Map_base<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/hashtable_policy.h:705
#6  std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >::operator[] (__k=..., this=0x7ffdbb26fde0) at /usr/include/c++/8/bits/unordered_map.h:974
#7  MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}::operator()(unsigned int) const (threadId=0, __closure=0x5612e3d6b300) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:274
#8  std::__invoke_impl<std::pair<double, double>, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_other, MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&, unsigned int&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#9  std::__invoke<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>(std::__invoke_result&&, (MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#10 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:244
#11 std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >::operator()() (this=0x5612e3d6b2f8) at /usr/include/c++/8/thread:253
#12 std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::operator()() const (this=0x7f1051df9e90) at /usr/include/c++/8/future:1339
#13 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<std::pair<double, double> >, std::__future_base::_Result_base::_Deleter>, std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/include/c++/8/bits/std_function.h:283
#14 0x00005612d5879cab in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=<optimized out>) at /usr/include/c++/8/bits/std_function.h:682
#15 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x5612e3d6b2c0, __f=<optimized out>, __did_set=0x7f1051df9e37) at /usr/include/c++/8/future:561
#16 0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2d8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#17 0x00005612d587b1ea in __gthread_once (__func=<optimized out>, __once=0x5612e3d6b2d8) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#18 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=@0x7f1051df9e60: (void (std::__future_base::_State_baseV2::*)(class std::__future_base::_State_baseV2 * const, class std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()> *, bool *)) 0x5612d5879c90 <std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*)>, __once=...) at /usr/include/c++/8/mutex:684
#19 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (__ignore_failure=false, __res=..., this=0x5612e3d6b2c0) at /usr/include/c++/8/future:401
#20 std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/include/c++/8/future:1667
#21 std::__invoke_impl<void, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__invoke_other, std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&) (__f=...) at /usr/include/c++/8/bits/invoke.h:60
#22 std::__invoke<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}>(std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}&&, (std::__invoke_result&&)...) (__fn=...) at /usr/include/c++/8/bits/invoke.h:95
#23 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5612d6620188) at /usr/include/c++/8/thread:244
#24 std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> >::operator()() (this=0x5612d6620188) at /usr/include/c++/8/thread:253
#25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::__future_base::_Async_state_impl<std::thread::_Invoker<std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int> >, std::pair<double, double> >::_Async_state_impl(std::tuple<MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&, std::unordered_map<PageId, MultiThreadedPageRankComputer::PageInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::PageInfo> > >&, std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >&, unsigned long, double, double, unsigned int)::{lambda(unsigned int)#1}, unsigned int>&&)::{lambda()#1}> > >::_M_run() (this=0x5612d6620180) at /usr/include/c++/8/thread:196
#26 0x00007f1055a20b2f in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#27 0x00007f1055af0fa3 in start_thread (arg=<optimized out>) at pthread_create.c:486
#28 0x00007f10557004cf in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055af2495 in __GI___pthread_timedjoin_ex (threadid=139708069816064, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89
#1  0x00007f1055a20d53 in std::thread::join() () from /lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007f1055af8997 in __pthread_once_slow (once_control=0x5612e3d6b2e8, init_routine=0x7f1055a1fe20 <__once_proxy>) at pthread_once.c:116
#3  0x00005612d5879c32 in __gthread_once (__func=<optimized out>, __once=<optimized out>) at /usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h:699
#4  std::call_once<void (std::thread::*)(), std::thread*> (__f=@0x7ffdbb26fc00: (void (std::thread::*)(class std::thread * const)) 0x7f1055a20d40 <std::thread::join()>, __once=...) at /usr/include/c++/8/mutex:684
#5  std::__future_base::_Async_state_commonV2::_M_join (this=<optimized out>) at /usr/include/c++/8/future:1647
#6  std::__future_base::_Async_state_commonV2::_M_complete_async (this=<optimized out>) at /usr/include/c++/8/future:1645
#7  0x00005612d58805da in std::__future_base::_State_baseV2::wait (this=0x5612e3d6b2c0) at /usr/include/c++/8/future:334
#8  std::__basic_future<std::pair<double, double> >::_M_get_result (this=0x5612d6377f80) at /usr/include/c++/8/future:717
#9  std::future<std::pair<double, double> >::get (this=0x5612d6377f80) at /usr/include/c++/8/future:796
#10 MultiThreadedPageRankComputer::updateRanks (iteration=<optimized out>, alpha=<optimized out>, dangleSum=<optimized out>, networkSize=<optimized out>, edges=std::unordered_map with 2000 elements, pageHashMap=std::unordered_map with 2000 elements, pool=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:291
#11 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:43
#12 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#13 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f105568b9c1 in __GI___libc_free (mem=0x7f1034836070) at malloc.c:3093

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f105568b9c1 in __GI___libc_free (mem=0x7f1034836070) at malloc.c:3093
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f1044f66ef0, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f1044f66ef0) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f1044f66ef0) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f1044f66ef0, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f1044f66ef0, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f1044f66ef0) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f1044f66ef0) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f1044f6c710, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3c9ef88, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3c9ef88, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3c9ef68, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3c9ef68) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3c9ef68) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3c9ef60) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3cdab10) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
malloc_consolidate (av=av@entry=0x7f1048000020) at malloc.c:4470

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  malloc_consolidate (av=av@entry=0x7f1048000020) at malloc.c:4470
#1  0x00007f105568879a in _int_free (av=0x7f1048000020, p=0x7f1049729cc0, have_lock=<optimized out>) at malloc.c:4392
#2  0x00005612d587b983 in __gnu_cxx::new_allocator<PageId>::deallocate (this=0x5612e3cd0bf8, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#3  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#4  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=0x5612e3cd0bf8, __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:304
#5  std::_Vector_base<PageId, std::allocator<PageId> >::~_Vector_base (this=0x5612e3cd0bf8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:285
#6  std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3cd0bf8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:570
#7  MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3cd0bf8, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#8  std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3cd0bd8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#9  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3cd0bd8) at /usr/include/c++/8/ext/new_allocator.h:140
#10 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3cd0bd8) at /usr/include/c++/8/bits/alloc_traits.h:487
#11 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3cd0bd0) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#12 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3c67230) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#13 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#14 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#15 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#16 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#17 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#18 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f105568b9c1 in __GI___libc_free (mem=0x7f103c361a00) at malloc.c:3093

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f105568b9c1 in __GI___libc_free (mem=0x7f103c361a00) at malloc.c:3093
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f1029215810, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f1029215810) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f1029215810) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f1029215810, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f1029215810, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f1029215810) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f1029215810) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f1029221570, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3c9cbc8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3c9cbc8, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3c9cba8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3c9cba8) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3c9cba8) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3c9cba0) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3cde9a0) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f105568b9c1 in __GI___libc_free (mem=0x7f1041148240) at malloc.c:3093

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f105568b9c1 in __GI___libc_free (mem=0x7f1041148240) at malloc.c:3093
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f1041355ed0, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f1041355ed0) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f1041355ed0) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f1041355ed0, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f1041355ed0, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f1041355ed0) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f1041355ed0) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f104135b850, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3cdac08, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3cdac08, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3cdabe8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3cdabe8) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3cdabe8) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3cdabe0) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3bfe410) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055688166 in _int_free (av=0x7f104c000020, p=0x7f104c2703a0, have_lock=0) at malloc.c:4223

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055688166 in _int_free (av=0x7f104c000020, p=0x7f104c2703a0, have_lock=0) at malloc.c:4223
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f10457ebe50, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f10457ebe50) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f10457ebe50) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f10457ebe50, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f10457ebe50, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f10457ebe50) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f10457ebe50) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f10457f56b0, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3a3aa28, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3a3aa28, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3a3aa08, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3a3aa08) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3a3aa08) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3a3aa00) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3c96430) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
malloc_consolidate (av=av@entry=0x7f1034000020) at malloc.c:4470

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  malloc_consolidate (av=av@entry=0x7f1034000020) at malloc.c:4470
#1  0x00007f105568879a in _int_free (av=0x7f1034000020, p=0x7f10351990a0, have_lock=<optimized out>) at malloc.c:4392
#2  0x00005612d587b983 in __gnu_cxx::new_allocator<PageId>::deallocate (this=0x5612e3afc908, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#3  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#4  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=0x5612e3afc908, __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:304
#5  std::_Vector_base<PageId, std::allocator<PageId> >::~_Vector_base (this=0x5612e3afc908, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:285
#6  std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3afc908, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:570
#7  MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3afc908, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#8  std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3afc8e8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#9  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3afc8e8) at /usr/include/c++/8/ext/new_allocator.h:140
#10 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3afc8e8) at /usr/include/c++/8/bits/alloc_traits.h:487
#11 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3afc8e0) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#12 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3cedd60) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#13 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#14 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#15 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#16 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#17 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#18 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f105568b9c1 in __GI___libc_free (mem=0x7f10486f21d0) at malloc.c:3093

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f105568b9c1 in __GI___libc_free (mem=0x7f10486f21d0) at malloc.c:3093
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f10455754b0, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f10455754b0) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f10455754b0) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f10455754b0, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f10455754b0, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f10455754b0) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f10455754b0) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f104557e390, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3cd1ea8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3cd1ea8, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3cd1e88, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3cd1e88) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3cd1e88) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3cd1e80) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3cec020) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f105568b9c1 in __GI___libc_free (mem=0x7f1035765410) at malloc.c:3093

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f105568b9c1 in __GI___libc_free (mem=0x7f1035765410) at malloc.c:3093
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f104d208020, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f104d208020) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f104d208020) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f104d208020, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f104d208020, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f104d208020) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f104d208020) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f104d20a5c0, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3af89b8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3af89b8, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3af8998, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3af8998) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3af8998) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3af8990) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3c66460) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f105568b9c1 in __GI___libc_free (mem=0x7f103c79f000) at malloc.c:3093

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f105568b9c1 in __GI___libc_free (mem=0x7f103c79f000) at malloc.c:3093
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f10314e1370, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f10314e1370) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f10314e1370) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f10314e1370, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f10314e1370, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f10314e1370) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f10314e1370) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f10314e3250, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3ce8768, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3ce8768, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3ce8748, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3ce8748) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3ce8748) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3ce8740) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3cd29e0) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055686df6 in malloc_consolidate (av=av@entry=0x7f1044000020) at malloc.c:4494

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055686df6 in malloc_consolidate (av=av@entry=0x7f1044000020) at malloc.c:4494
#1  0x00007f105568879a in _int_free (av=0x7f1044000020, p=0x7f1045e3f9c0, have_lock=<optimized out>) at malloc.c:4392
#2  0x00005612d587b983 in __gnu_cxx::new_allocator<PageId>::deallocate (this=0x5612e3cdb5c8, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#3  std::allocator_traits<std::allocator<PageId> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#4  std::_Vector_base<PageId, std::allocator<PageId> >::_M_deallocate (this=0x5612e3cdb5c8, __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:304
#5  std::_Vector_base<PageId, std::allocator<PageId> >::~_Vector_base (this=0x5612e3cdb5c8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:285
#6  std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3cdb5c8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:570
#7  MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3cdb5c8, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#8  std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3cdb5a8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#9  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3cdb5a8) at /usr/include/c++/8/ext/new_allocator.h:140
#10 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3cdb5a8) at /usr/include/c++/8/bits/alloc_traits.h:487
#11 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3cdb5a0) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#12 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3c66120) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#13 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#14 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#15 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#16 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#17 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#18 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0x00007f1055688166 in _int_free (av=0x7f1048000020, p=0x7f10486798f0, have_lock=0) at malloc.c:4223

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  0x00007f1055688166 in _int_free (av=0x7f1048000020, p=0x7f10486798f0, have_lock=0) at malloc.c:4223
#1  0x00005612d587b969 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7f10402d5190, __p=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:116
#2  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=<optimized out>, __p=<optimized out>) at /usr/include/c++/8/bits/alloc_traits.h:462
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x7f10402d5190) at /usr/include/c++/8/bits/basic_string.h:226
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x7f10402d5190) at /usr/include/c++/8/bits/basic_string.h:221
#5  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x7f10402d5190, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#6  PageId::~PageId (this=0x7f10402d5190, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#7  std::_Destroy<PageId> (__pointer=0x7f10402d5190) at /usr/include/c++/8/bits/stl_construct.h:98
#8  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x7f10402d5190) at /usr/include/c++/8/bits/stl_construct.h:108
#9  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#10 std::_Destroy<PageId*, PageId> (__last=0x7f10402d6b90, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#11 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x5612e3ce7b38, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#12 MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (this=0x5612e3ce7b38, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:132
#13 std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>::~pair (this=0x5612e3ce7b18, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_pair.h:208
#14 __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (this=<optimized out>, __p=0x5612e3ce7b18) at /usr/include/c++/8/ext/new_allocator.h:140
#15 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::destroy<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > (__a=..., __p=0x5612e3ce7b18) at /usr/include/c++/8/bits/alloc_traits.h:487
#16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_node (this=<optimized out>, __n=0x5612e3ce7b10) at /usr/include/c++/8/bits/hashtable_policy.h:2100
#17 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x5612e3d08db0) at /usr/include/c++/8/bits/hashtable_policy.h:2113
#18 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x7ffdbb26fe20) at /usr/include/c++/8/bits/hashtable.h:2050
#19 std::_Hashtable<PageId, std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> >, std::__detail::_Select1st, std::equal_to<PageId>, PageIdHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/hashtable.h:1374
#20 0x00005612d5880e1f in std::unordered_map<PageId, MultiThreadedPageRankComputer::EdgeInfo, PageIdHash, std::equal_to<PageId>, std::allocator<std::pair<PageId const, MultiThreadedPageRankComputer::EdgeInfo> > >::~unordered_map (this=0x7ffdbb26fe20, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/unordered_map.h:102
#21 MultiThreadedPageRankComputer::computeForNetwork (this=<optimized out>, network=..., alpha=<optimized out>, iterations=<optimized out>, tolerance=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/multiThreadedPageRankComputer.hpp:32
#22 0x00005612d5879050 in pageRankComputationWithNumNodes (num=2000, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:19
#23 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
__gnu_cxx::new_allocator<char>::deallocate (this=0x5612e35bd700, __p=0x5612e35cb450 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725143") at /usr/include/c++/8/ext/new_allocator.h:116
116	      deallocate(pointer __p, size_type)

Thread 1 (Thread 0x7f1055602740 (LWP 3009)):
#0  __gnu_cxx::new_allocator<char>::deallocate (this=0x5612e35bd700, __p=0x5612e35cb450 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725143") at /usr/include/c++/8/ext/new_allocator.h:116
#1  std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __n=68, __p=0x5612e35cb450 "2000f1ffa5ce95d0f1e1893598e6aeeb2c214c85a88e3569d62c2dccd06a8725143") at /usr/include/c++/8/bits/alloc_traits.h:462
#2  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=67, this=0x5612e35bd700) at /usr/include/c++/8/bits/basic_string.h:226
#3  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x5612e35bd700) at /usr/include/c++/8/bits/basic_string.h:221
#4  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (this=0x5612e35bd700, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:657
#5  PageId::~PageId (this=0x5612e35bd700, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/pageId.hpp:6
#6  std::_Destroy<PageId> (__pointer=0x5612e35bd700) at /usr/include/c++/8/bits/stl_construct.h:98
#7  std::_Destroy_aux<false>::__destroy<PageId*> (__last=<optimized out>, __first=0x5612e35bd700) at /usr/include/c++/8/bits/stl_construct.h:108
#8  std::_Destroy<PageId*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#9  std::_Destroy<PageId*, PageId> (__last=0x5612e35cb080, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#10 std::vector<PageId, std::allocator<PageId> >::~vector (this=0x7f1055b3b3b8, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#11 Page::~Page (this=0x7f1055b3b370, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/page.hpp:13
#12 std::_Destroy<Page> (__pointer=0x7f1055b3b370) at /usr/include/c++/8/bits/stl_construct.h:98
#13 std::_Destroy_aux<false>::__destroy<Page*> (__last=<optimized out>, __first=0x7f1055b3b370) at /usr/include/c++/8/bits/stl_construct.h:108
#14 std::_Destroy<Page*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:137
#15 std::_Destroy<Page*, Page> (__last=0x7f1055b3ce10, __first=<optimized out>) at /usr/include/c++/8/bits/stl_construct.h:206
#16 std::vector<Page, std::allocator<Page> >::~vector (this=0x7ffdbb270100, __in_chrg=<optimized out>) at /usr/include/c++/8/bits/stl_vector.h:567
#17 Network::~Network (this=0x7ffdbb270100, __in_chrg=<optimized out>) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/../src/immutable/network.hpp:9
#18 pageRankComputationWithNumNodes (num=<optimized out>, computer=..., networkGenerator=...) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:17
#19 0x00005612d5878866 in main (argc=3, argv=0x7ffdbb270678) at /home/students/inf/j/jw418479/Workspace/pagerank/PageRank/tests/benchmarkTest.cpp:55
[Inferior 1 (process 3009) detached]
