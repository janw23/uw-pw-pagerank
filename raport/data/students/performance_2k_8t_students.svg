<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>std::vector&lt;PageId, (11 samples, 9.09%)</title><rect x="985.2" y="357" width="107.3" height="15.0" fill="rgb(232,79,27)" rx="2" ry="2" />
<text  x="988.21" y="367.5" >std::vector&lt;P..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="526.9" y="293" width="48.7" height="15.0" fill="rgb(229,150,33)" rx="2" ry="2" />
<text  x="529.86" y="303.5" >std:..</text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="185.5" y="181" width="9.8" height="15.0" fill="rgb(242,120,37)" rx="2" ry="2" />
<text  x="188.54" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 0.83%)</title><rect x="721.9" y="149" width="9.8" height="15.0" fill="rgb(220,206,5)" rx="2" ry="2" />
<text  x="724.90" y="159.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="478.1" y="213" width="48.8" height="15.0" fill="rgb(234,75,28)" rx="2" ry="2" />
<text  x="481.10" y="223.5" >Mult..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks (5 samples, 4.13%)</title><rect x="936.4" y="501" width="48.8" height="15.0" fill="rgb(228,210,40)" rx="2" ry="2" />
<text  x="939.45" y="511.5" >Mult..</text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.83%)</title><rect x="624.4" y="85" width="9.7" height="15.0" fill="rgb(208,179,44)" rx="2" ry="2" />
<text  x="627.38" y="95.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="526.9" y="213" width="48.7" height="15.0" fill="rgb(239,38,22)" rx="2" ry="2" />
<text  x="529.86" y="223.5" >Mult..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (23 samples, 19.01%)</title><rect x="868.2" y="517" width="224.3" height="15.0" fill="rgb(237,126,52)" rx="2" ry="2" />
<text  x="871.18" y="527.5" >MultiThreadedPageRankComputer..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3cd5530) (1 samples, 0.83%)</title><rect x="68.5" y="357" width="9.8" height="15.0" fill="rgb(224,195,40)" rx="2" ry="2" />
<text  x="71.51" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.83%)</title><rect x="1180.2" y="501" width="9.8" height="15.0" fill="rgb(227,140,33)" rx="2" ry="2" />
<text  x="1183.25" y="511.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (3 samples, 2.48%)</title><rect x="497.6" y="149" width="29.3" height="15.0" fill="rgb(221,207,39)" rx="2" ry="2" />
<text  x="500.60" y="159.5" >Pa..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;,Network (1 samples, 0.83%)</title><rect x="468.3" y="421" width="9.8" height="15.0" fill="rgb(226,27,2)" rx="2" ry="2" />
<text  x="471.35" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="673.1" y="181" width="48.8" height="15.0" fill="rgb(248,23,51)" rx="2" ry="2" />
<text  x="676.14" y="191.5" >std:..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (48 samples, 39.67%)</title><rect x="10.0" y="485" width="468.1" height="15.0" fill="rgb(245,213,20)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::..</text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="107.5" y="325" width="9.8" height="15.0" fill="rgb(219,37,33)" rx="2" ry="2" />
<text  x="110.52" y="335.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (40 samples, 33.06%)</title><rect x="478.1" y="389" width="390.1" height="15.0" fill="rgb(248,28,43)" rx="2" ry="2" />
<text  x="481.10" y="399.5" >std::call_once&lt;void</text>
</g>
<g >
<title>_int_malloc (3 samples, 2.48%)</title><rect x="214.8" y="229" width="29.2" height="15.0" fill="rgb(220,105,12)" rx="2" ry="2" />
<text  x="217.79" y="239.5" >_i..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="721.9" y="309" width="48.8" height="15.0" fill="rgb(214,74,42)" rx="2" ry="2" />
<text  x="724.90" y="319.5" >std:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f10314e1370, (1 samples, 0.83%)</title><rect x="995.0" y="197" width="9.7" height="15.0" fill="rgb(244,49,0)" rx="2" ry="2" />
<text  x="997.96" y="207.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="575.6" y="277" width="48.8" height="15.0" fill="rgb(241,45,8)" rx="2" ry="2" />
<text  x="578.62" y="287.5" >std:..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 0.83%)</title><rect x="487.9" y="53" width="9.7" height="15.0" fill="rgb(233,31,12)" rx="2" ry="2" />
<text  x="490.85" y="63.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="1112.0" y="341" width="9.7" height="15.0" fill="rgb(207,174,18)" rx="2" ry="2" />
<text  x="1114.98" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (4 samples, 3.31%)</title><rect x="585.4" y="101" width="39.0" height="15.0" fill="rgb(207,199,19)" rx="2" ry="2" />
<text  x="588.37" y="111.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f104d208020, (1 samples, 0.83%)</title><rect x="1053.5" y="197" width="9.7" height="15.0" fill="rgb(220,185,40)" rx="2" ry="2" />
<text  x="1056.47" y="207.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="673.1" y="293" width="48.8" height="15.0" fill="rgb(241,134,51)" rx="2" ry="2" />
<text  x="676.14" y="303.5" >std:..</text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3d01f70) (1 samples, 0.83%)</title><rect x="107.5" y="341" width="9.8" height="15.0" fill="rgb(249,182,54)" rx="2" ry="2" />
<text  x="110.52" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (3 samples, 2.48%)</title><rect x="838.9" y="101" width="29.3" height="15.0" fill="rgb(236,46,43)" rx="2" ry="2" />
<text  x="841.93" y="111.5" >st..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (3 samples, 2.48%)</title><rect x="497.6" y="133" width="29.3" height="15.0" fill="rgb(208,89,19)" rx="2" ry="2" />
<text  x="500.60" y="143.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 0.83%)</title><rect x="1170.5" y="341" width="9.7" height="15.0" fill="rgb(220,206,22)" rx="2" ry="2" />
<text  x="1173.50" y="351.5" ></text>
</g>
<g >
<title>pageRankComputationWithNumNodes (1 samples, 0.83%)</title><rect x="1180.2" y="533" width="9.8" height="15.0" fill="rgb(216,29,28)" rx="2" ry="2" />
<text  x="1183.25" y="543.5" ></text>
</g>
<g >
<title>memcmp@plt() (1 samples, 0.83%)</title><rect x="487.9" y="37" width="9.7" height="15.0" fill="rgb(250,144,28)" rx="2" ry="2" />
<text  x="490.85" y="47.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3bfe2b0) (1 samples, 0.83%)</title><rect x="19.8" y="341" width="9.7" height="15.0" fill="rgb(215,214,5)" rx="2" ry="2" />
<text  x="22.75" y="351.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="575.6" y="245" width="48.8" height="15.0" fill="rgb(215,210,39)" rx="2" ry="2" />
<text  x="578.62" y="255.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="390.3" y="245" width="9.8" height="15.0" fill="rgb(240,140,14)" rx="2" ry="2" />
<text  x="393.33" y="255.5" ></text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 0.83%)</title><rect x="322.1" y="245" width="9.7" height="15.0" fill="rgb(245,60,51)" rx="2" ry="2" />
<text  x="325.07" y="255.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1040000020, (1 samples, 0.83%)</title><rect x="312.3" y="277" width="9.8" height="15.0" fill="rgb(230,52,34)" rx="2" ry="2" />
<text  x="315.31" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (4 samples, 3.31%)</title><rect x="731.7" y="117" width="39.0" height="15.0" fill="rgb(217,99,43)" rx="2" ry="2" />
<text  x="734.65" y="127.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f10402d5190, (1 samples, 0.83%)</title><rect x="1004.7" y="197" width="9.8" height="15.0" fill="rgb(225,53,49)" rx="2" ry="2" />
<text  x="1007.71" y="207.5" ></text>
</g>
<g >
<title>Page::addLink (2 samples, 1.65%)</title><rect x="1131.5" y="501" width="19.5" height="15.0" fill="rgb(248,183,8)" rx="2" ry="2" />
<text  x="1134.49" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (48 samples, 39.67%)</title><rect x="10.0" y="437" width="468.1" height="15.0" fill="rgb(226,222,23)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="721.9" y="229" width="48.8" height="15.0" fill="rgb(240,169,23)" rx="2" ry="2" />
<text  x="724.90" y="239.5" >std:..</text>
</g>
<g >
<title>pageRankComputationWithNumNodes(num=2000, (32 samples, 26.45%)</title><rect x="868.2" y="533" width="312.0" height="15.0" fill="rgb(214,153,16)" rx="2" ry="2" />
<text  x="871.18" y="543.5" >pageRankComputationWithNumNodes(num=2000,</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (5 samples, 4.13%)</title><rect x="770.7" y="101" width="48.7" height="15.0" fill="rgb(219,149,17)" rx="2" ry="2" />
<text  x="773.66" y="111.5" >std:..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::EdgeInfo::push_back (43 samples, 35.54%)</title><rect x="10.0" y="405" width="419.3" height="15.0" fill="rgb(236,163,12)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >MultiThreadedPageRankComputer::EdgeInfo::push_back</text>
</g>
<g >
<title>std::vector&lt;PageId, (17 samples, 14.05%)</title><rect x="136.8" y="389" width="165.8" height="15.0" fill="rgb(232,56,21)" rx="2" ry="2" />
<text  x="139.78" y="399.5" >std::vector&lt;PageId,</text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex(threadid=139708069816064, (3 samples, 2.48%)</title><rect x="956.0" y="341" width="29.2" height="15.0" fill="rgb(229,159,51)" rx="2" ry="2" />
<text  x="958.95" y="351.5" >__..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 3.31%)</title><rect x="731.7" y="165" width="39.0" height="15.0" fill="rgb(252,110,33)" rx="2" ry="2" />
<text  x="734.65" y="175.5" >std..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f103c000020, (1 samples, 0.83%)</title><rect x="253.8" y="229" width="9.8" height="15.0" fill="rgb(227,217,51)" rx="2" ry="2" />
<text  x="256.80" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f1041355ed0, (1 samples, 0.83%)</title><rect x="1014.5" y="197" width="9.7" height="15.0" fill="rgb(224,171,7)" rx="2" ry="2" />
<text  x="1017.46" y="207.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="478.1" y="341" width="48.8" height="15.0" fill="rgb(224,4,34)" rx="2" ry="2" />
<text  x="481.10" y="351.5" >std:..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (4 samples, 3.31%)</title><rect x="731.7" y="101" width="39.0" height="15.0" fill="rgb(241,133,8)" rx="2" ry="2" />
<text  x="734.65" y="111.5" >std..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="575.6" y="309" width="48.8" height="15.0" fill="rgb(246,132,29)" rx="2" ry="2" />
<text  x="578.62" y="319.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="721.9" y="165" width="9.8" height="15.0" fill="rgb(207,106,50)" rx="2" ry="2" />
<text  x="724.90" y="175.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="575.6" y="341" width="48.8" height="15.0" fill="rgb(252,136,34)" rx="2" ry="2" />
<text  x="578.62" y="351.5" >std:..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6b2e8, (3 samples, 2.48%)</title><rect x="956.0" y="373" width="29.2" height="15.0" fill="rgb(211,84,27)" rx="2" ry="2" />
<text  x="958.95" y="383.5" >__..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="468.3" y="357" width="9.8" height="15.0" fill="rgb(252,124,11)" rx="2" ry="2" />
<text  x="471.35" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId,std::allocator&lt;PageId&gt; (1 samples, 0.83%)</title><rect x="1141.2" y="485" width="9.8" height="15.0" fill="rgb(206,83,37)" rx="2" ry="2" />
<text  x="1144.24" y="495.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3cdc140) (1 samples, 0.83%)</title><rect x="88.0" y="341" width="9.8" height="15.0" fill="rgb(224,224,15)" rx="2" ry="2" />
<text  x="91.02" y="351.5" ></text>
</g>
<g >
<title>Page::getId (1 samples, 0.83%)</title><rect x="468.3" y="405" width="9.8" height="15.0" fill="rgb(254,30,49)" rx="2" ry="2" />
<text  x="471.35" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="624.4" y="341" width="48.7" height="15.0" fill="rgb(234,159,19)" rx="2" ry="2" />
<text  x="627.38" y="351.5" >std:..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (3 samples, 2.48%)</title><rect x="1063.2" y="341" width="29.3" height="15.0" fill="rgb(240,85,49)" rx="2" ry="2" />
<text  x="1066.22" y="351.5" >st..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (4 samples, 3.31%)</title><rect x="731.7" y="133" width="39.0" height="15.0" fill="rgb(227,9,37)" rx="2" ry="2" />
<text  x="734.65" y="143.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="468.3" y="341" width="9.8" height="15.0" fill="rgb(218,165,25)" rx="2" ry="2" />
<text  x="471.35" y="351.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="351.3" y="261" width="9.8" height="15.0" fill="rgb(216,14,49)" rx="2" ry="2" />
<text  x="354.32" y="271.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 0.83%)</title><rect x="1112.0" y="357" width="9.7" height="15.0" fill="rgb(234,84,54)" rx="2" ry="2" />
<text  x="1114.98" y="367.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (4 samples, 3.31%)</title><rect x="634.1" y="149" width="39.0" height="15.0" fill="rgb(240,4,14)" rx="2" ry="2" />
<text  x="637.13" y="159.5" >Pag..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.83%)</title><rect x="624.4" y="69" width="9.7" height="15.0" fill="rgb(207,138,13)" rx="2" ry="2" />
<text  x="627.38" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 3.31%)</title><rect x="536.6" y="165" width="39.0" height="15.0" fill="rgb(212,90,1)" rx="2" ry="2" />
<text  x="539.61" y="175.5" >std..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="673.1" y="341" width="48.8" height="15.0" fill="rgb(224,204,33)" rx="2" ry="2" />
<text  x="676.14" y="351.5" >std:..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;PageId*&gt;, (4 samples, 3.31%)</title><rect x="390.3" y="309" width="39.0" height="15.0" fill="rgb(214,1,5)" rx="2" ry="2" />
<text  x="393.33" y="319.5" >std..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.83%)</title><rect x="1180.2" y="341" width="9.8" height="15.0" fill="rgb(246,206,36)" rx="2" ry="2" />
<text  x="1183.25" y="351.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="770.7" y="277" width="48.7" height="15.0" fill="rgb(242,222,7)" rx="2" ry="2" />
<text  x="773.66" y="287.5" >std:..</text>
</g>
<g >
<title>Network::~Network (1 samples, 0.83%)</title><rect x="1180.2" y="517" width="9.8" height="15.0" fill="rgb(211,91,33)" rx="2" ry="2" />
<text  x="1183.25" y="527.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait(this=0x5612e3d6b2c0) (3 samples, 2.48%)</title><rect x="956.0" y="453" width="29.2" height="15.0" fill="rgb(230,6,16)" rx="2" ry="2" />
<text  x="958.95" y="463.5" >st..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1028000020, (1 samples, 0.83%)</title><rect x="175.8" y="229" width="9.7" height="15.0" fill="rgb(221,209,40)" rx="2" ry="2" />
<text  x="178.79" y="239.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3ca57a0) (1 samples, 0.83%)</title><rect x="49.0" y="341" width="9.8" height="15.0" fill="rgb(210,146,6)" rx="2" ry="2" />
<text  x="52.01" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc(bytes=8192) (1 samples, 0.83%)</title><rect x="351.3" y="293" width="9.8" height="15.0" fill="rgb(227,41,5)" rx="2" ry="2" />
<text  x="354.32" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.83%)</title><rect x="819.4" y="117" width="9.8" height="15.0" fill="rgb(228,10,18)" rx="2" ry="2" />
<text  x="822.42" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1131.5" y="421" width="9.7" height="15.0" fill="rgb(252,201,44)" rx="2" ry="2" />
<text  x="1134.49" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1180.2" y="293" width="9.8" height="15.0" fill="rgb(223,117,8)" rx="2" ry="2" />
<text  x="1183.25" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="575.6" y="325" width="48.8" height="15.0" fill="rgb(216,38,12)" rx="2" ry="2" />
<text  x="578.62" y="335.5" >std:..</text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (1 samples, 0.83%)</title><rect x="1180.2" y="437" width="9.8" height="15.0" fill="rgb(252,151,1)" rx="2" ry="2" />
<text  x="1183.25" y="447.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="1112.0" y="389" width="9.7" height="15.0" fill="rgb(223,156,18)" rx="2" ry="2" />
<text  x="1114.98" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (5 samples, 4.13%)</title><rect x="770.7" y="165" width="48.7" height="15.0" fill="rgb(218,136,18)" rx="2" ry="2" />
<text  x="773.66" y="175.5" >std:..</text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="312.3" y="229" width="9.8" height="15.0" fill="rgb(217,171,49)" rx="2" ry="2" />
<text  x="315.31" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc(bytes=2048) (2 samples, 1.65%)</title><rect x="312.3" y="293" width="19.5" height="15.0" fill="rgb(253,108,2)" rx="2" ry="2" />
<text  x="315.31" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (4 samples, 3.31%)</title><rect x="634.1" y="133" width="39.0" height="15.0" fill="rgb(225,12,33)" rx="2" ry="2" />
<text  x="637.13" y="143.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1112.0" y="293" width="9.7" height="15.0" fill="rgb(238,169,36)" rx="2" ry="2" />
<text  x="1114.98" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.83%)</title><rect x="487.9" y="69" width="9.7" height="15.0" fill="rgb(209,32,24)" rx="2" ry="2" />
<text  x="490.85" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f1044f66ef0, (1 samples, 0.83%)</title><rect x="1024.2" y="197" width="9.8" height="15.0" fill="rgb(234,96,7)" rx="2" ry="2" />
<text  x="1027.21" y="207.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (3 samples, 2.48%)</title><rect x="838.9" y="149" width="29.3" height="15.0" fill="rgb(244,24,5)" rx="2" ry="2" />
<text  x="841.93" y="159.5" >Pa..</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=32768) (1 samples, 0.83%)</title><rect x="331.8" y="293" width="9.8" height="15.0" fill="rgb(219,154,50)" rx="2" ry="2" />
<text  x="334.82" y="303.5" ></text>
</g>
<g >
<title>std::thread::join()() (3 samples, 2.48%)</title><rect x="956.0" y="357" width="29.2" height="15.0" fill="rgb(206,67,27)" rx="2" ry="2" />
<text  x="958.95" y="367.5" >st..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.83%)</title><rect x="1141.2" y="453" width="9.8" height="15.0" fill="rgb(210,118,23)" rx="2" ry="2" />
<text  x="1144.24" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.83%)</title><rect x="624.4" y="117" width="9.7" height="15.0" fill="rgb(223,99,51)" rx="2" ry="2" />
<text  x="627.38" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_malloc(bytes=2048) (1 samples, 0.83%)</title><rect x="1141.2" y="389" width="9.8" height="15.0" fill="rgb(224,136,6)" rx="2" ry="2" />
<text  x="1144.24" y="399.5" ></text>
</g>
<g >
<title>Page::getId (1 samples, 0.83%)</title><rect x="1151.0" y="501" width="9.7" height="15.0" fill="rgb(229,209,35)" rx="2" ry="2" />
<text  x="1153.99" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="770.7" y="325" width="48.7" height="15.0" fill="rgb(234,65,35)" rx="2" ry="2" />
<text  x="773.66" y="335.5" >std:..</text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (1 samples, 0.83%)</title><rect x="1121.7" y="485" width="9.8" height="15.0" fill="rgb(218,107,22)" rx="2" ry="2" />
<text  x="1124.74" y="495.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.83%)</title><rect x="1073.0" y="261" width="9.7" height="15.0" fill="rgb(237,33,27)" rx="2" ry="2" />
<text  x="1075.98" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 0.83%)</title><rect x="1180.2" y="261" width="9.8" height="15.0" fill="rgb(221,228,22)" rx="2" ry="2" />
<text  x="1183.25" y="271.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.83%)</title><rect x="1112.0" y="437" width="9.7" height="15.0" fill="rgb(225,164,39)" rx="2" ry="2" />
<text  x="1114.98" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="673.1" y="325" width="48.8" height="15.0" fill="rgb(240,200,28)" rx="2" ry="2" />
<text  x="676.14" y="335.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1151.0" y="437" width="9.7" height="15.0" fill="rgb(207,216,49)" rx="2" ry="2" />
<text  x="1153.99" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="575.6" y="197" width="48.8" height="15.0" fill="rgb(236,129,38)" rx="2" ry="2" />
<text  x="578.62" y="207.5" >std:..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1048000020, (1 samples, 0.83%)</title><rect x="273.3" y="229" width="9.8" height="15.0" fill="rgb(227,118,16)" rx="2" ry="2" />
<text  x="276.31" y="239.5" ></text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="273.3" y="181" width="9.8" height="15.0" fill="rgb(239,98,35)" rx="2" ry="2" />
<text  x="276.31" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (4 samples, 3.31%)</title><rect x="585.4" y="133" width="39.0" height="15.0" fill="rgb(227,121,28)" rx="2" ry="2" />
<text  x="588.37" y="143.5" >std..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f10557c2c40 (1 samples, 0.83%)</title><rect x="1141.2" y="373" width="9.8" height="15.0" fill="rgb(236,183,4)" rx="2" ry="2" />
<text  x="1144.24" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="926.7" y="453" width="9.7" height="15.0" fill="rgb(254,199,50)" rx="2" ry="2" />
<text  x="929.69" y="463.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="1151.0" y="485" width="9.7" height="15.0" fill="rgb(216,116,0)" rx="2" ry="2" />
<text  x="1153.99" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (5 samples, 4.13%)</title><rect x="770.7" y="117" width="48.7" height="15.0" fill="rgb(207,67,22)" rx="2" ry="2" />
<text  x="773.66" y="127.5" >std:..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1040000020, (1 samples, 0.83%)</title><rect x="302.6" y="277" width="9.7" height="15.0" fill="rgb(233,24,15)" rx="2" ry="2" />
<text  x="305.56" y="287.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (4 samples, 3.31%)</title><rect x="731.7" y="149" width="39.0" height="15.0" fill="rgb(229,88,44)" rx="2" ry="2" />
<text  x="734.65" y="159.5" >Pag..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (4 samples, 3.31%)</title><rect x="536.6" y="133" width="39.0" height="15.0" fill="rgb(226,116,46)" rx="2" ry="2" />
<text  x="539.61" y="143.5" >std..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (2 samples, 1.65%)</title><rect x="478.1" y="117" width="19.5" height="15.0" fill="rgb(224,66,12)" rx="2" ry="2" />
<text  x="481.10" y="127.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait(this=0x5612e3d6ac50) (2 samples, 1.65%)</title><rect x="936.4" y="453" width="19.6" height="15.0" fill="rgb(233,3,47)" rx="2" ry="2" />
<text  x="939.45" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="624.4" y="197" width="48.7" height="15.0" fill="rgb(238,94,37)" rx="2" ry="2" />
<text  x="627.38" y="207.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1170.5" y="373" width="9.7" height="15.0" fill="rgb(219,173,36)" rx="2" ry="2" />
<text  x="1173.50" y="383.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="302.6" y="261" width="9.7" height="15.0" fill="rgb(222,99,10)" rx="2" ry="2" />
<text  x="305.56" y="271.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="526.9" y="261" width="48.7" height="15.0" fill="rgb(246,42,27)" rx="2" ry="2" />
<text  x="529.86" y="271.5" >std:..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="624.4" y="293" width="48.7" height="15.0" fill="rgb(223,75,26)" rx="2" ry="2" />
<text  x="627.38" y="303.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (11 samples, 9.09%)</title><rect x="985.2" y="485" width="107.3" height="15.0" fill="rgb(249,47,38)" rx="2" ry="2" />
<text  x="988.21" y="495.5" >std::_Hashtab..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::allocate(this=&lt;optimized (6 samples, 4.96%)</title><rect x="302.6" y="325" width="58.5" height="15.0" fill="rgb(218,215,48)" rx="2" ry="2" />
<text  x="305.56" y="335.5" >__gnu_..</text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 0.83%)</title><rect x="380.6" y="293" width="9.7" height="15.0" fill="rgb(235,165,26)" rx="2" ry="2" />
<text  x="383.58" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.83%)</title><rect x="1141.2" y="437" width="9.8" height="15.0" fill="rgb(220,28,53)" rx="2" ry="2" />
<text  x="1144.24" y="447.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (5 samples, 4.13%)</title><rect x="673.1" y="149" width="48.8" height="15.0" fill="rgb(254,85,6)" rx="2" ry="2" />
<text  x="676.14" y="159.5" >Page..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 0.83%)</title><rect x="575.6" y="149" width="9.8" height="15.0" fill="rgb(239,155,16)" rx="2" ry="2" />
<text  x="578.62" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1112.0" y="325" width="9.7" height="15.0" fill="rgb(238,52,34)" rx="2" ry="2" />
<text  x="1114.98" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="458.6" y="341" width="9.7" height="15.0" fill="rgb(226,21,16)" rx="2" ry="2" />
<text  x="461.60" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="1151.0" y="421" width="9.7" height="15.0" fill="rgb(206,55,34)" rx="2" ry="2" />
<text  x="1153.99" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc(bytes=68) (3 samples, 2.48%)</title><rect x="175.8" y="245" width="29.2" height="15.0" fill="rgb(217,113,19)" rx="2" ry="2" />
<text  x="178.79" y="255.5" >__..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 0.83%)</title><rect x="1170.5" y="469" width="9.7" height="15.0" fill="rgb(248,17,41)" rx="2" ry="2" />
<text  x="1173.50" y="479.5" ></text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="322.1" y="229" width="9.7" height="15.0" fill="rgb(254,131,30)" rx="2" ry="2" />
<text  x="325.07" y="239.5" ></text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (2 samples, 1.65%)</title><rect x="936.4" y="389" width="19.6" height="15.0" fill="rgb(232,41,52)" rx="2" ry="2" />
<text  x="939.45" y="399.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6ad08, (5 samples, 4.13%)</title><rect x="526.9" y="357" width="48.7" height="15.0" fill="rgb(228,53,2)" rx="2" ry="2" />
<text  x="529.86" y="367.5" >__pt..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 0.83%)</title><rect x="458.6" y="325" width="9.7" height="15.0" fill="rgb(211,164,35)" rx="2" ry="2" />
<text  x="461.60" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="770.7" y="197" width="48.7" height="15.0" fill="rgb(210,12,36)" rx="2" ry="2" />
<text  x="773.66" y="207.5" >std:..</text>
</g>
<g >
<title>_int_free(av=0x7f1048000020, (1 samples, 0.83%)</title><rect x="1073.0" y="277" width="9.7" height="15.0" fill="rgb(209,219,8)" rx="2" ry="2" />
<text  x="1075.98" y="287.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="49.0" y="325" width="9.8" height="15.0" fill="rgb(252,25,27)" rx="2" ry="2" />
<text  x="52.01" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="468.3" y="309" width="9.8" height="15.0" fill="rgb(206,81,7)" rx="2" ry="2" />
<text  x="471.35" y="319.5" ></text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 0.83%)</title><rect x="166.0" y="197" width="9.8" height="15.0" fill="rgb(232,148,3)" rx="2" ry="2" />
<text  x="169.03" y="207.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (40 samples, 33.06%)</title><rect x="478.1" y="485" width="390.1" height="15.0" fill="rgb(216,134,39)" rx="2" ry="2" />
<text  x="481.10" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (3 samples, 2.48%)</title><rect x="497.6" y="101" width="29.3" height="15.0" fill="rgb(252,50,17)" rx="2" ry="2" />
<text  x="500.60" y="111.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="624.4" y="165" width="9.7" height="15.0" fill="rgb(209,19,1)" rx="2" ry="2" />
<text  x="627.38" y="175.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="526.9" y="325" width="48.7" height="15.0" fill="rgb(215,11,16)" rx="2" ry="2" />
<text  x="529.86" y="335.5" >std:..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.83%)</title><rect x="1170.5" y="421" width="9.7" height="15.0" fill="rgb(217,179,44)" rx="2" ry="2" />
<text  x="1173.50" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (8 samples, 6.61%)</title><rect x="985.2" y="213" width="78.0" height="15.0" fill="rgb(206,25,18)" rx="2" ry="2" />
<text  x="988.21" y="223.5" >std::allo..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="1112.0" y="213" width="9.7" height="15.0" fill="rgb(225,24,40)" rx="2" ry="2" />
<text  x="1114.98" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (4 samples, 3.31%)</title><rect x="536.6" y="101" width="39.0" height="15.0" fill="rgb(249,9,51)" rx="2" ry="2" />
<text  x="539.61" y="111.5" >std..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="673.1" y="197" width="48.8" height="15.0" fill="rgb(236,13,31)" rx="2" ry="2" />
<text  x="676.14" y="207.5" >std:..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6ae98, (5 samples, 4.13%)</title><rect x="624.4" y="357" width="48.7" height="15.0" fill="rgb(237,215,17)" rx="2" ry="2" />
<text  x="627.38" y="367.5" >__pt..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (8 samples, 6.61%)</title><rect x="985.2" y="293" width="78.0" height="15.0" fill="rgb(208,177,9)" rx="2" ry="2" />
<text  x="988.21" y="303.5" >std::_Des..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1044000020, (1 samples, 0.83%)</title><rect x="263.6" y="229" width="9.7" height="15.0" fill="rgb(245,108,14)" rx="2" ry="2" />
<text  x="266.55" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.83%)</title><rect x="1131.5" y="469" width="9.7" height="15.0" fill="rgb(221,220,32)" rx="2" ry="2" />
<text  x="1134.49" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::allocate(this=&lt;optimized (1 samples, 0.83%)</title><rect x="1141.2" y="421" width="9.8" height="15.0" fill="rgb(221,204,24)" rx="2" ry="2" />
<text  x="1144.24" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="1131.5" y="485" width="9.7" height="15.0" fill="rgb(225,191,32)" rx="2" ry="2" />
<text  x="1134.49" y="495.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 0.83%)</title><rect x="1180.2" y="389" width="9.8" height="15.0" fill="rgb(251,62,19)" rx="2" ry="2" />
<text  x="1183.25" y="399.5" ></text>
</g>
<g >
<title>main(argc=3, (33 samples, 27.27%)</title><rect x="868.2" y="549" width="321.8" height="15.0" fill="rgb(245,196,29)" rx="2" ry="2" />
<text  x="871.18" y="559.5" >main(argc=3,</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="673.1" y="277" width="48.8" height="15.0" fill="rgb(214,139,31)" rx="2" ry="2" />
<text  x="676.14" y="287.5" >std:..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3cdc140) (1 samples, 0.83%)</title><rect x="88.0" y="357" width="9.8" height="15.0" fill="rgb(251,179,14)" rx="2" ry="2" />
<text  x="91.02" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (11 samples, 9.09%)</title><rect x="985.2" y="389" width="107.3" height="15.0" fill="rgb(229,119,45)" rx="2" ry="2" />
<text  x="988.21" y="399.5" >std::pair&lt;Pag..</text>
</g>
<g >
<title>PageIdHash::operator() (4 samples, 3.31%)</title><rect x="585.4" y="149" width="39.0" height="15.0" fill="rgb(237,5,11)" rx="2" ry="2" />
<text  x="588.37" y="159.5" >Pag..</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join (2 samples, 1.65%)</title><rect x="936.4" y="421" width="19.6" height="15.0" fill="rgb(229,229,29)" rx="2" ry="2" />
<text  x="939.45" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="721.9" y="197" width="48.8" height="15.0" fill="rgb(253,63,8)" rx="2" ry="2" />
<text  x="724.90" y="207.5" >std:..</text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;PageId*&gt;, (4 samples, 3.31%)</title><rect x="390.3" y="325" width="39.0" height="15.0" fill="rgb(250,109,26)" rx="2" ry="2" />
<text  x="393.33" y="335.5" >std..</text>
</g>
<g >
<title>__gthread_mutex_unlock(__mutex=0x5612e3c679c0) (1 samples, 0.83%)</title><rect x="117.3" y="357" width="9.7" height="15.0" fill="rgb(230,214,20)" rx="2" ry="2" />
<text  x="120.27" y="367.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="478.1" y="277" width="48.8" height="15.0" fill="rgb(210,61,18)" rx="2" ry="2" />
<text  x="481.10" y="287.5" >std:..</text>
</g>
<g >
<title>SimpleNetworkGenerator::generateNetworkOfSize(this=0x7ffdbb2703a0, (2 samples, 1.65%)</title><rect x="1092.5" y="517" width="19.5" height="15.0" fill="rgb(234,63,31)" rx="2" ry="2" />
<text  x="1095.48" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f1029215810, (1 samples, 0.83%)</title><rect x="985.2" y="197" width="9.8" height="15.0" fill="rgb(207,202,20)" rx="2" ry="2" />
<text  x="988.21" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1170.5" y="357" width="9.7" height="15.0" fill="rgb(233,167,50)" rx="2" ry="2" />
<text  x="1173.50" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.83%)</title><rect x="1112.0" y="485" width="9.7" height="15.0" fill="rgb(228,105,38)" rx="2" ry="2" />
<text  x="1114.98" y="495.5" ></text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 0.83%)</title><rect x="312.3" y="245" width="9.8" height="15.0" fill="rgb(205,155,5)" rx="2" ry="2" />
<text  x="315.31" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="770.7" y="309" width="48.7" height="15.0" fill="rgb(206,165,44)" rx="2" ry="2" />
<text  x="773.66" y="319.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="468.3" y="373" width="9.8" height="15.0" fill="rgb(243,219,28)" rx="2" ry="2" />
<text  x="471.35" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1180.2" y="277" width="9.8" height="15.0" fill="rgb(226,125,44)" rx="2" ry="2" />
<text  x="1183.25" y="287.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal(s=s@entry=0x7ffdbb26fab0, (1 samples, 0.83%)</title><rect x="1121.7" y="421" width="9.8" height="15.0" fill="rgb(253,1,18)" rx="2" ry="2" />
<text  x="1124.74" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="1151.0" y="405" width="9.7" height="15.0" fill="rgb(213,24,50)" rx="2" ry="2" />
<text  x="1153.99" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="819.4" y="293" width="48.8" height="15.0" fill="rgb(239,28,17)" rx="2" ry="2" />
<text  x="822.42" y="303.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1170.5" y="389" width="9.7" height="15.0" fill="rgb(244,131,43)" rx="2" ry="2" />
<text  x="1173.50" y="399.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="936.4" y="469" width="48.8" height="15.0" fill="rgb(213,46,53)" rx="2" ry="2" />
<text  x="939.45" y="479.5" >std:..</text>
</g>
<g >
<title>__gthread_mutex_unlock(__mutex=0x5612e3ccce50) (1 samples, 0.83%)</title><rect x="127.0" y="357" width="9.8" height="15.0" fill="rgb(246,56,38)" rx="2" ry="2" />
<text  x="130.02" y="367.5" ></text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (40 samples, 33.06%)</title><rect x="478.1" y="373" width="390.1" height="15.0" fill="rgb(251,112,3)" rx="2" ry="2" />
<text  x="481.10" y="383.5" >__gthread_once(__func=&lt;optimized</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (3 samples, 2.48%)</title><rect x="429.3" y="357" width="29.3" height="15.0" fill="rgb(246,215,16)" rx="2" ry="2" />
<text  x="432.34" y="367.5" >st..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (8 samples, 6.61%)</title><rect x="985.2" y="309" width="78.0" height="15.0" fill="rgb(215,88,39)" rx="2" ry="2" />
<text  x="988.21" y="319.5" >std::_Des..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="468.3" y="325" width="9.8" height="15.0" fill="rgb(244,92,40)" rx="2" ry="2" />
<text  x="471.35" y="335.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3d01f70) (1 samples, 0.83%)</title><rect x="107.5" y="357" width="9.8" height="15.0" fill="rgb(241,48,25)" rx="2" ry="2" />
<text  x="110.52" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (9 samples, 7.44%)</title><rect x="302.6" y="341" width="87.7" height="15.0" fill="rgb(240,159,8)" rx="2" ry="2" />
<text  x="305.56" y="351.5" >std::alloc..</text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f1035765410) (1 samples, 0.83%)</title><rect x="1053.5" y="181" width="9.7" height="15.0" fill="rgb(242,39,1)" rx="2" ry="2" />
<text  x="1056.47" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.83%)</title><rect x="526.9" y="149" width="9.7" height="15.0" fill="rgb(248,105,44)" rx="2" ry="2" />
<text  x="529.86" y="159.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3c92ed0) (2 samples, 1.65%)</title><rect x="29.5" y="341" width="19.5" height="15.0" fill="rgb(213,56,3)" rx="2" ry="2" />
<text  x="32.50" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.83%)</title><rect x="1112.0" y="469" width="9.7" height="15.0" fill="rgb(248,150,44)" rx="2" ry="2" />
<text  x="1114.98" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="526.9" y="197" width="48.7" height="15.0" fill="rgb(236,156,54)" rx="2" ry="2" />
<text  x="529.86" y="207.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (2 samples, 1.65%)</title><rect x="478.1" y="133" width="19.5" height="15.0" fill="rgb(241,88,7)" rx="2" ry="2" />
<text  x="481.10" y="143.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="819.4" y="325" width="48.8" height="15.0" fill="rgb(226,81,12)" rx="2" ry="2" />
<text  x="822.42" y="335.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 0.83%)</title><rect x="829.2" y="149" width="9.7" height="15.0" fill="rgb(236,18,49)" rx="2" ry="2" />
<text  x="832.17" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (8 samples, 6.61%)</title><rect x="985.2" y="245" width="78.0" height="15.0" fill="rgb(226,186,51)" rx="2" ry="2" />
<text  x="988.21" y="255.5" >std::__cx..</text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f1041148240) (1 samples, 0.83%)</title><rect x="1014.5" y="181" width="9.7" height="15.0" fill="rgb(224,23,20)" rx="2" ry="2" />
<text  x="1017.46" y="191.5" ></text>
</g>
<g >
<title>_int_free(av=0x7f104c000020, (1 samples, 0.83%)</title><rect x="1043.7" y="181" width="9.8" height="15.0" fill="rgb(219,10,18)" rx="2" ry="2" />
<text  x="1046.72" y="191.5" ></text>
</g>
<g >
<title>SimpleNetworkGenerator::generateNetworkOfSize (7 samples, 5.79%)</title><rect x="1112.0" y="517" width="68.2" height="15.0" fill="rgb(211,129,1)" rx="2" ry="2" />
<text  x="1114.98" y="527.5" >SimpleN..</text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 0.83%)</title><rect x="175.8" y="197" width="9.7" height="15.0" fill="rgb(242,21,3)" rx="2" ry="2" />
<text  x="178.79" y="207.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="673.1" y="261" width="48.8" height="15.0" fill="rgb(209,158,14)" rx="2" ry="2" />
<text  x="676.14" y="271.5" >std:..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="721.9" y="213" width="48.8" height="15.0" fill="rgb(237,34,22)" rx="2" ry="2" />
<text  x="724.90" y="223.5" >Mult..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="819.4" y="245" width="48.8" height="15.0" fill="rgb(238,136,33)" rx="2" ry="2" />
<text  x="822.42" y="255.5" >std:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (11 samples, 9.09%)</title><rect x="985.2" y="405" width="107.3" height="15.0" fill="rgb(245,181,13)" rx="2" ry="2" />
<text  x="988.21" y="415.5" >__gnu_cxx::ne..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::EdgeInfo::~EdgeInfo (11 samples, 9.09%)</title><rect x="985.2" y="373" width="107.3" height="15.0" fill="rgb(241,96,38)" rx="2" ry="2" />
<text  x="988.21" y="383.5" >MultiThreaded..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="624.4" y="309" width="48.7" height="15.0" fill="rgb(242,143,36)" rx="2" ry="2" />
<text  x="627.38" y="319.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (1 samples, 0.83%)</title><rect x="926.7" y="469" width="9.7" height="15.0" fill="rgb(216,118,2)" rx="2" ry="2" />
<text  x="929.69" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (3 samples, 2.48%)</title><rect x="400.1" y="245" width="29.2" height="15.0" fill="rgb(234,15,13)" rx="2" ry="2" />
<text  x="403.08" y="255.5" >st..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="244.0" y="213" width="9.8" height="15.0" fill="rgb(254,66,14)" rx="2" ry="2" />
<text  x="247.05" y="223.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="721.9" y="341" width="48.8" height="15.0" fill="rgb(217,175,32)" rx="2" ry="2" />
<text  x="724.90" y="351.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.83%)</title><rect x="458.6" y="373" width="9.7" height="15.0" fill="rgb(251,15,19)" rx="2" ry="2" />
<text  x="461.60" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="770.7" y="245" width="48.7" height="15.0" fill="rgb(207,38,46)" rx="2" ry="2" />
<text  x="773.66" y="255.5" >std:..</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.83%)</title><rect x="487.9" y="101" width="9.7" height="15.0" fill="rgb(210,137,12)" rx="2" ry="2" />
<text  x="490.85" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 2.48%)</title><rect x="838.9" y="165" width="29.3" height="15.0" fill="rgb(222,227,28)" rx="2" ry="2" />
<text  x="841.93" y="175.5" >st..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1040000020, (1 samples, 0.83%)</title><rect x="351.3" y="277" width="9.8" height="15.0" fill="rgb(248,59,12)" rx="2" ry="2" />
<text  x="354.32" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (1 samples, 0.83%)</title><rect x="1180.2" y="469" width="9.8" height="15.0" fill="rgb(223,191,47)" rx="2" ry="2" />
<text  x="1183.25" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate(this=0x5612e3afc908, (1 samples, 0.83%)</title><rect x="1063.2" y="293" width="9.8" height="15.0" fill="rgb(248,101,1)" rx="2" ry="2" />
<text  x="1066.22" y="303.5" ></text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="166.0" y="181" width="9.8" height="15.0" fill="rgb(235,228,3)" rx="2" ry="2" />
<text  x="169.03" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (17 samples, 14.05%)</title><rect x="136.8" y="373" width="165.8" height="15.0" fill="rgb(253,75,35)" rx="2" ry="2" />
<text  x="139.78" y="383.5" >std::allocator_traits..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f10557c2c40 (1 samples, 0.83%)</title><rect x="1112.0" y="229" width="9.7" height="15.0" fill="rgb(217,11,1)" rx="2" ry="2" />
<text  x="1114.98" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="292.8" y="309" width="9.8" height="15.0" fill="rgb(247,43,41)" rx="2" ry="2" />
<text  x="295.81" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (16 samples, 13.22%)</title><rect x="136.8" y="293" width="156.0" height="15.0" fill="rgb(248,3,50)" rx="2" ry="2" />
<text  x="139.78" y="303.5" >std::__cxx11::basic_..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6ac68, (5 samples, 4.13%)</title><rect x="478.1" y="357" width="48.8" height="15.0" fill="rgb(232,88,0)" rx="2" ry="2" />
<text  x="481.10" y="367.5" >__pt..</text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3cd5530) (1 samples, 0.83%)</title><rect x="68.5" y="341" width="9.8" height="15.0" fill="rgb(247,227,18)" rx="2" ry="2" />
<text  x="71.51" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (11 samples, 9.09%)</title><rect x="985.2" y="437" width="107.3" height="15.0" fill="rgb(224,37,28)" rx="2" ry="2" />
<text  x="988.21" y="447.5" >std::__detail..</text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f1034836070) (1 samples, 0.83%)</title><rect x="1024.2" y="181" width="9.8" height="15.0" fill="rgb(229,74,11)" rx="2" ry="2" />
<text  x="1027.21" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="1180.2" y="405" width="9.8" height="15.0" fill="rgb(237,57,27)" rx="2" ry="2" />
<text  x="1183.25" y="415.5" ></text>
</g>
<g >
<title>operatornew(unsigned (6 samples, 4.96%)</title><rect x="302.6" y="309" width="58.5" height="15.0" fill="rgb(206,180,52)" rx="2" ry="2" />
<text  x="305.56" y="319.5" >operat..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="673.1" y="309" width="48.8" height="15.0" fill="rgb(232,123,28)" rx="2" ry="2" />
<text  x="676.14" y="319.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.65%)</title><rect x="146.5" y="261" width="19.5" height="15.0" fill="rgb(224,90,14)" rx="2" ry="2" />
<text  x="149.53" y="271.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="575.6" y="261" width="48.8" height="15.0" fill="rgb(242,23,23)" rx="2" ry="2" />
<text  x="578.62" y="271.5" >std:..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="526.9" y="341" width="48.7" height="15.0" fill="rgb(205,150,28)" rx="2" ry="2" />
<text  x="529.86" y="351.5" >std:..</text>
</g>
<g >
<title>PageId::PageId (4 samples, 3.31%)</title><rect x="390.3" y="277" width="39.0" height="15.0" fill="rgb(207,61,8)" rx="2" ry="2" />
<text  x="393.33" y="287.5" >Pag..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1160.7" y="469" width="9.8" height="15.0" fill="rgb(226,44,3)" rx="2" ry="2" />
<text  x="1163.74" y="479.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (40 samples, 33.06%)</title><rect x="478.1" y="421" width="390.1" height="15.0" fill="rgb(234,196,4)" rx="2" ry="2" />
<text  x="481.10" y="431.5" >std::__future_base::_Async_state_impl&lt;std::thread::_I..</text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.83%)</title><rect x="624.4" y="37" width="9.7" height="15.0" fill="rgb(220,110,14)" rx="2" ry="2" />
<text  x="627.38" y="47.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="1112.0" y="405" width="9.7" height="15.0" fill="rgb(209,143,45)" rx="2" ry="2" />
<text  x="1114.98" y="415.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.83%)</title><rect x="624.4" y="101" width="9.7" height="15.0" fill="rgb(246,153,14)" rx="2" ry="2" />
<text  x="627.38" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="526.9" y="181" width="48.7" height="15.0" fill="rgb(253,52,29)" rx="2" ry="2" />
<text  x="529.86" y="191.5" >std:..</text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="244.0" y="181" width="9.8" height="15.0" fill="rgb(239,172,37)" rx="2" ry="2" />
<text  x="247.05" y="191.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (1 samples, 0.83%)</title><rect x="127.0" y="325" width="9.8" height="15.0" fill="rgb(218,149,29)" rx="2" ry="2" />
<text  x="130.02" y="335.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="624.4" y="213" width="48.7" height="15.0" fill="rgb(252,82,44)" rx="2" ry="2" />
<text  x="627.38" y="223.5" >Mult..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (40 samples, 33.06%)</title><rect x="478.1" y="405" width="390.1" height="15.0" fill="rgb(208,86,36)" rx="2" ry="2" />
<text  x="481.10" y="415.5" >std::__future_base::_State_baseV2::_M_set_result(std:..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 0.83%)</title><rect x="1170.5" y="437" width="9.7" height="15.0" fill="rgb(254,54,19)" rx="2" ry="2" />
<text  x="1173.50" y="447.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="770.7" y="261" width="48.7" height="15.0" fill="rgb(210,7,30)" rx="2" ry="2" />
<text  x="773.66" y="271.5" >std:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f10455754b0, (1 samples, 0.83%)</title><rect x="1034.0" y="197" width="9.7" height="15.0" fill="rgb(224,36,26)" rx="2" ry="2" />
<text  x="1036.97" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="624.4" y="149" width="9.7" height="15.0" fill="rgb(226,166,31)" rx="2" ry="2" />
<text  x="627.38" y="159.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (2 samples, 1.65%)</title><rect x="117.3" y="389" width="19.5" height="15.0" fill="rgb(231,212,1)" rx="2" ry="2" />
<text  x="120.27" y="399.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNumWithGeneratedId (1 samples, 0.83%)</title><rect x="1121.7" y="501" width="9.8" height="15.0" fill="rgb(250,182,6)" rx="2" ry="2" />
<text  x="1124.74" y="511.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (3 samples, 2.48%)</title><rect x="956.0" y="405" width="29.2" height="15.0" fill="rgb(228,197,0)" rx="2" ry="2" />
<text  x="958.95" y="415.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x5612e358b340, (1 samples, 0.83%)</title><rect x="1170.5" y="325" width="9.7" height="15.0" fill="rgb(251,38,20)" rx="2" ry="2" />
<text  x="1173.50" y="335.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="721.9" y="293" width="48.8" height="15.0" fill="rgb(225,149,7)" rx="2" ry="2" />
<text  x="724.90" y="303.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (5 samples, 4.13%)</title><rect x="673.1" y="165" width="48.8" height="15.0" fill="rgb(231,2,9)" rx="2" ry="2" />
<text  x="676.14" y="175.5" >std:..</text>
</g>
<g >
<title>__lll_lock_wait_private (2 samples, 1.65%)</title><rect x="361.1" y="293" width="19.5" height="15.0" fill="rgb(210,207,3)" rx="2" ry="2" />
<text  x="364.07" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="721.9" y="181" width="48.8" height="15.0" fill="rgb(243,226,12)" rx="2" ry="2" />
<text  x="724.90" y="191.5" >std:..</text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="68.5" y="325" width="9.8" height="15.0" fill="rgb(249,190,31)" rx="2" ry="2" />
<text  x="71.51" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 1.65%)</title><rect x="478.1" y="165" width="19.5" height="15.0" fill="rgb(217,0,43)" rx="2" ry="2" />
<text  x="481.10" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="575.6" y="165" width="9.8" height="15.0" fill="rgb(237,114,51)" rx="2" ry="2" />
<text  x="578.62" y="175.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (48 samples, 39.67%)</title><rect x="10.0" y="469" width="468.1" height="15.0" fill="rgb(241,168,17)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::..</text>
</g>
<g >
<title>_int_free(av=0x7f10557c2c40 (1 samples, 0.83%)</title><rect x="1170.5" y="309" width="9.7" height="15.0" fill="rgb(242,20,23)" rx="2" ry="2" />
<text  x="1173.50" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="526.9" y="309" width="48.7" height="15.0" fill="rgb(218,202,15)" rx="2" ry="2" />
<text  x="529.86" y="319.5" >std:..</text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="97.8" y="325" width="9.7" height="15.0" fill="rgb(221,122,29)" rx="2" ry="2" />
<text  x="100.77" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (11 samples, 9.09%)</title><rect x="985.2" y="421" width="107.3" height="15.0" fill="rgb(209,128,39)" rx="2" ry="2" />
<text  x="988.21" y="431.5" >std::allocato..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="770.7" y="341" width="48.7" height="15.0" fill="rgb(209,126,18)" rx="2" ry="2" />
<text  x="773.66" y="351.5" >std:..</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=65536) (1 samples, 0.83%)</title><rect x="341.6" y="293" width="9.7" height="15.0" fill="rgb(215,9,8)" rx="2" ry="2" />
<text  x="344.57" y="303.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="721.9" y="261" width="48.8" height="15.0" fill="rgb(251,10,34)" rx="2" ry="2" />
<text  x="724.90" y="271.5" >std:..</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.83%)</title><rect x="1180.2" y="325" width="9.8" height="15.0" fill="rgb(232,132,27)" rx="2" ry="2" />
<text  x="1183.25" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (3 samples, 2.48%)</title><rect x="1063.2" y="325" width="29.3" height="15.0" fill="rgb(241,76,21)" rx="2" ry="2" />
<text  x="1066.22" y="335.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (3 samples, 2.48%)</title><rect x="1063.2" y="309" width="29.3" height="15.0" fill="rgb(253,43,20)" rx="2" ry="2" />
<text  x="1066.22" y="319.5" >st..</text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="468.3" y="389" width="9.8" height="15.0" fill="rgb(237,12,43)" rx="2" ry="2" />
<text  x="471.35" y="399.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="78.3" y="325" width="9.7" height="15.0" fill="rgb(253,64,28)" rx="2" ry="2" />
<text  x="81.26" y="335.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1044000020, (1 samples, 0.83%)</title><rect x="322.1" y="277" width="9.7" height="15.0" fill="rgb(236,112,1)" rx="2" ry="2" />
<text  x="325.07" y="287.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (4 samples, 3.31%)</title><rect x="536.6" y="149" width="39.0" height="15.0" fill="rgb(226,91,34)" rx="2" ry="2" />
<text  x="539.61" y="159.5" >Pag..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="478.1" y="309" width="48.8" height="15.0" fill="rgb(229,98,4)" rx="2" ry="2" />
<text  x="481.10" y="319.5" >std:..</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async (2 samples, 1.65%)</title><rect x="936.4" y="437" width="19.6" height="15.0" fill="rgb(229,78,44)" rx="2" ry="2" />
<text  x="939.45" y="447.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (11 samples, 9.09%)</title><rect x="10.0" y="389" width="107.3" height="15.0" fill="rgb(224,111,51)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >std::lock_gua..</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="478.1" y="245" width="48.8" height="15.0" fill="rgb(205,73,37)" rx="2" ry="2" />
<text  x="481.10" y="255.5" >std:..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1030000020, (1 samples, 0.83%)</title><rect x="244.0" y="229" width="9.8" height="15.0" fill="rgb(220,183,12)" rx="2" ry="2" />
<text  x="247.05" y="239.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1048000020, (1 samples, 0.83%)</title><rect x="195.3" y="229" width="9.7" height="15.0" fill="rgb(218,145,26)" rx="2" ry="2" />
<text  x="198.29" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (8 samples, 6.61%)</title><rect x="985.2" y="341" width="78.0" height="15.0" fill="rgb(248,31,7)" rx="2" ry="2" />
<text  x="988.21" y="351.5" >std::_Des..</text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f104c000020, (1 samples, 0.83%)</title><rect x="283.1" y="229" width="9.7" height="15.0" fill="rgb(254,102,52)" rx="2" ry="2" />
<text  x="286.06" y="239.5" ></text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 0.83%)</title><rect x="185.5" y="197" width="9.8" height="15.0" fill="rgb(206,42,35)" rx="2" ry="2" />
<text  x="188.54" y="207.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="575.6" y="213" width="48.8" height="15.0" fill="rgb(235,144,40)" rx="2" ry="2" />
<text  x="578.62" y="223.5" >Mult..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="331.8" y="261" width="9.8" height="15.0" fill="rgb(212,79,4)" rx="2" ry="2" />
<text  x="334.82" y="271.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="526.9" y="245" width="48.7" height="15.0" fill="rgb(216,57,30)" rx="2" ry="2" />
<text  x="529.86" y="255.5" >std:..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="624.4" y="261" width="48.7" height="15.0" fill="rgb(226,175,31)" rx="2" ry="2" />
<text  x="627.38" y="271.5" >std:..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (8 samples, 6.61%)</title><rect x="985.2" y="325" width="78.0" height="15.0" fill="rgb(240,7,1)" rx="2" ry="2" />
<text  x="988.21" y="335.5" >std::_Des..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="526.9" y="229" width="48.7" height="15.0" fill="rgb(237,210,46)" rx="2" ry="2" />
<text  x="529.86" y="239.5" >std:..</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.83%)</title><rect x="1170.5" y="405" width="9.7" height="15.0" fill="rgb(253,70,36)" rx="2" ry="2" />
<text  x="1173.50" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (11 samples, 9.09%)</title><rect x="985.2" y="501" width="107.3" height="15.0" fill="rgb(240,46,25)" rx="2" ry="2" />
<text  x="988.21" y="511.5" >std::unordere..</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=69) (1 samples, 0.83%)</title><rect x="1112.0" y="245" width="9.7" height="15.0" fill="rgb(206,17,46)" rx="2" ry="2" />
<text  x="1114.98" y="255.5" ></text>
</g>
<g >
<title>Page::~Page (2 samples, 1.65%)</title><rect x="1160.7" y="501" width="19.5" height="15.0" fill="rgb(226,196,26)" rx="2" ry="2" />
<text  x="1163.74" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (17 samples, 14.05%)</title><rect x="136.8" y="357" width="165.8" height="15.0" fill="rgb(227,100,15)" rx="2" ry="2" />
<text  x="139.78" y="367.5" >__gnu_cxx::new_alloca..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="673.1" y="213" width="48.8" height="15.0" fill="rgb(240,103,22)" rx="2" ry="2" />
<text  x="676.14" y="223.5" >Mult..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;PageId*&gt;, (4 samples, 3.31%)</title><rect x="390.3" y="341" width="39.0" height="15.0" fill="rgb(209,203,8)" rx="2" ry="2" />
<text  x="393.33" y="351.5" >std..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.83%)</title><rect x="458.6" y="357" width="9.7" height="15.0" fill="rgb(237,161,10)" rx="2" ry="2" />
<text  x="461.60" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (4 samples, 3.31%)</title><rect x="634.1" y="101" width="39.0" height="15.0" fill="rgb(229,30,47)" rx="2" ry="2" />
<text  x="637.13" y="111.5" >std..</text>
</g>
<g >
<title>start_thread(arg=&lt;optimized (88 samples, 72.73%)</title><rect x="10.0" y="533" width="858.2" height="15.0" fill="rgb(230,102,13)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >start_thread(arg=&lt;optimized</text>
</g>
<g >
<title>std::vector&lt;PageId,std::allocator&lt;PageId&gt; (13 samples, 10.74%)</title><rect x="302.6" y="389" width="126.7" height="15.0" fill="rgb(226,129,26)" rx="2" ry="2" />
<text  x="305.56" y="399.5" >std::vector&lt;Pag..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 0.83%)</title><rect x="1180.2" y="357" width="9.8" height="15.0" fill="rgb(231,151,5)" rx="2" ry="2" />
<text  x="1183.25" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="526.9" y="165" width="9.7" height="15.0" fill="rgb(236,181,3)" rx="2" ry="2" />
<text  x="529.86" y="175.5" ></text>
</g>
<g >
<title>operatornew(unsigned (13 samples, 10.74%)</title><rect x="166.0" y="261" width="126.8" height="15.0" fill="rgb(209,203,11)" rx="2" ry="2" />
<text  x="169.03" y="271.5" >operatornew(uns..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (9 samples, 7.44%)</title><rect x="302.6" y="357" width="87.7" height="15.0" fill="rgb(228,134,28)" rx="2" ry="2" />
<text  x="305.56" y="367.5" >std::_Vect..</text>
</g>
<g >
<title>_int_free(av=0x7f1044000020, (1 samples, 0.83%)</title><rect x="1082.7" y="277" width="9.8" height="15.0" fill="rgb(208,99,35)" rx="2" ry="2" />
<text  x="1085.73" y="287.5" ></text>
</g>
<g >
<title>Network::addPage (1 samples, 0.83%)</title><rect x="1112.0" y="501" width="9.7" height="15.0" fill="rgb(229,25,19)" rx="2" ry="2" />
<text  x="1114.98" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (5 samples, 4.13%)</title><rect x="673.1" y="117" width="48.8" height="15.0" fill="rgb(212,198,7)" rx="2" ry="2" />
<text  x="676.14" y="127.5" >std:..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="263.6" y="213" width="9.7" height="15.0" fill="rgb(215,48,16)" rx="2" ry="2" />
<text  x="266.55" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (1 samples, 0.83%)</title><rect x="1131.5" y="453" width="9.7" height="15.0" fill="rgb(207,145,46)" rx="2" ry="2" />
<text  x="1134.49" y="463.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1048000020, (1 samples, 0.83%)</title><rect x="166.0" y="229" width="9.8" height="15.0" fill="rgb(219,179,13)" rx="2" ry="2" />
<text  x="169.03" y="239.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="624.4" y="245" width="48.7" height="15.0" fill="rgb(209,55,48)" rx="2" ry="2" />
<text  x="627.38" y="255.5" >std:..</text>
</g>
<g >
<title>grow_heap(diff=8192, (1 samples, 0.83%)</title><rect x="351.3" y="245" width="9.8" height="15.0" fill="rgb(233,79,24)" rx="2" ry="2" />
<text  x="354.32" y="255.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="253.8" y="213" width="9.8" height="15.0" fill="rgb(217,174,21)" rx="2" ry="2" />
<text  x="256.80" y="223.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f104c000020, (1 samples, 0.83%)</title><rect x="341.6" y="277" width="9.7" height="15.0" fill="rgb(253,52,7)" rx="2" ry="2" />
<text  x="344.57" y="287.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.83%)</title><rect x="487.9" y="85" width="9.7" height="15.0" fill="rgb(205,219,17)" rx="2" ry="2" />
<text  x="490.85" y="95.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (40 samples, 33.06%)</title><rect x="478.1" y="501" width="390.1" height="15.0" fill="rgb(223,84,23)" rx="2" ry="2" />
<text  x="481.10" y="511.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::t..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="478.1" y="325" width="48.8" height="15.0" fill="rgb(210,154,7)" rx="2" ry="2" />
<text  x="481.10" y="335.5" >std:..</text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (5 samples, 4.13%)</title><rect x="673.1" y="101" width="48.8" height="15.0" fill="rgb(247,185,21)" rx="2" ry="2" />
<text  x="676.14" y="111.5" >std:..</text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3cd85f0) (1 samples, 0.83%)</title><rect x="78.3" y="341" width="9.7" height="15.0" fill="rgb(243,136,27)" rx="2" ry="2" />
<text  x="81.26" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (5 samples, 4.13%)</title><rect x="673.1" y="133" width="48.8" height="15.0" fill="rgb(211,74,17)" rx="2" ry="2" />
<text  x="676.14" y="143.5" >std:..</text>
</g>
<g >
<title>_int_free(av=0x7f1044000020, (1 samples, 0.83%)</title><rect x="380.6" y="309" width="9.7" height="15.0" fill="rgb(212,221,51)" rx="2" ry="2" />
<text  x="383.58" y="319.5" ></text>
</g>
<g >
<title>_int_free(av=0x7f1034000020, (1 samples, 0.83%)</title><rect x="1063.2" y="277" width="9.8" height="15.0" fill="rgb(208,93,9)" rx="2" ry="2" />
<text  x="1066.22" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (4 samples, 3.31%)</title><rect x="429.3" y="405" width="39.0" height="15.0" fill="rgb(243,149,16)" rx="2" ry="2" />
<text  x="432.34" y="415.5" >std..</text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex(threadid=139708103386880, (2 samples, 1.65%)</title><rect x="936.4" y="341" width="19.6" height="15.0" fill="rgb(215,28,5)" rx="2" ry="2" />
<text  x="939.45" y="351.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="721.9" y="245" width="48.8" height="15.0" fill="rgb(216,222,7)" rx="2" ry="2" />
<text  x="724.90" y="255.5" >std:..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6b4a8, (5 samples, 4.13%)</title><rect x="819.4" y="357" width="48.8" height="15.0" fill="rgb(227,201,43)" rx="2" ry="2" />
<text  x="822.42" y="367.5" >__pt..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 2.48%)</title><rect x="136.8" y="277" width="29.2" height="15.0" fill="rgb(231,190,13)" rx="2" ry="2" />
<text  x="139.78" y="287.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate(this=0x5612e3cd0bf8, (1 samples, 0.83%)</title><rect x="1073.0" y="293" width="9.7" height="15.0" fill="rgb(206,178,31)" rx="2" ry="2" />
<text  x="1075.98" y="303.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3ce4750) (1 samples, 0.83%)</title><rect x="97.8" y="357" width="9.7" height="15.0" fill="rgb(242,198,1)" rx="2" ry="2" />
<text  x="100.77" y="367.5" ></text>
</g>
<g >
<title>std::(__val=740) (1 samples, 0.83%)</title><rect x="1121.7" y="469" width="9.8" height="15.0" fill="rgb(218,78,53)" rx="2" ry="2" />
<text  x="1124.74" y="479.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="175.8" y="213" width="9.7" height="15.0" fill="rgb(230,62,1)" rx="2" ry="2" />
<text  x="178.79" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="819.4" y="309" width="48.8" height="15.0" fill="rgb(216,202,7)" rx="2" ry="2" />
<text  x="822.42" y="319.5" >std:..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="770.7" y="213" width="48.7" height="15.0" fill="rgb(220,211,49)" rx="2" ry="2" />
<text  x="773.66" y="223.5" >Mult..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="478.1" y="261" width="48.8" height="15.0" fill="rgb(228,147,6)" rx="2" ry="2" />
<text  x="481.10" y="271.5" >std:..</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=16384) (1 samples, 0.83%)</title><rect x="302.6" y="293" width="9.7" height="15.0" fill="rgb(217,126,22)" rx="2" ry="2" />
<text  x="305.56" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="1121.7" y="453" width="9.8" height="15.0" fill="rgb(252,0,9)" rx="2" ry="2" />
<text  x="1124.74" y="463.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1030000020, (1 samples, 0.83%)</title><rect x="185.5" y="229" width="9.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="188.54" y="239.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="673.1" y="245" width="48.8" height="15.0" fill="rgb(209,173,21)" rx="2" ry="2" />
<text  x="676.14" y="255.5" >std:..</text>
</g>
<g >
<title>std::mutex::unlock (2 samples, 1.65%)</title><rect x="117.3" y="373" width="19.5" height="15.0" fill="rgb(248,11,1)" rx="2" ry="2" />
<text  x="120.27" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (3 samples, 2.48%)</title><rect x="838.9" y="117" width="29.3" height="15.0" fill="rgb(240,39,25)" rx="2" ry="2" />
<text  x="841.93" y="127.5" >st..</text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f10486f21d0) (1 samples, 0.83%)</title><rect x="1034.0" y="181" width="9.7" height="15.0" fill="rgb(247,157,19)" rx="2" ry="2" />
<text  x="1036.97" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 0.83%)</title><rect x="1180.2" y="245" width="9.8" height="15.0" fill="rgb(249,182,51)" rx="2" ry="2" />
<text  x="1183.25" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (4 samples, 3.31%)</title><rect x="585.4" y="117" width="39.0" height="15.0" fill="rgb(218,219,36)" rx="2" ry="2" />
<text  x="588.37" y="127.5" >std..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="312.3" y="261" width="9.8" height="15.0" fill="rgb(232,111,48)" rx="2" ry="2" />
<text  x="315.31" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::Pool::join(this=0x7ffdbb26fda0) (6 samples, 4.96%)</title><rect x="868.2" y="485" width="58.5" height="15.0" fill="rgb(252,17,11)" rx="2" ry="2" />
<text  x="871.18" y="495.5" >MultiT..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId,MultiThreadedPageRankComputer::EdgeInfo, (1 samples, 0.83%)</title><rect x="926.7" y="485" width="9.7" height="15.0" fill="rgb(220,131,33)" rx="2" ry="2" />
<text  x="929.69" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="478.1" y="181" width="48.8" height="15.0" fill="rgb(207,113,41)" rx="2" ry="2" />
<text  x="481.10" y="191.5" >std:..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (40 samples, 33.06%)</title><rect x="478.1" y="469" width="390.1" height="15.0" fill="rgb(211,115,12)" rx="2" ry="2" />
<text  x="481.10" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.83%)</title><rect x="624.4" y="133" width="9.7" height="15.0" fill="rgb(250,117,20)" rx="2" ry="2" />
<text  x="627.38" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="1170.5" y="485" width="9.7" height="15.0" fill="rgb(225,156,54)" rx="2" ry="2" />
<text  x="1173.50" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator()(this=0x7ffdbb26fde0, (1 samples, 0.83%)</title><rect x="526.9" y="133" width="9.7" height="15.0" fill="rgb(232,37,33)" rx="2" ry="2" />
<text  x="529.86" y="143.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (5 samples, 4.13%)</title><rect x="770.7" y="149" width="48.7" height="15.0" fill="rgb(222,28,39)" rx="2" ry="2" />
<text  x="773.66" y="159.5" >Page..</text>
</g>
<g >
<title>operatornew(unsigned (1 samples, 0.83%)</title><rect x="1141.2" y="405" width="9.8" height="15.0" fill="rgb(253,107,27)" rx="2" ry="2" />
<text  x="1144.24" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="575.6" y="293" width="48.8" height="15.0" fill="rgb(251,184,32)" rx="2" ry="2" />
<text  x="578.62" y="303.5" >std:..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (1 samples, 0.83%)</title><rect x="1180.2" y="453" width="9.8" height="15.0" fill="rgb(210,98,33)" rx="2" ry="2" />
<text  x="1183.25" y="463.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, (5 samples, 4.13%)</title><rect x="819.4" y="341" width="48.8" height="15.0" fill="rgb(207,222,28)" rx="2" ry="2" />
<text  x="822.42" y="351.5" >std:..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="624.4" y="229" width="48.7" height="15.0" fill="rgb(248,39,43)" rx="2" ry="2" />
<text  x="627.38" y="239.5" >std:..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3bfe2b0) (1 samples, 0.83%)</title><rect x="19.8" y="357" width="9.7" height="15.0" fill="rgb(250,212,38)" rx="2" ry="2" />
<text  x="22.75" y="367.5" ></text>
</g>
<g >
<title>_int_free(av=0x7f1040000020, (2 samples, 1.65%)</title><rect x="361.1" y="309" width="19.5" height="15.0" fill="rgb(252,85,35)" rx="2" ry="2" />
<text  x="364.07" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1151.0" y="453" width="9.7" height="15.0" fill="rgb(217,113,22)" rx="2" ry="2" />
<text  x="1153.99" y="463.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6ada8, (5 samples, 4.13%)</title><rect x="575.6" y="357" width="48.8" height="15.0" fill="rgb(225,187,6)" rx="2" ry="2" />
<text  x="578.62" y="367.5" >__pt..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (8 samples, 6.61%)</title><rect x="985.2" y="261" width="78.0" height="15.0" fill="rgb(211,130,24)" rx="2" ry="2" />
<text  x="988.21" y="271.5" >std::__cx..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="575.6" y="181" width="48.8" height="15.0" fill="rgb(247,194,0)" rx="2" ry="2" />
<text  x="578.62" y="191.5" >std:..</text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="175.8" y="181" width="9.7" height="15.0" fill="rgb(248,97,38)" rx="2" ry="2" />
<text  x="178.79" y="191.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="19.8" y="325" width="9.7" height="15.0" fill="rgb(249,13,48)" rx="2" ry="2" />
<text  x="22.75" y="335.5" ></text>
</g>
<g >
<title>PageId::PageId (17 samples, 14.05%)</title><rect x="136.8" y="341" width="165.8" height="15.0" fill="rgb(222,143,21)" rx="2" ry="2" />
<text  x="139.78" y="351.5" >PageId::PageId</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (4 samples, 3.31%)</title><rect x="536.6" y="117" width="39.0" height="15.0" fill="rgb(224,64,12)" rx="2" ry="2" />
<text  x="539.61" y="127.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="819.4" y="149" width="9.8" height="15.0" fill="rgb(244,34,13)" rx="2" ry="2" />
<text  x="822.42" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x7f10457ebe50, (1 samples, 0.83%)</title><rect x="1043.7" y="197" width="9.8" height="15.0" fill="rgb(217,145,4)" rx="2" ry="2" />
<text  x="1046.72" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 1.65%)</title><rect x="819.4" y="165" width="19.5" height="15.0" fill="rgb(227,5,24)" rx="2" ry="2" />
<text  x="822.42" y="175.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="624.4" y="325" width="48.7" height="15.0" fill="rgb(218,16,31)" rx="2" ry="2" />
<text  x="627.38" y="335.5" >std:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.83%)</title><rect x="1112.0" y="453" width="9.7" height="15.0" fill="rgb(230,128,16)" rx="2" ry="2" />
<text  x="1114.98" y="463.5" ></text>
</g>
<g >
<title>all (121 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(232,190,30)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>__gthread_once(__func=&lt;optimized (3 samples, 2.48%)</title><rect x="956.0" y="389" width="29.2" height="15.0" fill="rgb(241,130,22)" rx="2" ry="2" />
<text  x="958.95" y="399.5" >__..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="1112.0" y="421" width="9.7" height="15.0" fill="rgb(222,216,35)" rx="2" ry="2" />
<text  x="1114.98" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (3 samples, 2.48%)</title><rect x="838.9" y="133" width="29.3" height="15.0" fill="rgb(214,57,52)" rx="2" ry="2" />
<text  x="841.93" y="143.5" >st..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="819.4" y="213" width="48.8" height="15.0" fill="rgb(221,11,26)" rx="2" ry="2" />
<text  x="822.42" y="223.5" >Mult..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1180.2" y="309" width="9.8" height="15.0" fill="rgb(241,121,54)" rx="2" ry="2" />
<text  x="1183.25" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1160.7" y="485" width="9.8" height="15.0" fill="rgb(221,164,52)" rx="2" ry="2" />
<text  x="1163.74" y="495.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::initEdges (7 samples, 5.79%)</title><rect x="868.2" y="501" width="68.2" height="15.0" fill="rgb(232,101,44)" rx="2" ry="2" />
<text  x="871.18" y="511.5" >MultiTh..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="770.7" y="181" width="48.7" height="15.0" fill="rgb(209,223,5)" rx="2" ry="2" />
<text  x="773.66" y="191.5" >std:..</text>
</g>
<g >
<title>_IO_vsnprintf(string=0x7ffdbb26fc20 (1 samples, 0.83%)</title><rect x="1121.7" y="437" width="9.8" height="15.0" fill="rgb(247,134,3)" rx="2" ry="2" />
<text  x="1124.74" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="819.4" y="181" width="48.8" height="15.0" fill="rgb(244,201,39)" rx="2" ry="2" />
<text  x="822.42" y="191.5" >std:..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e39bb650) (1 samples, 0.83%)</title><rect x="10.0" y="357" width="9.8" height="15.0" fill="rgb(216,98,21)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="673.1" y="229" width="48.8" height="15.0" fill="rgb(243,79,52)" rx="2" ry="2" />
<text  x="676.14" y="239.5" >std:..</text>
</g>
<g >
<title>std::thread::join()() (6 samples, 4.96%)</title><rect x="868.2" y="469" width="58.5" height="15.0" fill="rgb(234,117,11)" rx="2" ry="2" />
<text  x="871.18" y="479.5" >std::t..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate(this=&lt;optimized (3 samples, 2.48%)</title><rect x="361.1" y="325" width="29.2" height="15.0" fill="rgb(207,186,39)" rx="2" ry="2" />
<text  x="364.07" y="335.5" >__..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="819.4" y="197" width="48.8" height="15.0" fill="rgb(249,63,19)" rx="2" ry="2" />
<text  x="822.42" y="207.5" >std:..</text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 0.83%)</title><rect x="244.0" y="197" width="9.8" height="15.0" fill="rgb(232,51,2)" rx="2" ry="2" />
<text  x="247.05" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (5 samples, 4.13%)</title><rect x="770.7" y="133" width="48.7" height="15.0" fill="rgb(246,19,35)" rx="2" ry="2" />
<text  x="773.66" y="143.5" >std:..</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=67) (1 samples, 0.83%)</title><rect x="166.0" y="245" width="9.8" height="15.0" fill="rgb(229,149,40)" rx="2" ry="2" />
<text  x="169.03" y="255.5" ></text>
</g>
<g >
<title>std::thread::join()() (2 samples, 1.65%)</title><rect x="936.4" y="357" width="19.6" height="15.0" fill="rgb(228,125,39)" rx="2" ry="2" />
<text  x="939.45" y="367.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6b2d8, (5 samples, 4.13%)</title><rect x="770.7" y="357" width="48.7" height="15.0" fill="rgb(243,205,54)" rx="2" ry="2" />
<text  x="773.66" y="367.5" >__pt..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="721.9" y="277" width="48.8" height="15.0" fill="rgb(215,53,16)" rx="2" ry="2" />
<text  x="724.90" y="287.5" >std:..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 4.13%)</title><rect x="478.1" y="197" width="48.8" height="15.0" fill="rgb(252,101,43)" rx="2" ry="2" />
<text  x="481.10" y="207.5" >std:..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="185.5" y="213" width="9.8" height="15.0" fill="rgb(236,186,53)" rx="2" ry="2" />
<text  x="188.54" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate(this=0x5612e3cdb5c8, (1 samples, 0.83%)</title><rect x="1082.7" y="293" width="9.8" height="15.0" fill="rgb(231,65,6)" rx="2" ry="2" />
<text  x="1085.73" y="303.5" ></text>
</g>
<g >
<title>grow_heap(diff=4096, (1 samples, 0.83%)</title><rect x="273.3" y="197" width="9.8" height="15.0" fill="rgb(239,69,39)" rx="2" ry="2" />
<text  x="276.31" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (11 samples, 9.09%)</title><rect x="985.2" y="469" width="107.3" height="15.0" fill="rgb(219,139,41)" rx="2" ry="2" />
<text  x="988.21" y="479.5" >std::_Hashtab..</text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.83%)</title><rect x="117.3" y="341" width="9.7" height="15.0" fill="rgb(215,227,47)" rx="2" ry="2" />
<text  x="120.27" y="351.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="526.9" y="277" width="48.7" height="15.0" fill="rgb(223,123,31)" rx="2" ry="2" />
<text  x="529.86" y="287.5" >std:..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (40 samples, 33.06%)</title><rect x="478.1" y="437" width="390.1" height="15.0" fill="rgb(239,126,4)" rx="2" ry="2" />
<text  x="481.10" y="447.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::future&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="936.4" y="485" width="48.8" height="15.0" fill="rgb(238,126,50)" rx="2" ry="2" />
<text  x="939.45" y="495.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1112.0" y="309" width="9.7" height="15.0" fill="rgb(215,49,37)" rx="2" ry="2" />
<text  x="1114.98" y="319.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3ccce50) (1 samples, 0.83%)</title><rect x="58.8" y="341" width="9.7" height="15.0" fill="rgb(226,49,6)" rx="2" ry="2" />
<text  x="61.76" y="351.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (2 samples, 1.65%)</title><rect x="936.4" y="405" width="19.6" height="15.0" fill="rgb(206,150,0)" rx="2" ry="2" />
<text  x="939.45" y="415.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="88.0" y="325" width="9.8" height="15.0" fill="rgb(254,95,39)" rx="2" ry="2" />
<text  x="91.02" y="335.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 0.83%)</title><rect x="624.4" y="53" width="9.7" height="15.0" fill="rgb(209,80,17)" rx="2" ry="2" />
<text  x="627.38" y="63.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="770.7" y="229" width="48.7" height="15.0" fill="rgb(206,224,48)" rx="2" ry="2" />
<text  x="773.66" y="239.5" >std:..</text>
</g>
<g >
<title>mprotect() (1 samples, 0.83%)</title><rect x="351.3" y="229" width="9.8" height="15.0" fill="rgb(250,97,53)" rx="2" ry="2" />
<text  x="354.32" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f103c79f000) (1 samples, 0.83%)</title><rect x="995.0" y="181" width="9.7" height="15.0" fill="rgb(218,68,2)" rx="2" ry="2" />
<text  x="997.96" y="191.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6ac78, (2 samples, 1.65%)</title><rect x="936.4" y="373" width="19.6" height="15.0" fill="rgb(225,157,8)" rx="2" ry="2" />
<text  x="939.45" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (48 samples, 39.67%)</title><rect x="10.0" y="453" width="468.1" height="15.0" fill="rgb(209,104,21)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std::__invoke&lt;MultiThreadedPageRankComputer::initEdges(MultiThre..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 4.13%)</title><rect x="624.4" y="181" width="48.7" height="15.0" fill="rgb(230,51,32)" rx="2" ry="2" />
<text  x="627.38" y="191.5" >std:..</text>
</g>
<g >
<title>??() (88 samples, 72.73%)</title><rect x="10.0" y="517" width="858.2" height="15.0" fill="rgb(228,51,44)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >??()</text>
</g>
<g >
<title>__GI___libc_malloc(bytes=69) (9 samples, 7.44%)</title><rect x="205.0" y="245" width="87.8" height="15.0" fill="rgb(212,170,15)" rx="2" ry="2" />
<text  x="208.04" y="255.5" >__GI___lib..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (47 samples, 38.84%)</title><rect x="10.0" y="421" width="458.3" height="15.0" fill="rgb(251,229,41)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRank..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="1131.5" y="405" width="9.7" height="15.0" fill="rgb(226,221,28)" rx="2" ry="2" />
<text  x="1134.49" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;PageId*, (4 samples, 3.31%)</title><rect x="390.3" y="357" width="39.0" height="15.0" fill="rgb(213,103,33)" rx="2" ry="2" />
<text  x="393.33" y="367.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (11 samples, 9.09%)</title><rect x="985.2" y="453" width="107.3" height="15.0" fill="rgb(212,138,45)" rx="2" ry="2" />
<text  x="988.21" y="463.5" >std::__detail..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 3.31%)</title><rect x="585.4" y="165" width="39.0" height="15.0" fill="rgb(234,136,18)" rx="2" ry="2" />
<text  x="588.37" y="175.5" >std..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3ca57a0) (1 samples, 0.83%)</title><rect x="49.0" y="357" width="9.8" height="15.0" fill="rgb(209,201,41)" rx="2" ry="2" />
<text  x="52.01" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 2.48%)</title><rect x="429.3" y="373" width="29.3" height="15.0" fill="rgb(243,226,31)" rx="2" ry="2" />
<text  x="432.34" y="383.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="1112.0" y="373" width="9.7" height="15.0" fill="rgb(221,167,54)" rx="2" ry="2" />
<text  x="1114.98" y="383.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="1131.5" y="437" width="9.7" height="15.0" fill="rgb(229,45,18)" rx="2" ry="2" />
<text  x="1134.49" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (4 samples, 3.31%)</title><rect x="429.3" y="389" width="39.0" height="15.0" fill="rgb(221,30,0)" rx="2" ry="2" />
<text  x="432.34" y="399.5" >std..</text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.83%)</title><rect x="1063.2" y="261" width="9.8" height="15.0" fill="rgb(233,123,33)" rx="2" ry="2" />
<text  x="1066.22" y="271.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join (3 samples, 2.48%)</title><rect x="956.0" y="421" width="29.2" height="15.0" fill="rgb(229,11,3)" rx="2" ry="2" />
<text  x="958.95" y="431.5" >st..</text>
</g>
<g >
<title>__lll_lock_wait (2 samples, 1.65%)</title><rect x="29.5" y="325" width="19.5" height="15.0" fill="rgb(254,180,1)" rx="2" ry="2" />
<text  x="32.50" y="335.5" ></text>
</g>
<g >
<title>std::mutex::lock (11 samples, 9.09%)</title><rect x="10.0" y="373" width="107.3" height="15.0" fill="rgb(208,73,32)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >std::mutex::l..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base,std::__future_base::_Result_base::_Deleter&gt; (5 samples, 4.13%)</title><rect x="721.9" y="325" width="48.8" height="15.0" fill="rgb(206,58,20)" rx="2" ry="2" />
<text  x="724.90" y="335.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.83%)</title><rect x="1112.0" y="277" width="9.7" height="15.0" fill="rgb(230,143,52)" rx="2" ry="2" />
<text  x="1114.98" y="287.5" ></text>
</g>
<g >
<title>Page::~Page (1 samples, 0.83%)</title><rect x="1180.2" y="421" width="9.8" height="15.0" fill="rgb(207,88,54)" rx="2" ry="2" />
<text  x="1183.25" y="431.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="195.3" y="213" width="9.7" height="15.0" fill="rgb(205,91,42)" rx="2" ry="2" />
<text  x="198.29" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 1.65%)</title><rect x="478.1" y="149" width="19.5" height="15.0" fill="rgb(213,119,43)" rx="2" ry="2" />
<text  x="481.10" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="1141.2" y="469" width="9.8" height="15.0" fill="rgb(228,131,54)" rx="2" ry="2" />
<text  x="1144.24" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (4 samples, 3.31%)</title><rect x="634.1" y="117" width="39.0" height="15.0" fill="rgb(210,2,30)" rx="2" ry="2" />
<text  x="637.13" y="127.5" >std..</text>
</g>
<g >
<title>__GI___libc_free(mem=0x7f103c361a00) (1 samples, 0.83%)</title><rect x="985.2" y="181" width="9.8" height="15.0" fill="rgb(250,182,50)" rx="2" ry="2" />
<text  x="988.21" y="191.5" ></text>
</g>
<g >
<title>_int_malloc(av=av@entry=0x7f1040000020, (1 samples, 0.83%)</title><rect x="331.8" y="277" width="9.8" height="15.0" fill="rgb(242,61,0)" rx="2" ry="2" />
<text  x="334.82" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 0.83%)</title><rect x="1180.2" y="373" width="9.8" height="15.0" fill="rgb(225,7,11)" rx="2" ry="2" />
<text  x="1183.25" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (3 samples, 2.48%)</title><rect x="497.6" y="117" width="29.3" height="15.0" fill="rgb(248,157,18)" rx="2" ry="2" />
<text  x="500.60" y="127.5" >st..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="624.4" y="277" width="48.7" height="15.0" fill="rgb(213,183,8)" rx="2" ry="2" />
<text  x="627.38" y="287.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (17 samples, 14.05%)</title><rect x="136.8" y="325" width="165.8" height="15.0" fill="rgb(246,85,42)" rx="2" ry="2" />
<text  x="139.78" y="335.5" >std::__cxx11::basic_s..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="478.1" y="229" width="48.8" height="15.0" fill="rgb(253,59,51)" rx="2" ry="2" />
<text  x="481.10" y="239.5" >std:..</text>
</g>
<g >
<title>malloc_consolidate(av=av@entry=0x7f1044000020) (1 samples, 0.83%)</title><rect x="1082.7" y="261" width="9.8" height="15.0" fill="rgb(251,90,48)" rx="2" ry="2" />
<text  x="1085.73" y="271.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="770.7" y="293" width="48.7" height="15.0" fill="rgb(236,166,16)" rx="2" ry="2" />
<text  x="773.66" y="303.5" >std:..</text>
</g>
<g >
<title>PageId::~PageId (8 samples, 6.61%)</title><rect x="985.2" y="277" width="78.0" height="15.0" fill="rgb(237,105,40)" rx="2" ry="2" />
<text  x="988.21" y="287.5" >PageId::~..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="322.1" y="261" width="9.7" height="15.0" fill="rgb(208,181,0)" rx="2" ry="2" />
<text  x="325.07" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (16 samples, 13.22%)</title><rect x="136.8" y="309" width="156.0" height="15.0" fill="rgb(209,46,23)" rx="2" ry="2" />
<text  x="139.78" y="319.5" >std::__cxx11::basic_..</text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="478.1" y="293" width="48.8" height="15.0" fill="rgb(238,6,28)" rx="2" ry="2" />
<text  x="481.10" y="303.5" >std:..</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="273.3" y="213" width="9.8" height="15.0" fill="rgb(247,201,38)" rx="2" ry="2" />
<text  x="276.31" y="223.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (4 samples, 3.31%)</title><rect x="390.3" y="293" width="39.0" height="15.0" fill="rgb(240,13,46)" rx="2" ry="2" />
<text  x="393.33" y="303.5" >std..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3c92ed0) (2 samples, 1.65%)</title><rect x="29.5" y="357" width="19.5" height="15.0" fill="rgb(244,63,37)" rx="2" ry="2" />
<text  x="32.50" y="367.5" ></text>
</g>
<g >
<title>operatornew(unsigned (1 samples, 0.83%)</title><rect x="1112.0" y="261" width="9.7" height="15.0" fill="rgb(252,18,28)" rx="2" ry="2" />
<text  x="1114.98" y="271.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="58.8" y="325" width="9.7" height="15.0" fill="rgb(233,201,30)" rx="2" ry="2" />
<text  x="61.76" y="335.5" ></text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6b108, (5 samples, 4.13%)</title><rect x="721.9" y="357" width="48.8" height="15.0" fill="rgb(231,9,50)" rx="2" ry="2" />
<text  x="724.90" y="367.5" >__pt..</text>
</g>
<g >
<title>std::vector&lt;PageId, (13 samples, 10.74%)</title><rect x="302.6" y="373" width="126.7" height="15.0" fill="rgb(245,25,43)" rx="2" ry="2" />
<text  x="305.56" y="383.5" >std::vector&lt;Pag..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="819.4" y="229" width="48.8" height="15.0" fill="rgb(247,59,15)" rx="2" ry="2" />
<text  x="822.42" y="239.5" >std:..</text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e39bb650) (1 samples, 0.83%)</title><rect x="10.0" y="341" width="9.8" height="15.0" fill="rgb(207,67,52)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (8 samples, 6.61%)</title><rect x="985.2" y="229" width="78.0" height="15.0" fill="rgb(216,125,43)" rx="2" ry="2" />
<text  x="988.21" y="239.5" >std::__cx..</text>
</g>
<g >
<title>__GI___pthread_mutex_lock(mutex=0x5612e3ce4750) (1 samples, 0.83%)</title><rect x="97.8" y="341" width="9.7" height="15.0" fill="rgb(211,206,25)" rx="2" ry="2" />
<text  x="100.77" y="351.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (1 samples, 0.83%)</title><rect x="1180.2" y="485" width="9.8" height="15.0" fill="rgb(245,167,1)" rx="2" ry="2" />
<text  x="1183.25" y="495.5" ></text>
</g>
<g >
<title>clone() (88 samples, 72.73%)</title><rect x="10.0" y="549" width="858.2" height="15.0" fill="rgb(205,212,49)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >clone()</text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="166.0" y="213" width="9.8" height="15.0" fill="rgb(228,196,4)" rx="2" ry="2" />
<text  x="169.03" y="223.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt(mutex=0x5612e3ccce50, (1 samples, 0.83%)</title><rect x="127.0" y="341" width="9.8" height="15.0" fill="rgb(244,5,45)" rx="2" ry="2" />
<text  x="130.02" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (13 samples, 10.74%)</title><rect x="166.0" y="277" width="126.8" height="15.0" fill="rgb(212,100,28)" rx="2" ry="2" />
<text  x="169.03" y="287.5" >std::__cxx11::b..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="819.4" y="261" width="48.8" height="15.0" fill="rgb(233,220,41)" rx="2" ry="2" />
<text  x="822.42" y="271.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 3.31%)</title><rect x="634.1" y="165" width="39.0" height="15.0" fill="rgb(234,194,8)" rx="2" ry="2" />
<text  x="637.13" y="175.5" >std..</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async (3 samples, 2.48%)</title><rect x="956.0" y="437" width="29.2" height="15.0" fill="rgb(210,65,22)" rx="2" ry="2" />
<text  x="958.95" y="447.5" >st..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::initEdges(MultiThreadedPageRankComputer::Pool&amp;, (48 samples, 39.67%)</title><rect x="10.0" y="501" width="468.1" height="15.0" fill="rgb(246,102,4)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiT..</text>
</g>
<g >
<title>std::__invoke_impl&lt;std::pair&lt;double, (5 samples, 4.13%)</title><rect x="575.6" y="229" width="48.8" height="15.0" fill="rgb(237,186,23)" rx="2" ry="2" />
<text  x="578.62" y="239.5" >std:..</text>
</g>
<g >
<title>__pthread_once_slow(once_control=0x5612e3d6af38, (5 samples, 4.13%)</title><rect x="673.1" y="357" width="48.8" height="15.0" fill="rgb(208,173,18)" rx="2" ry="2" />
<text  x="676.14" y="367.5" >__pt..</text>
</g>
<g >
<title>_int_free(av=0x7f1048000020, (1 samples, 0.83%)</title><rect x="1004.7" y="181" width="9.8" height="15.0" fill="rgb(224,162,43)" rx="2" ry="2" />
<text  x="1007.71" y="191.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3ccce50) (1 samples, 0.83%)</title><rect x="58.8" y="357" width="9.7" height="15.0" fill="rgb(214,224,9)" rx="2" ry="2" />
<text  x="61.76" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 3.31%)</title><rect x="390.3" y="261" width="39.0" height="15.0" fill="rgb(205,31,45)" rx="2" ry="2" />
<text  x="393.33" y="271.5" >std..</text>
</g>
<g >
<title>__gthread_mutex_lock(__mutex=0x5612e3cd85f0) (1 samples, 0.83%)</title><rect x="78.3" y="357" width="9.7" height="15.0" fill="rgb(236,32,25)" rx="2" ry="2" />
<text  x="81.26" y="367.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="341.6" y="261" width="9.7" height="15.0" fill="rgb(245,51,19)" rx="2" ry="2" />
<text  x="344.57" y="271.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (40 samples, 33.06%)</title><rect x="478.1" y="453" width="390.1" height="15.0" fill="rgb(241,155,32)" rx="2" ry="2" />
<text  x="481.10" y="463.5" >std::__invoke&lt;std::__future_base::_Async_state_impl&lt;s..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::updateRanks(MultiThreadedPageRankComputer::Pool&amp;, (5 samples, 4.13%)</title><rect x="819.4" y="277" width="48.8" height="15.0" fill="rgb(205,201,47)" rx="2" ry="2" />
<text  x="822.42" y="287.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.83%)</title><rect x="819.4" y="133" width="9.8" height="15.0" fill="rgb(231,178,50)" rx="2" ry="2" />
<text  x="822.42" y="143.5" ></text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex(threadid=139708069816064, (6 samples, 4.96%)</title><rect x="868.2" y="453" width="58.5" height="15.0" fill="rgb(245,98,49)" rx="2" ry="2" />
<text  x="871.18" y="463.5" >__GI__..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 0.83%)</title><rect x="1170.5" y="453" width="9.7" height="15.0" fill="rgb(246,130,11)" rx="2" ry="2" />
<text  x="1173.50" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 0.83%)</title><rect x="926.7" y="437" width="9.7" height="15.0" fill="rgb(252,90,37)" rx="2" ry="2" />
<text  x="929.69" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="1151.0" y="469" width="9.7" height="15.0" fill="rgb(223,222,30)" rx="2" ry="2" />
<text  x="1153.99" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 2.48%)</title><rect x="497.6" y="165" width="29.3" height="15.0" fill="rgb(229,31,12)" rx="2" ry="2" />
<text  x="500.60" y="175.5" >st..</text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.83%)</title><rect x="10.0" y="325" width="9.8" height="15.0" fill="rgb(217,116,16)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
</g>
</svg>
